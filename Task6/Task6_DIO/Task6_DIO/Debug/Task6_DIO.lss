
Task6_DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084d  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000680  00000000  00000000  00000ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035d  00000000  00000000  00001131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034e  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <button_init>:
#include "../DIO_Driver/DIO.h"
#include "../registers.h"
 
void button_init(void)
{
	DIO_init(PORTC_DIR_addr,1);
  6c:	61 e0       	ldi	r22, 0x01	; 1
  6e:	70 e0       	ldi	r23, 0x00	; 0
  70:	84 e3       	ldi	r24, 0x34	; 52
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 48 00 	call	0x90	; 0x90 <DIO_init>
  78:	08 95       	ret

0000007a <button_pressed>:
}
int button_pressed(void)
{
	return (DIo_read(PINC_Data_addr) == 0x01);
  7a:	83 e3       	ldi	r24, 0x33	; 51
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	0e 94 4b 00 	call	0x96	; 0x96 <DIo_read>
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	09 f0       	breq	.+2      	; 0x8a <button_pressed+0x10>
  88:	20 e0       	ldi	r18, 0x00	; 0
}
  8a:	82 2f       	mov	r24, r18
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	08 95       	ret

00000090 <DIO_init>:
 */ 
#include "../registers.h"

void DIO_init(int DRR_address ,int direction)
{
	mem(DRR_address) = direction;
  90:	fc 01       	movw	r30, r24
  92:	60 83       	st	Z, r22
  94:	08 95       	ret

00000096 <DIo_read>:
}
int DIo_read(int PIN_address)
{
	return mem(PIN_address);
  96:	fc 01       	movw	r30, r24
  98:	80 81       	ld	r24, Z
}
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	08 95       	ret

0000009e <DIO_write>:
void DIO_write(int PORT_address, int value)
{
	mem(PORT_address) = value;
  9e:	fc 01       	movw	r30, r24
  a0:	60 83       	st	Z, r22
  a2:	08 95       	ret

000000a4 <led_init>:
#include "../registers.h"

//#include <avr/io.h>
void led_init(void)
{
	DIO_init(PORTA_DIR_addr,0x01);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	8a e3       	ldi	r24, 0x3A	; 58
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 48 00 	call	0x90	; 0x90 <DIO_init>
  b0:	08 95       	ret

000000b2 <led_ON>:
}

void led_ON(void)
{
	DIO_write(PORTA_Data_addr,0x01);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	8b e3       	ldi	r24, 0x3B	; 59
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_write>
  be:	08 95       	ret

000000c0 <led_OFF>:
}

void led_OFF(void)
{
	DIO_write(PORTA_Data_addr,0x00);
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	8b e3       	ldi	r24, 0x3B	; 59
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_write>
  cc:	08 95       	ret

000000ce <app_init>:
#include "Button_driver/button.h"
#include "LED_Driver/led.h"

void app_init(void)
{
	led_init();
  ce:	0e 94 52 00 	call	0xa4	; 0xa4 <led_init>
	button_init();
  d2:	0e 94 36 00 	call	0x6c	; 0x6c <button_init>
  d6:	08 95       	ret

000000d8 <main>:
}

int main(void)
{
	app_init();	
  d8:	0e 94 67 00 	call	0xce	; 0xce <app_init>
	while (true)
	{
		if(button_pressed())
  dc:	0e 94 3d 00 	call	0x7a	; 0x7a <button_pressed>
  e0:	88 23       	and	r24, r24
  e2:	19 f0       	breq	.+6      	; 0xea <main+0x12>
		{
			led_ON();
  e4:	0e 94 59 00 	call	0xb2	; 0xb2 <led_ON>
  e8:	f9 cf       	rjmp	.-14     	; 0xdc <main+0x4>
		}
		else
		{
			led_OFF();
  ea:	0e 94 60 00 	call	0xc0	; 0xc0 <led_OFF>
  ee:	f6 cf       	rjmp	.-20     	; 0xdc <main+0x4>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
