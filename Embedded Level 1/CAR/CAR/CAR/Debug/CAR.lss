
CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012de  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000992  00000000  00000000  00001cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d6  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  00003018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000515  00000000  00000000  00003250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000600  00000000  00000000  00003765  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00003d65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  64:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <app_init>:
#include "Motor_Driver/motor.h"
#include "Timer_Driver/timer.h"
#include "macros.h"

void app_init()
{
  6c:	ef 92       	push	r14
  6e:	0f 93       	push	r16
	button_init(&PORTA_Data,&PORTA_Dir,buttonG);
  70:	43 e0       	ldi	r20, 0x03	; 3
  72:	6a e3       	ldi	r22, 0x3A	; 58
  74:	70 e0       	ldi	r23, 0x00	; 0
  76:	8b e3       	ldi	r24, 0x3B	; 59
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,buttonL);
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	6a e3       	ldi	r22, 0x3A	; 58
  82:	70 e0       	ldi	r23, 0x00	; 0
  84:	8b e3       	ldi	r24, 0x3B	; 59
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 f5 00 	call	0x1ea	; 0x1ea <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,buttonM);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	6a e3       	ldi	r22, 0x3A	; 58
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	8b e3       	ldi	r24, 0x3B	; 59
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 f5 00 	call	0x1ea	; 0x1ea <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,buttonR);
  9a:	42 e0       	ldi	r20, 0x02	; 2
  9c:	6a e3       	ldi	r22, 0x3A	; 58
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	8b e3       	ldi	r24, 0x3B	; 59
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <button_init>
	
	timer_pwm_init();
  a8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <timer_pwm_init>
	//led_init(&PORTB,&DDRB,led0); // used for debugging
	
	// Inintial State
	motor_init(&PORTC_Data,&PORTC_Data,&PORTC_Dir,&PORTC_Dir,motor1_IN1,motor1_IN2);
  ac:	ee 24       	eor	r14, r14
  ae:	e3 94       	inc	r14
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	24 e3       	ldi	r18, 0x34	; 52
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	44 e3       	ldi	r20, 0x34	; 52
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	65 e3       	ldi	r22, 0x35	; 53
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	85 e3       	ldi	r24, 0x35	; 53
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <motor_init>
	motor_init(&PORTC_Data,&PORTC_Data,&PORTC_Dir,&PORTC_Dir,motor2_IN1,motor2_IN2);
  c6:	0f 2e       	mov	r0, r31
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	ef 2e       	mov	r14, r31
  cc:	f0 2d       	mov	r31, r0
  ce:	02 e0       	ldi	r16, 0x02	; 2
  d0:	24 e3       	ldi	r18, 0x34	; 52
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	44 e3       	ldi	r20, 0x34	; 52
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	65 e3       	ldi	r22, 0x35	; 53
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	85 e3       	ldi	r24, 0x35	; 53
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <motor_init>
	
	
}
  e4:	0f 91       	pop	r16
  e6:	ef 90       	pop	r14
  e8:	08 95       	ret

000000ea <car_forward>:

void car_forward(void)
{
	move_forward(&PORTC_Data,&PORTC_Data,motor1_IN1,motor1_IN2);
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	65 e3       	ldi	r22, 0x35	; 53
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	85 e3       	ldi	r24, 0x35	; 53
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <move_forward>
	move_forward(&PORTC_Data,&PORTC_Data,motor2_IN1,motor2_IN2);
  fa:	23 e0       	ldi	r18, 0x03	; 3
  fc:	42 e0       	ldi	r20, 0x02	; 2
  fe:	65 e3       	ldi	r22, 0x35	; 53
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	85 e3       	ldi	r24, 0x35	; 53
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <move_forward>
 10a:	08 95       	ret

0000010c <car_bacwards>:
}

void car_bacwards(void)
{
	move_backwards(&PORTC_Data,&PORTC_Data,motor1_IN1,motor1_IN2);
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	65 e3       	ldi	r22, 0x35	; 53
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	85 e3       	ldi	r24, 0x35	; 53
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 ae 01 	call	0x35c	; 0x35c <move_backwards>
	move_backwards(&PORTC_Data,&PORTC_Data,motor2_IN1,motor2_IN2);
 11c:	23 e0       	ldi	r18, 0x03	; 3
 11e:	42 e0       	ldi	r20, 0x02	; 2
 120:	65 e3       	ldi	r22, 0x35	; 53
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	85 e3       	ldi	r24, 0x35	; 53
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 ae 01 	call	0x35c	; 0x35c <move_backwards>
 12c:	08 95       	ret

0000012e <car_stop>:
}

void car_stop(void)
{
	stop(&PORTC_Data,&PORTC_Data,motor1_IN1,motor1_IN2);
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	65 e3       	ldi	r22, 0x35	; 53
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	85 e3       	ldi	r24, 0x35	; 53
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 95 01 	call	0x32a	; 0x32a <stop>
	stop(&PORTC_Data,&PORTC_Data,motor2_IN1,motor2_IN2);
 13e:	23 e0       	ldi	r18, 0x03	; 3
 140:	42 e0       	ldi	r20, 0x02	; 2
 142:	65 e3       	ldi	r22, 0x35	; 53
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	85 e3       	ldi	r24, 0x35	; 53
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 95 01 	call	0x32a	; 0x32a <stop>
 14e:	08 95       	ret

00000150 <car_rotate_left>:
}

void car_rotate_left(void)
{
	move_forward(&PORTC_Data,&PORTC_Data,motor1_IN1,motor1_IN2);
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	65 e3       	ldi	r22, 0x35	; 53
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	85 e3       	ldi	r24, 0x35	; 53
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <move_forward>
	move_backwards(&PORTC_Data,&PORTC_Data,motor2_IN1,motor2_IN2);
 160:	23 e0       	ldi	r18, 0x03	; 3
 162:	42 e0       	ldi	r20, 0x02	; 2
 164:	65 e3       	ldi	r22, 0x35	; 53
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	85 e3       	ldi	r24, 0x35	; 53
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 ae 01 	call	0x35c	; 0x35c <move_backwards>
	set_speed(30);
 170:	8e e1       	ldi	r24, 0x1E	; 30
 172:	0e 94 c6 01 	call	0x38c	; 0x38c <set_speed>
 176:	08 95       	ret

00000178 <car_rotate_right>:

}

void car_rotate_right(void)
{
	move_forward(&PORTC_Data,&PORTC_Data,motor2_IN1,motor2_IN2);
 178:	23 e0       	ldi	r18, 0x03	; 3
 17a:	42 e0       	ldi	r20, 0x02	; 2
 17c:	65 e3       	ldi	r22, 0x35	; 53
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	85 e3       	ldi	r24, 0x35	; 53
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <move_forward>
	move_backwards(&PORTC_Data,&PORTC_Data,motor1_IN1,motor1_IN2);
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	65 e3       	ldi	r22, 0x35	; 53
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	85 e3       	ldi	r24, 0x35	; 53
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 ae 01 	call	0x35c	; 0x35c <move_backwards>
	set_speed(30);
 198:	8e e1       	ldi	r24, 0x1E	; 30
 19a:	0e 94 c6 01 	call	0x38c	; 0x38c <set_speed>
 19e:	08 95       	ret

000001a0 <setState>:

}

void setState(uint8_t state)
{
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
	if(state >= 0 && state!=3 )
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	a1 f0       	breq	.+40     	; 0x1d0 <setState+0x30>
	{
		car_forward();
 1a8:	0e 94 75 00 	call	0xea	; 0xea <car_forward>
		if(state == 0) set_speed(30);
 1ac:	c1 11       	cpse	r28, r1
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <setState+0x18>
 1b0:	8e e1       	ldi	r24, 0x1E	; 30
 1b2:	0e 94 c6 01 	call	0x38c	; 0x38c <set_speed>
 1b6:	11 c0       	rjmp	.+34     	; 0x1da <setState+0x3a>
		else if (state == 1) set_speed(60);
 1b8:	c1 30       	cpi	r28, 0x01	; 1
 1ba:	21 f4       	brne	.+8      	; 0x1c4 <setState+0x24>
 1bc:	8c e3       	ldi	r24, 0x3C	; 60
 1be:	0e 94 c6 01 	call	0x38c	; 0x38c <set_speed>
 1c2:	0b c0       	rjmp	.+22     	; 0x1da <setState+0x3a>
		else if (state == 2) set_speed(90);
 1c4:	c2 30       	cpi	r28, 0x02	; 2
 1c6:	49 f4       	brne	.+18     	; 0x1da <setState+0x3a>
 1c8:	8a e5       	ldi	r24, 0x5A	; 90
 1ca:	0e 94 c6 01 	call	0x38c	; 0x38c <set_speed>
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <setState+0x3a>
	}
	else
	{
		car_bacwards();
 1d0:	0e 94 86 00 	call	0x10c	; 0x10c <car_bacwards>
		set_speed(30);
 1d4:	8e e1       	ldi	r24, 0x1E	; 30
 1d6:	0e 94 c6 01 	call	0x38c	; 0x38c <set_speed>
	}
}
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <is_button_pressed>:
uint8_t is_button_pressed(uint8_t button_bit_number)
{
	return button_pressed(&PORTA_Pin,button_bit_number);
 1de:	68 2f       	mov	r22, r24
 1e0:	89 e3       	ldi	r24, 0x39	; 57
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <button_pressed>
}
 1e8:	08 95       	ret

000001ea <button_init>:
#include "../macros.h"
#include "../DIO_Driver/dio.h"
#include <stdint.h>

void button_init(vuint8_t* PORT_, vuint8_t* DDR_, uint8_t bitNumber)
{
 1ea:	24 2f       	mov	r18, r20
	DIO_init(PORT_,DDR_,INPUT,bitNumber);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_init>
 1f2:	08 95       	ret

000001f4 <button_pressed>:
}

uint8_t button_pressed(vuint8_t* PIN_, uint8_t bitNumber)
{
	return DIO_read(PIN_,bitNumber);
 1f4:	0e 94 18 01 	call	0x230	; 0x230 <DIO_read>
}
 1f8:	08 95       	ret

000001fa <DIO_init>:


void DIO_init(vuint8_t* PORT_, vuint8_t* DDR_, uint8_t dircetion, uint8_t bitNumber)
{
	
	if(dircetion == INPUT)
 1fa:	41 11       	cpse	r20, r1
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <DIO_init+0x1e>
	{
		*DDR_ &= ~(1 << bitNumber);
 1fe:	fb 01       	movw	r30, r22
 200:	30 81       	ld	r19, Z
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_init+0x12>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	2a 95       	dec	r18
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_init+0xe>
 210:	80 95       	com	r24
 212:	83 23       	and	r24, r19
 214:	80 83       	st	Z, r24
 216:	08 95       	ret
	}
	else
	{
		*DDR_ |= (1 << bitNumber);
 218:	fb 01       	movw	r30, r22
 21a:	30 81       	ld	r19, Z
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_init+0x2c>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	2a 95       	dec	r18
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_init+0x28>
 22a:	83 2b       	or	r24, r19
 22c:	80 83       	st	Z, r24
 22e:	08 95       	ret

00000230 <DIO_read>:
	}
}
uint8_t DIO_read (vuint8_t* PIN_, uint8_t bitNumber)
{
	return ((*PIN_ & (1 << bitNumber)) == (1 << bitNumber));
 230:	fc 01       	movw	r30, r24
 232:	20 81       	ld	r18, Z
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_read+0xe>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_read+0xa>
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	24 23       	and	r18, r20
 246:	35 23       	and	r19, r21
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	42 17       	cp	r20, r18
 24c:	53 07       	cpc	r21, r19
 24e:	09 f0       	breq	.+2      	; 0x252 <DIO_read+0x22>
 250:	80 e0       	ldi	r24, 0x00	; 0
}
 252:	08 95       	ret

00000254 <main>:


int main(void)
{
	
	app_init();
 254:	0e 94 36 00 	call	0x6c	; 0x6c <app_init>
	
	//Initial state of G button
	uint8_t prevG = 0 , nStates = 4;
	int8_t state = -1; //
 258:	df ef       	ldi	r29, 0xFF	; 255
{
	
	app_init();
	
	//Initial state of G button
	uint8_t prevG = 0 , nStates = 4;
 25a:	10 e0       	ldi	r17, 0x00	; 0
 25c:	01 c0       	rjmp	.+2      	; 0x260 <main+0xc>
 25e:	1c 2f       	mov	r17, r28
	int8_t state = -1; //
	while (True)
	{
		uint8_t currentG = is_button_pressed(buttonG) ;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 ef 00 	call	0x1de	; 0x1de <is_button_pressed>
 266:	c8 2f       	mov	r28, r24
		
		if(prevG != currentG && currentG) // to Avoid long press
 268:	18 17       	cp	r17, r24
 26a:	11 f0       	breq	.+4      	; 0x270 <main+0x1c>
 26c:	81 11       	cpse	r24, r1
		{
			state++; // each press of button G changes the state
 26e:	df 5f       	subi	r29, 0xFF	; 255
		}
		
		if(is_button_pressed(buttonM) && state > -1)// state > -1 to avoid pressing M at the first time we must press G first
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 ef 00 	call	0x1de	; 0x1de <is_button_pressed>
 276:	88 23       	and	r24, r24
 278:	89 f0       	breq	.+34     	; 0x29c <main+0x48>
 27a:	dd 23       	and	r29, r29
 27c:	7c f0       	brlt	.+30     	; 0x29c <main+0x48>
		{
			setState(state % nStates); // making the states circulating
 27e:	8d 2f       	mov	r24, r29
 280:	0d 2e       	mov	r0, r29
 282:	00 0c       	add	r0, r0
 284:	99 0b       	sbc	r25, r25
 286:	83 70       	andi	r24, 0x03	; 3
 288:	90 78       	andi	r25, 0x80	; 128
 28a:	99 23       	and	r25, r25
 28c:	24 f4       	brge	.+8      	; 0x296 <main+0x42>
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	8c 6f       	ori	r24, 0xFC	; 252
 292:	9f 6f       	ori	r25, 0xFF	; 255
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <setState>
 29a:	e1 cf       	rjmp	.-62     	; 0x25e <main+0xa>
		}
		else if(state > -1) // STOP State
 29c:	dd 23       	and	r29, r29
 29e:	fc f2       	brlt	.-66     	; 0x25e <main+0xa>
		{
			car_stop();
 2a0:	0e 94 97 00 	call	0x12e	; 0x12e <car_stop>
			if(is_button_pressed(buttonL))
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 ef 00 	call	0x1de	; 0x1de <is_button_pressed>
 2aa:	88 23       	and	r24, r24
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <main+0x60>
			{
				car_rotate_left();
 2ae:	0e 94 a8 00 	call	0x150	; 0x150 <car_rotate_left>
 2b2:	d5 cf       	rjmp	.-86     	; 0x25e <main+0xa>
			}
			else if (is_button_pressed(buttonR))
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 ef 00 	call	0x1de	; 0x1de <is_button_pressed>
 2ba:	88 23       	and	r24, r24
 2bc:	81 f2       	breq	.-96     	; 0x25e <main+0xa>
			{
				car_rotate_right();
 2be:	0e 94 bc 00 	call	0x178	; 0x178 <car_rotate_right>
 2c2:	cd cf       	rjmp	.-102    	; 0x25e <main+0xa>

000002c4 <motor_init>:
#include "../DIO_Driver/dio.h"
#include "../Timer_Driver/timer.h"
#include <math.h>

void motor_init(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,vuint8_t* IN1_DDR, vuint8_t* IN2_DDR,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
 2c4:	cf 92       	push	r12
 2c6:	df 92       	push	r13
 2c8:	ef 92       	push	r14
 2ca:	0f 93       	push	r16
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	eb 01       	movw	r28, r22
 2d2:	ba 01       	movw	r22, r20
 2d4:	69 01       	movw	r12, r18
 2d6:	20 2f       	mov	r18, r16
	DIO_init(PORT_IN1,IN1_DDR,OUTPUT,IN1_bitNumber);
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_init>
	DIO_init(PORT_IN2,IN2_DDR,OUTPUT,IN2_bitNumber);
 2de:	2e 2d       	mov	r18, r14
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	b6 01       	movw	r22, r12
 2e4:	ce 01       	movw	r24, r28
 2e6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_init>
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	0f 91       	pop	r16
 2f0:	ef 90       	pop	r14
 2f2:	df 90       	pop	r13
 2f4:	cf 90       	pop	r12
 2f6:	08 95       	ret

000002f8 <move_forward>:

void move_forward(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
	*PORT_IN1 |= (1<<IN1_bitNumber);	//in1 HIGH
 2f8:	dc 01       	movw	r26, r24
 2fa:	3c 91       	ld	r19, X
 2fc:	e1 e0       	ldi	r30, 0x01	; 1
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	df 01       	movw	r26, r30
 302:	02 c0       	rjmp	.+4      	; 0x308 <move_forward+0x10>
 304:	aa 0f       	add	r26, r26
 306:	bb 1f       	adc	r27, r27
 308:	4a 95       	dec	r20
 30a:	e2 f7       	brpl	.-8      	; 0x304 <move_forward+0xc>
 30c:	ad 01       	movw	r20, r26
 30e:	43 2b       	or	r20, r19
 310:	dc 01       	movw	r26, r24
 312:	4c 93       	st	X, r20
	*PORT_IN2 &= ~(1<<IN2_bitNumber);	//in2 LOW  Then Forward CLock Wise
 314:	db 01       	movw	r26, r22
 316:	8c 91       	ld	r24, X
 318:	02 c0       	rjmp	.+4      	; 0x31e <move_forward+0x26>
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	2a 95       	dec	r18
 320:	e2 f7       	brpl	.-8      	; 0x31a <move_forward+0x22>
 322:	e0 95       	com	r30
 324:	e8 23       	and	r30, r24
 326:	ec 93       	st	X, r30
 328:	08 95       	ret

0000032a <stop>:
}

void stop(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
 32a:	dc 01       	movw	r26, r24
	*PORT_IN1 &= ~(1<<IN1_bitNumber);	//in1 LOW
 32c:	3c 91       	ld	r19, X
 32e:	e1 e0       	ldi	r30, 0x01	; 1
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	cf 01       	movw	r24, r30
 334:	02 c0       	rjmp	.+4      	; 0x33a <stop+0x10>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	4a 95       	dec	r20
 33c:	e2 f7       	brpl	.-8      	; 0x336 <stop+0xc>
 33e:	98 2f       	mov	r25, r24
 340:	90 95       	com	r25
 342:	93 23       	and	r25, r19
 344:	9c 93       	st	X, r25
	*PORT_IN2 &= ~(1<<IN2_bitNumber);	//in2 LOW
 346:	db 01       	movw	r26, r22
 348:	8c 91       	ld	r24, X
 34a:	02 c0       	rjmp	.+4      	; 0x350 <stop+0x26>
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	2a 95       	dec	r18
 352:	e2 f7       	brpl	.-8      	; 0x34c <stop+0x22>
 354:	e0 95       	com	r30
 356:	e8 23       	and	r30, r24
 358:	ec 93       	st	X, r30
 35a:	08 95       	ret

0000035c <move_backwards>:
}

void move_backwards(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
 35c:	dc 01       	movw	r26, r24
	*PORT_IN1 &= ~(1<<IN1_bitNumber);	//in1 LOW
 35e:	3c 91       	ld	r19, X
 360:	e1 e0       	ldi	r30, 0x01	; 1
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	cf 01       	movw	r24, r30
 366:	02 c0       	rjmp	.+4      	; 0x36c <move_backwards+0x10>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	4a 95       	dec	r20
 36e:	e2 f7       	brpl	.-8      	; 0x368 <move_backwards+0xc>
 370:	98 2f       	mov	r25, r24
 372:	90 95       	com	r25
 374:	93 23       	and	r25, r19
 376:	9c 93       	st	X, r25
	*PORT_IN2 |= (1<<IN2_bitNumber);	//in2 HIGH  Then BackWards anti CLock Wise
 378:	db 01       	movw	r26, r22
 37a:	8c 91       	ld	r24, X
 37c:	02 c0       	rjmp	.+4      	; 0x382 <move_backwards+0x26>
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	2a 95       	dec	r18
 384:	e2 f7       	brpl	.-8      	; 0x37e <move_backwards+0x22>
 386:	e8 2b       	or	r30, r24
 388:	ec 93       	st	X, r30
 38a:	08 95       	ret

0000038c <set_speed>:
}

void set_speed(uint8_t percentage)
{
 38c:	cf 93       	push	r28
 38e:	c8 2f       	mov	r28, r24
	uint8_t OCRO_value = ceil(((double)((double)percentage/(double)100))*(double)MaxNumber8bit);
 390:	68 2f       	mov	r22, r24
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 a5 02 	call	0x54a	; 0x54a <__floatunsisf>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	48 ec       	ldi	r20, 0xC8	; 200
 3a2:	52 e4       	ldi	r21, 0x42	; 66
 3a4:	0e 94 04 02 	call	0x408	; 0x408 <__divsf3>
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	4f e7       	ldi	r20, 0x7F	; 127
 3ae:	53 e4       	ldi	r21, 0x43	; 67
 3b0:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__mulsf3>
 3b4:	0e 94 ed 01 	call	0x3da	; 0x3da <ceil>
 3b8:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fixunssfsi>
	if(percentage >= 0 && percentage <= 100)
 3bc:	c5 36       	cpi	r28, 0x65	; 101
 3be:	18 f4       	brcc	.+6      	; 0x3c6 <set_speed+0x3a>
	Fast_PWM(OCRO_value);
 3c0:	86 2f       	mov	r24, r22
 3c2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <Fast_PWM>
}
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <timer_pwm_init>:
#include "../macros.h"

void timer_pwm_init(void)
{
	////Controlling the speed of the motors using Fast PWM , Timer0, 1/1024 preScaler , non-inverting
	PORTB_Dir |= (1<<3);
 3ca:	87 b3       	in	r24, 0x17	; 23
 3cc:	88 60       	ori	r24, 0x08	; 8
 3ce:	87 bb       	out	0x17, r24	; 23
	Timer0_control = 0b01101101;
 3d0:	8d e6       	ldi	r24, 0x6D	; 109
 3d2:	83 bf       	out	0x33, r24	; 51
 3d4:	08 95       	ret

000003d6 <Fast_PWM>:
}
void Fast_PWM(uint8_t OCR0_)
{
	Timer0_Compare = OCR0_; // OCR0_/256 * 100 % of full speed
 3d6:	8c bf       	out	0x3c, r24	; 60
 3d8:	08 95       	ret

000003da <ceil>:
 3da:	0e 94 55 03 	call	0x6aa	; 0x6aa <__fp_trunc>
 3de:	90 f0       	brcs	.+36     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e0:	9f 37       	cpi	r25, 0x7F	; 127
 3e2:	48 f4       	brcc	.+18     	; 0x3f6 <ceil+0x1c>
 3e4:	91 11       	cpse	r25, r1
 3e6:	16 f4       	brtc	.+4      	; 0x3ec <ceil+0x12>
 3e8:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_szero>
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	80 e8       	ldi	r24, 0x80	; 128
 3f2:	9f e3       	ldi	r25, 0x3F	; 63
 3f4:	08 95       	ret
 3f6:	26 f0       	brts	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f8:	1b 16       	cp	r1, r27
 3fa:	61 1d       	adc	r22, r1
 3fc:	71 1d       	adc	r23, r1
 3fe:	81 1d       	adc	r24, r1
 400:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_mintl>
 404:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_mpack>

00000408 <__divsf3>:
 408:	0e 94 18 02 	call	0x430	; 0x430 <__divsf3x>
 40c:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_round>
 410:	0e 94 1b 03 	call	0x636	; 0x636 <__fp_pscB>
 414:	58 f0       	brcs	.+22     	; 0x42c <__divsf3+0x24>
 416:	0e 94 14 03 	call	0x628	; 0x628 <__fp_pscA>
 41a:	40 f0       	brcs	.+16     	; 0x42c <__divsf3+0x24>
 41c:	29 f4       	brne	.+10     	; 0x428 <__divsf3+0x20>
 41e:	5f 3f       	cpi	r21, 0xFF	; 255
 420:	29 f0       	breq	.+10     	; 0x42c <__divsf3+0x24>
 422:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__fp_inf>
 426:	51 11       	cpse	r21, r1
 428:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_szero>
 42c:	0c 94 11 03 	jmp	0x622	; 0x622 <__fp_nan>

00000430 <__divsf3x>:
 430:	0e 94 33 03 	call	0x666	; 0x666 <__fp_split3>
 434:	68 f3       	brcs	.-38     	; 0x410 <__divsf3+0x8>

00000436 <__divsf3_pse>:
 436:	99 23       	and	r25, r25
 438:	b1 f3       	breq	.-20     	; 0x426 <__divsf3+0x1e>
 43a:	55 23       	and	r21, r21
 43c:	91 f3       	breq	.-28     	; 0x422 <__divsf3+0x1a>
 43e:	95 1b       	sub	r25, r21
 440:	55 0b       	sbc	r21, r21
 442:	bb 27       	eor	r27, r27
 444:	aa 27       	eor	r26, r26
 446:	62 17       	cp	r22, r18
 448:	73 07       	cpc	r23, r19
 44a:	84 07       	cpc	r24, r20
 44c:	38 f0       	brcs	.+14     	; 0x45c <__divsf3_pse+0x26>
 44e:	9f 5f       	subi	r25, 0xFF	; 255
 450:	5f 4f       	sbci	r21, 0xFF	; 255
 452:	22 0f       	add	r18, r18
 454:	33 1f       	adc	r19, r19
 456:	44 1f       	adc	r20, r20
 458:	aa 1f       	adc	r26, r26
 45a:	a9 f3       	breq	.-22     	; 0x446 <__divsf3_pse+0x10>
 45c:	35 d0       	rcall	.+106    	; 0x4c8 <__divsf3_pse+0x92>
 45e:	0e 2e       	mov	r0, r30
 460:	3a f0       	brmi	.+14     	; 0x470 <__divsf3_pse+0x3a>
 462:	e0 e8       	ldi	r30, 0x80	; 128
 464:	32 d0       	rcall	.+100    	; 0x4ca <__divsf3_pse+0x94>
 466:	91 50       	subi	r25, 0x01	; 1
 468:	50 40       	sbci	r21, 0x00	; 0
 46a:	e6 95       	lsr	r30
 46c:	00 1c       	adc	r0, r0
 46e:	ca f7       	brpl	.-14     	; 0x462 <__divsf3_pse+0x2c>
 470:	2b d0       	rcall	.+86     	; 0x4c8 <__divsf3_pse+0x92>
 472:	fe 2f       	mov	r31, r30
 474:	29 d0       	rcall	.+82     	; 0x4c8 <__divsf3_pse+0x92>
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	bb 1f       	adc	r27, r27
 47e:	26 17       	cp	r18, r22
 480:	37 07       	cpc	r19, r23
 482:	48 07       	cpc	r20, r24
 484:	ab 07       	cpc	r26, r27
 486:	b0 e8       	ldi	r27, 0x80	; 128
 488:	09 f0       	breq	.+2      	; 0x48c <__divsf3_pse+0x56>
 48a:	bb 0b       	sbc	r27, r27
 48c:	80 2d       	mov	r24, r0
 48e:	bf 01       	movw	r22, r30
 490:	ff 27       	eor	r31, r31
 492:	93 58       	subi	r25, 0x83	; 131
 494:	5f 4f       	sbci	r21, 0xFF	; 255
 496:	3a f0       	brmi	.+14     	; 0x4a6 <__divsf3_pse+0x70>
 498:	9e 3f       	cpi	r25, 0xFE	; 254
 49a:	51 05       	cpc	r21, r1
 49c:	78 f0       	brcs	.+30     	; 0x4bc <__divsf3_pse+0x86>
 49e:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__fp_inf>
 4a2:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_szero>
 4a6:	5f 3f       	cpi	r21, 0xFF	; 255
 4a8:	e4 f3       	brlt	.-8      	; 0x4a2 <__divsf3_pse+0x6c>
 4aa:	98 3e       	cpi	r25, 0xE8	; 232
 4ac:	d4 f3       	brlt	.-12     	; 0x4a2 <__divsf3_pse+0x6c>
 4ae:	86 95       	lsr	r24
 4b0:	77 95       	ror	r23
 4b2:	67 95       	ror	r22
 4b4:	b7 95       	ror	r27
 4b6:	f7 95       	ror	r31
 4b8:	9f 5f       	subi	r25, 0xFF	; 255
 4ba:	c9 f7       	brne	.-14     	; 0x4ae <__divsf3_pse+0x78>
 4bc:	88 0f       	add	r24, r24
 4be:	91 1d       	adc	r25, r1
 4c0:	96 95       	lsr	r25
 4c2:	87 95       	ror	r24
 4c4:	97 f9       	bld	r25, 7
 4c6:	08 95       	ret
 4c8:	e1 e0       	ldi	r30, 0x01	; 1
 4ca:	66 0f       	add	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	88 1f       	adc	r24, r24
 4d0:	bb 1f       	adc	r27, r27
 4d2:	62 17       	cp	r22, r18
 4d4:	73 07       	cpc	r23, r19
 4d6:	84 07       	cpc	r24, r20
 4d8:	ba 07       	cpc	r27, r26
 4da:	20 f0       	brcs	.+8      	; 0x4e4 <__divsf3_pse+0xae>
 4dc:	62 1b       	sub	r22, r18
 4de:	73 0b       	sbc	r23, r19
 4e0:	84 0b       	sbc	r24, r20
 4e2:	ba 0b       	sbc	r27, r26
 4e4:	ee 1f       	adc	r30, r30
 4e6:	88 f7       	brcc	.-30     	; 0x4ca <__divsf3_pse+0x94>
 4e8:	e0 95       	com	r30
 4ea:	08 95       	ret

000004ec <__fixunssfsi>:
 4ec:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_splitA>
 4f0:	88 f0       	brcs	.+34     	; 0x514 <__fixunssfsi+0x28>
 4f2:	9f 57       	subi	r25, 0x7F	; 127
 4f4:	98 f0       	brcs	.+38     	; 0x51c <__fixunssfsi+0x30>
 4f6:	b9 2f       	mov	r27, r25
 4f8:	99 27       	eor	r25, r25
 4fa:	b7 51       	subi	r27, 0x17	; 23
 4fc:	b0 f0       	brcs	.+44     	; 0x52a <__fixunssfsi+0x3e>
 4fe:	e1 f0       	breq	.+56     	; 0x538 <__fixunssfsi+0x4c>
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	88 1f       	adc	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	1a f0       	brmi	.+6      	; 0x510 <__fixunssfsi+0x24>
 50a:	ba 95       	dec	r27
 50c:	c9 f7       	brne	.-14     	; 0x500 <__fixunssfsi+0x14>
 50e:	14 c0       	rjmp	.+40     	; 0x538 <__fixunssfsi+0x4c>
 510:	b1 30       	cpi	r27, 0x01	; 1
 512:	91 f0       	breq	.+36     	; 0x538 <__fixunssfsi+0x4c>
 514:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_zero>
 518:	b1 e0       	ldi	r27, 0x01	; 1
 51a:	08 95       	ret
 51c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__fp_zero>
 520:	67 2f       	mov	r22, r23
 522:	78 2f       	mov	r23, r24
 524:	88 27       	eor	r24, r24
 526:	b8 5f       	subi	r27, 0xF8	; 248
 528:	39 f0       	breq	.+14     	; 0x538 <__fixunssfsi+0x4c>
 52a:	b9 3f       	cpi	r27, 0xF9	; 249
 52c:	cc f3       	brlt	.-14     	; 0x520 <__fixunssfsi+0x34>
 52e:	86 95       	lsr	r24
 530:	77 95       	ror	r23
 532:	67 95       	ror	r22
 534:	b3 95       	inc	r27
 536:	d9 f7       	brne	.-10     	; 0x52e <__fixunssfsi+0x42>
 538:	3e f4       	brtc	.+14     	; 0x548 <__fixunssfsi+0x5c>
 53a:	90 95       	com	r25
 53c:	80 95       	com	r24
 53e:	70 95       	com	r23
 540:	61 95       	neg	r22
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	8f 4f       	sbci	r24, 0xFF	; 255
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	08 95       	ret

0000054a <__floatunsisf>:
 54a:	e8 94       	clt
 54c:	09 c0       	rjmp	.+18     	; 0x560 <__floatsisf+0x12>

0000054e <__floatsisf>:
 54e:	97 fb       	bst	r25, 7
 550:	3e f4       	brtc	.+14     	; 0x560 <__floatsisf+0x12>
 552:	90 95       	com	r25
 554:	80 95       	com	r24
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	99 23       	and	r25, r25
 562:	a9 f0       	breq	.+42     	; 0x58e <__floatsisf+0x40>
 564:	f9 2f       	mov	r31, r25
 566:	96 e9       	ldi	r25, 0x96	; 150
 568:	bb 27       	eor	r27, r27
 56a:	93 95       	inc	r25
 56c:	f6 95       	lsr	r31
 56e:	87 95       	ror	r24
 570:	77 95       	ror	r23
 572:	67 95       	ror	r22
 574:	b7 95       	ror	r27
 576:	f1 11       	cpse	r31, r1
 578:	f8 cf       	rjmp	.-16     	; 0x56a <__floatsisf+0x1c>
 57a:	fa f4       	brpl	.+62     	; 0x5ba <__floatsisf+0x6c>
 57c:	bb 0f       	add	r27, r27
 57e:	11 f4       	brne	.+4      	; 0x584 <__floatsisf+0x36>
 580:	60 ff       	sbrs	r22, 0
 582:	1b c0       	rjmp	.+54     	; 0x5ba <__floatsisf+0x6c>
 584:	6f 5f       	subi	r22, 0xFF	; 255
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	8f 4f       	sbci	r24, 0xFF	; 255
 58a:	9f 4f       	sbci	r25, 0xFF	; 255
 58c:	16 c0       	rjmp	.+44     	; 0x5ba <__floatsisf+0x6c>
 58e:	88 23       	and	r24, r24
 590:	11 f0       	breq	.+4      	; 0x596 <__floatsisf+0x48>
 592:	96 e9       	ldi	r25, 0x96	; 150
 594:	11 c0       	rjmp	.+34     	; 0x5b8 <__floatsisf+0x6a>
 596:	77 23       	and	r23, r23
 598:	21 f0       	breq	.+8      	; 0x5a2 <__floatsisf+0x54>
 59a:	9e e8       	ldi	r25, 0x8E	; 142
 59c:	87 2f       	mov	r24, r23
 59e:	76 2f       	mov	r23, r22
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <__floatsisf+0x5e>
 5a2:	66 23       	and	r22, r22
 5a4:	71 f0       	breq	.+28     	; 0x5c2 <__floatsisf+0x74>
 5a6:	96 e8       	ldi	r25, 0x86	; 134
 5a8:	86 2f       	mov	r24, r22
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	2a f0       	brmi	.+10     	; 0x5ba <__floatsisf+0x6c>
 5b0:	9a 95       	dec	r25
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	da f7       	brpl	.-10     	; 0x5b0 <__floatsisf+0x62>
 5ba:	88 0f       	add	r24, r24
 5bc:	96 95       	lsr	r25
 5be:	87 95       	ror	r24
 5c0:	97 f9       	bld	r25, 7
 5c2:	08 95       	ret

000005c4 <__fp_inf>:
 5c4:	97 f9       	bld	r25, 7
 5c6:	9f 67       	ori	r25, 0x7F	; 127
 5c8:	80 e8       	ldi	r24, 0x80	; 128
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	08 95       	ret

000005d0 <__fp_mintl>:
 5d0:	88 23       	and	r24, r24
 5d2:	71 f4       	brne	.+28     	; 0x5f0 <__fp_mintl+0x20>
 5d4:	77 23       	and	r23, r23
 5d6:	21 f0       	breq	.+8      	; 0x5e0 <__fp_mintl+0x10>
 5d8:	98 50       	subi	r25, 0x08	; 8
 5da:	87 2b       	or	r24, r23
 5dc:	76 2f       	mov	r23, r22
 5de:	07 c0       	rjmp	.+14     	; 0x5ee <__fp_mintl+0x1e>
 5e0:	66 23       	and	r22, r22
 5e2:	11 f4       	brne	.+4      	; 0x5e8 <__fp_mintl+0x18>
 5e4:	99 27       	eor	r25, r25
 5e6:	0d c0       	rjmp	.+26     	; 0x602 <__fp_mintl+0x32>
 5e8:	90 51       	subi	r25, 0x10	; 16
 5ea:	86 2b       	or	r24, r22
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	2a f0       	brmi	.+10     	; 0x5fc <__fp_mintl+0x2c>
 5f2:	9a 95       	dec	r25
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	da f7       	brpl	.-10     	; 0x5f2 <__fp_mintl+0x22>
 5fc:	88 0f       	add	r24, r24
 5fe:	96 95       	lsr	r25
 600:	87 95       	ror	r24
 602:	97 f9       	bld	r25, 7
 604:	08 95       	ret

00000606 <__fp_mpack>:
 606:	9f 3f       	cpi	r25, 0xFF	; 255
 608:	31 f0       	breq	.+12     	; 0x616 <__fp_mpack_finite+0xc>

0000060a <__fp_mpack_finite>:
 60a:	91 50       	subi	r25, 0x01	; 1
 60c:	20 f4       	brcc	.+8      	; 0x616 <__fp_mpack_finite+0xc>
 60e:	87 95       	ror	r24
 610:	77 95       	ror	r23
 612:	67 95       	ror	r22
 614:	b7 95       	ror	r27
 616:	88 0f       	add	r24, r24
 618:	91 1d       	adc	r25, r1
 61a:	96 95       	lsr	r25
 61c:	87 95       	ror	r24
 61e:	97 f9       	bld	r25, 7
 620:	08 95       	ret

00000622 <__fp_nan>:
 622:	9f ef       	ldi	r25, 0xFF	; 255
 624:	80 ec       	ldi	r24, 0xC0	; 192
 626:	08 95       	ret

00000628 <__fp_pscA>:
 628:	00 24       	eor	r0, r0
 62a:	0a 94       	dec	r0
 62c:	16 16       	cp	r1, r22
 62e:	17 06       	cpc	r1, r23
 630:	18 06       	cpc	r1, r24
 632:	09 06       	cpc	r0, r25
 634:	08 95       	ret

00000636 <__fp_pscB>:
 636:	00 24       	eor	r0, r0
 638:	0a 94       	dec	r0
 63a:	12 16       	cp	r1, r18
 63c:	13 06       	cpc	r1, r19
 63e:	14 06       	cpc	r1, r20
 640:	05 06       	cpc	r0, r21
 642:	08 95       	ret

00000644 <__fp_round>:
 644:	09 2e       	mov	r0, r25
 646:	03 94       	inc	r0
 648:	00 0c       	add	r0, r0
 64a:	11 f4       	brne	.+4      	; 0x650 <__fp_round+0xc>
 64c:	88 23       	and	r24, r24
 64e:	52 f0       	brmi	.+20     	; 0x664 <__fp_round+0x20>
 650:	bb 0f       	add	r27, r27
 652:	40 f4       	brcc	.+16     	; 0x664 <__fp_round+0x20>
 654:	bf 2b       	or	r27, r31
 656:	11 f4       	brne	.+4      	; 0x65c <__fp_round+0x18>
 658:	60 ff       	sbrs	r22, 0
 65a:	04 c0       	rjmp	.+8      	; 0x664 <__fp_round+0x20>
 65c:	6f 5f       	subi	r22, 0xFF	; 255
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	8f 4f       	sbci	r24, 0xFF	; 255
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	08 95       	ret

00000666 <__fp_split3>:
 666:	57 fd       	sbrc	r21, 7
 668:	90 58       	subi	r25, 0x80	; 128
 66a:	44 0f       	add	r20, r20
 66c:	55 1f       	adc	r21, r21
 66e:	59 f0       	breq	.+22     	; 0x686 <__fp_splitA+0x10>
 670:	5f 3f       	cpi	r21, 0xFF	; 255
 672:	71 f0       	breq	.+28     	; 0x690 <__fp_splitA+0x1a>
 674:	47 95       	ror	r20

00000676 <__fp_splitA>:
 676:	88 0f       	add	r24, r24
 678:	97 fb       	bst	r25, 7
 67a:	99 1f       	adc	r25, r25
 67c:	61 f0       	breq	.+24     	; 0x696 <__fp_splitA+0x20>
 67e:	9f 3f       	cpi	r25, 0xFF	; 255
 680:	79 f0       	breq	.+30     	; 0x6a0 <__fp_splitA+0x2a>
 682:	87 95       	ror	r24
 684:	08 95       	ret
 686:	12 16       	cp	r1, r18
 688:	13 06       	cpc	r1, r19
 68a:	14 06       	cpc	r1, r20
 68c:	55 1f       	adc	r21, r21
 68e:	f2 cf       	rjmp	.-28     	; 0x674 <__fp_split3+0xe>
 690:	46 95       	lsr	r20
 692:	f1 df       	rcall	.-30     	; 0x676 <__fp_splitA>
 694:	08 c0       	rjmp	.+16     	; 0x6a6 <__fp_splitA+0x30>
 696:	16 16       	cp	r1, r22
 698:	17 06       	cpc	r1, r23
 69a:	18 06       	cpc	r1, r24
 69c:	99 1f       	adc	r25, r25
 69e:	f1 cf       	rjmp	.-30     	; 0x682 <__fp_splitA+0xc>
 6a0:	86 95       	lsr	r24
 6a2:	71 05       	cpc	r23, r1
 6a4:	61 05       	cpc	r22, r1
 6a6:	08 94       	sec
 6a8:	08 95       	ret

000006aa <__fp_trunc>:
 6aa:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_splitA>
 6ae:	a0 f0       	brcs	.+40     	; 0x6d8 <__fp_trunc+0x2e>
 6b0:	be e7       	ldi	r27, 0x7E	; 126
 6b2:	b9 17       	cp	r27, r25
 6b4:	88 f4       	brcc	.+34     	; 0x6d8 <__fp_trunc+0x2e>
 6b6:	bb 27       	eor	r27, r27
 6b8:	9f 38       	cpi	r25, 0x8F	; 143
 6ba:	60 f4       	brcc	.+24     	; 0x6d4 <__fp_trunc+0x2a>
 6bc:	16 16       	cp	r1, r22
 6be:	b1 1d       	adc	r27, r1
 6c0:	67 2f       	mov	r22, r23
 6c2:	78 2f       	mov	r23, r24
 6c4:	88 27       	eor	r24, r24
 6c6:	98 5f       	subi	r25, 0xF8	; 248
 6c8:	f7 cf       	rjmp	.-18     	; 0x6b8 <__fp_trunc+0xe>
 6ca:	86 95       	lsr	r24
 6cc:	77 95       	ror	r23
 6ce:	67 95       	ror	r22
 6d0:	b1 1d       	adc	r27, r1
 6d2:	93 95       	inc	r25
 6d4:	96 39       	cpi	r25, 0x96	; 150
 6d6:	c8 f3       	brcs	.-14     	; 0x6ca <__fp_trunc+0x20>
 6d8:	08 95       	ret

000006da <__fp_zero>:
 6da:	e8 94       	clt

000006dc <__fp_szero>:
 6dc:	bb 27       	eor	r27, r27
 6de:	66 27       	eor	r22, r22
 6e0:	77 27       	eor	r23, r23
 6e2:	cb 01       	movw	r24, r22
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <__mulsf3>:
 6e8:	0e 94 87 03 	call	0x70e	; 0x70e <__mulsf3x>
 6ec:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_round>
 6f0:	0e 94 14 03 	call	0x628	; 0x628 <__fp_pscA>
 6f4:	38 f0       	brcs	.+14     	; 0x704 <__mulsf3+0x1c>
 6f6:	0e 94 1b 03 	call	0x636	; 0x636 <__fp_pscB>
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__mulsf3+0x1c>
 6fc:	95 23       	and	r25, r21
 6fe:	11 f0       	breq	.+4      	; 0x704 <__mulsf3+0x1c>
 700:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__fp_inf>
 704:	0c 94 11 03 	jmp	0x622	; 0x622 <__fp_nan>
 708:	11 24       	eor	r1, r1
 70a:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_szero>

0000070e <__mulsf3x>:
 70e:	0e 94 33 03 	call	0x666	; 0x666 <__fp_split3>
 712:	70 f3       	brcs	.-36     	; 0x6f0 <__mulsf3+0x8>

00000714 <__mulsf3_pse>:
 714:	95 9f       	mul	r25, r21
 716:	c1 f3       	breq	.-16     	; 0x708 <__mulsf3+0x20>
 718:	95 0f       	add	r25, r21
 71a:	50 e0       	ldi	r21, 0x00	; 0
 71c:	55 1f       	adc	r21, r21
 71e:	62 9f       	mul	r22, r18
 720:	f0 01       	movw	r30, r0
 722:	72 9f       	mul	r23, r18
 724:	bb 27       	eor	r27, r27
 726:	f0 0d       	add	r31, r0
 728:	b1 1d       	adc	r27, r1
 72a:	63 9f       	mul	r22, r19
 72c:	aa 27       	eor	r26, r26
 72e:	f0 0d       	add	r31, r0
 730:	b1 1d       	adc	r27, r1
 732:	aa 1f       	adc	r26, r26
 734:	64 9f       	mul	r22, r20
 736:	66 27       	eor	r22, r22
 738:	b0 0d       	add	r27, r0
 73a:	a1 1d       	adc	r26, r1
 73c:	66 1f       	adc	r22, r22
 73e:	82 9f       	mul	r24, r18
 740:	22 27       	eor	r18, r18
 742:	b0 0d       	add	r27, r0
 744:	a1 1d       	adc	r26, r1
 746:	62 1f       	adc	r22, r18
 748:	73 9f       	mul	r23, r19
 74a:	b0 0d       	add	r27, r0
 74c:	a1 1d       	adc	r26, r1
 74e:	62 1f       	adc	r22, r18
 750:	83 9f       	mul	r24, r19
 752:	a0 0d       	add	r26, r0
 754:	61 1d       	adc	r22, r1
 756:	22 1f       	adc	r18, r18
 758:	74 9f       	mul	r23, r20
 75a:	33 27       	eor	r19, r19
 75c:	a0 0d       	add	r26, r0
 75e:	61 1d       	adc	r22, r1
 760:	23 1f       	adc	r18, r19
 762:	84 9f       	mul	r24, r20
 764:	60 0d       	add	r22, r0
 766:	21 1d       	adc	r18, r1
 768:	82 2f       	mov	r24, r18
 76a:	76 2f       	mov	r23, r22
 76c:	6a 2f       	mov	r22, r26
 76e:	11 24       	eor	r1, r1
 770:	9f 57       	subi	r25, 0x7F	; 127
 772:	50 40       	sbci	r21, 0x00	; 0
 774:	9a f0       	brmi	.+38     	; 0x79c <__mulsf3_pse+0x88>
 776:	f1 f0       	breq	.+60     	; 0x7b4 <__mulsf3_pse+0xa0>
 778:	88 23       	and	r24, r24
 77a:	4a f0       	brmi	.+18     	; 0x78e <__mulsf3_pse+0x7a>
 77c:	ee 0f       	add	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	bb 1f       	adc	r27, r27
 782:	66 1f       	adc	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	91 50       	subi	r25, 0x01	; 1
 78a:	50 40       	sbci	r21, 0x00	; 0
 78c:	a9 f7       	brne	.-22     	; 0x778 <__mulsf3_pse+0x64>
 78e:	9e 3f       	cpi	r25, 0xFE	; 254
 790:	51 05       	cpc	r21, r1
 792:	80 f0       	brcs	.+32     	; 0x7b4 <__mulsf3_pse+0xa0>
 794:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__fp_inf>
 798:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_szero>
 79c:	5f 3f       	cpi	r21, 0xFF	; 255
 79e:	e4 f3       	brlt	.-8      	; 0x798 <__mulsf3_pse+0x84>
 7a0:	98 3e       	cpi	r25, 0xE8	; 232
 7a2:	d4 f3       	brlt	.-12     	; 0x798 <__mulsf3_pse+0x84>
 7a4:	86 95       	lsr	r24
 7a6:	77 95       	ror	r23
 7a8:	67 95       	ror	r22
 7aa:	b7 95       	ror	r27
 7ac:	f7 95       	ror	r31
 7ae:	e7 95       	ror	r30
 7b0:	9f 5f       	subi	r25, 0xFF	; 255
 7b2:	c1 f7       	brne	.-16     	; 0x7a4 <__mulsf3_pse+0x90>
 7b4:	fe 2b       	or	r31, r30
 7b6:	88 0f       	add	r24, r24
 7b8:	91 1d       	adc	r25, r1
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
