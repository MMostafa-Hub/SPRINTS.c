
CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ece  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000615  00000000  00000000  00001806  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000597  00000000  00000000  00001e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  000023b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  00002544  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000518  00000000  00000000  0000295d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002e75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b2 01 	call	0x364	; 0x364 <main>
  64:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_init>:
	{
		*PORT_ |= (1<<bitNumber);
	}
	else
	{
		*PORT_ &= ~(1<<bitNumber);
  6c:	41 11       	cpse	r20, r1
  6e:	0d c0       	rjmp	.+26     	; 0x8a <DIO_init+0x1e>
  70:	fb 01       	movw	r30, r22
  72:	30 81       	ld	r19, Z
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <DIO_init+0x12>
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	2a 95       	dec	r18
  80:	e2 f7       	brpl	.-8      	; 0x7a <DIO_init+0xe>
  82:	80 95       	com	r24
  84:	83 23       	and	r24, r19
  86:	80 83       	st	Z, r24
  88:	08 95       	ret
  8a:	fb 01       	movw	r30, r22
  8c:	30 81       	ld	r19, Z
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <DIO_init+0x2c>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	2a 95       	dec	r18
  9a:	e2 f7       	brpl	.-8      	; 0x94 <DIO_init+0x28>
  9c:	83 2b       	or	r24, r19
  9e:	80 83       	st	Z, r24
  a0:	08 95       	ret

000000a2 <DIO_read>:
  a2:	fc 01       	movw	r30, r24
  a4:	20 81       	ld	r18, Z
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_read+0xe>
  ac:	44 0f       	add	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_read+0xa>
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	24 23       	and	r18, r20
  b8:	35 23       	and	r19, r21
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	42 17       	cp	r20, r18
  be:	53 07       	cpc	r21, r19
  c0:	09 f0       	breq	.+2      	; 0xc4 <DIO_read+0x22>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	08 95       	ret

000000c6 <button_init>:
#include "../macros.h"
#include "../DIO_Driver/dio.h"
#include <stdint.h>

void button_init(vuint8_t* PORT_, vuint8_t* DDR_, uint8_t bitNumber)
{
  c6:	24 2f       	mov	r18, r20
	DIO_init(PORT_,DDR_,INPUT,bitNumber);
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
  ce:	08 95       	ret

000000d0 <button_pressed>:
}

uint8_t button_pressed(vuint8_t* PIN_, uint8_t bitNumber)
{
	return DIO_read(PIN_,bitNumber);	
  d0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_read>
}
  d4:	08 95       	ret

000000d6 <Fast_PWM>:
#define CyclesToOverFlow 256

void Fast_PWM(uint8_t OCR0_)
{
	////Controlling the speed of the motors using Fast PWM , Timer0, 1/128 preScaler
	PORTB_Dir |= (1<<3);
  d6:	97 b3       	in	r25, 0x17	; 23
  d8:	98 60       	ori	r25, 0x08	; 8
  da:	97 bb       	out	0x17, r25	; 23
	
	Timer0_control = 0b01101101;
  dc:	9d e6       	ldi	r25, 0x6D	; 109
  de:	93 bf       	out	0x33, r25	; 51
	Timer0_Compare = OCR0_; // OCR0_/256 * 100 % of full speed
  e0:	8c bf       	out	0x3c, r24	; 60
  e2:	08 95       	ret

000000e4 <motor_init>:
#include "../DIO_Driver/dio.h"
#include "../Timer_Driver/timer.h"
#include <math.h>

void motor_init(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,vuint8_t* IN1_DDR, vuint8_t* IN2_DDR,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
  e4:	cf 92       	push	r12
  e6:	df 92       	push	r13
  e8:	ef 92       	push	r14
  ea:	0f 93       	push	r16
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	eb 01       	movw	r28, r22
  f2:	ba 01       	movw	r22, r20
  f4:	69 01       	movw	r12, r18
  f6:	20 2f       	mov	r18, r16
	DIO_init(PORT_IN1,IN1_DDR,OUTPUT,IN1_bitNumber);
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
	DIO_init(PORT_IN2,IN2_DDR,OUTPUT,IN2_bitNumber);
  fe:	2e 2d       	mov	r18, r14
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	b6 01       	movw	r22, r12
 104:	ce 01       	movw	r24, r28
 106:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	0f 91       	pop	r16
 110:	ef 90       	pop	r14
 112:	df 90       	pop	r13
 114:	cf 90       	pop	r12
 116:	08 95       	ret

00000118 <move_forward>:

void move_forward(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
	*PORT_IN1 |= (1<<IN1_bitNumber);	//in1 HIGH
 118:	dc 01       	movw	r26, r24
 11a:	3c 91       	ld	r19, X
 11c:	e1 e0       	ldi	r30, 0x01	; 1
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	df 01       	movw	r26, r30
 122:	02 c0       	rjmp	.+4      	; 0x128 <move_forward+0x10>
 124:	aa 0f       	add	r26, r26
 126:	bb 1f       	adc	r27, r27
 128:	4a 95       	dec	r20
 12a:	e2 f7       	brpl	.-8      	; 0x124 <move_forward+0xc>
 12c:	ad 01       	movw	r20, r26
 12e:	43 2b       	or	r20, r19
 130:	dc 01       	movw	r26, r24
 132:	4c 93       	st	X, r20
	*PORT_IN2 &= ~(1<<IN2_bitNumber);	//in2 LOW  Then Forward CLock Wise
 134:	db 01       	movw	r26, r22
 136:	8c 91       	ld	r24, X
 138:	02 c0       	rjmp	.+4      	; 0x13e <move_forward+0x26>
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	2a 95       	dec	r18
 140:	e2 f7       	brpl	.-8      	; 0x13a <move_forward+0x22>
 142:	e0 95       	com	r30
 144:	e8 23       	and	r30, r24
 146:	ec 93       	st	X, r30
 148:	08 95       	ret

0000014a <stop>:
}

void stop(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
 14a:	dc 01       	movw	r26, r24
	*PORT_IN1 &= ~(1<<IN1_bitNumber);	//in1 LOW
 14c:	3c 91       	ld	r19, X
 14e:	e1 e0       	ldi	r30, 0x01	; 1
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	cf 01       	movw	r24, r30
 154:	02 c0       	rjmp	.+4      	; 0x15a <stop+0x10>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	4a 95       	dec	r20
 15c:	e2 f7       	brpl	.-8      	; 0x156 <stop+0xc>
 15e:	98 2f       	mov	r25, r24
 160:	90 95       	com	r25
 162:	93 23       	and	r25, r19
 164:	9c 93       	st	X, r25
	*PORT_IN2 &= ~(1<<IN2_bitNumber);	//in2 LOW
 166:	db 01       	movw	r26, r22
 168:	8c 91       	ld	r24, X
 16a:	02 c0       	rjmp	.+4      	; 0x170 <stop+0x26>
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	2a 95       	dec	r18
 172:	e2 f7       	brpl	.-8      	; 0x16c <stop+0x22>
 174:	e0 95       	com	r30
 176:	e8 23       	and	r30, r24
 178:	ec 93       	st	X, r30
 17a:	08 95       	ret

0000017c <move_backwards>:
}

void move_backwards(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
 17c:	dc 01       	movw	r26, r24
	*PORT_IN1 &= ~(1<<IN1_bitNumber);	//in1 LOW
 17e:	3c 91       	ld	r19, X
 180:	e1 e0       	ldi	r30, 0x01	; 1
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	cf 01       	movw	r24, r30
 186:	02 c0       	rjmp	.+4      	; 0x18c <move_backwards+0x10>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	4a 95       	dec	r20
 18e:	e2 f7       	brpl	.-8      	; 0x188 <move_backwards+0xc>
 190:	98 2f       	mov	r25, r24
 192:	90 95       	com	r25
 194:	93 23       	and	r25, r19
 196:	9c 93       	st	X, r25
	*PORT_IN2 |= (1<<IN2_bitNumber);	//in2 HIGH  Then BackWards anti CLock Wise
 198:	db 01       	movw	r26, r22
 19a:	8c 91       	ld	r24, X
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <move_backwards+0x26>
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	2a 95       	dec	r18
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <move_backwards+0x22>
 1a6:	e8 2b       	or	r30, r24
 1a8:	ec 93       	st	X, r30
 1aa:	08 95       	ret

000001ac <set_speed>:
}

void set_speed(uint8_t percentage)
{
 1ac:	cf 93       	push	r28
 1ae:	c8 2f       	mov	r28, r24
	uint8_t speed = ceil(((double)((double)percentage/(double)100))*(double)255);
 1b0:	68 2f       	mov	r22, r24
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 a2 02 	call	0x544	; 0x544 <__floatunsisf>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	48 ec       	ldi	r20, 0xC8	; 200
 1c2:	52 e4       	ldi	r21, 0x42	; 66
 1c4:	0e 94 01 02 	call	0x402	; 0x402 <__divsf3>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	4f e7       	ldi	r20, 0x7F	; 127
 1ce:	53 e4       	ldi	r21, 0x43	; 67
 1d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__mulsf3>
 1d4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ceil>
 1d8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixunssfsi>
	if(percentage <= 100)
 1dc:	c5 36       	cpi	r28, 0x65	; 101
 1de:	18 f4       	brcc	.+6      	; 0x1e6 <set_speed+0x3a>
		Fast_PWM(speed);
 1e0:	86 2f       	mov	r24, r22
 1e2:	0e 94 6b 00 	call	0xd6	; 0xd6 <Fast_PWM>
}
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <app_init>:
#include "Button_Driver/button.h"
#include "Motor_Driver/motor.h"
#include "macros.h"

void app_init()
{
 1ea:	ef 92       	push	r14
 1ec:	0f 93       	push	r16
	button_init(&PORTA_Data,&PORTA_Dir,buttonG);
 1ee:	43 e0       	ldi	r20, 0x03	; 3
 1f0:	6a e3       	ldi	r22, 0x3A	; 58
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	8b e3       	ldi	r24, 0x3B	; 59
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 63 00 	call	0xc6	; 0xc6 <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,buttonL);
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	6a e3       	ldi	r22, 0x3A	; 58
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	8b e3       	ldi	r24, 0x3B	; 59
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 63 00 	call	0xc6	; 0xc6 <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,buttonM);
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	6a e3       	ldi	r22, 0x3A	; 58
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	8b e3       	ldi	r24, 0x3B	; 59
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 63 00 	call	0xc6	; 0xc6 <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,buttonR);
 218:	42 e0       	ldi	r20, 0x02	; 2
 21a:	6a e3       	ldi	r22, 0x3A	; 58
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	8b e3       	ldi	r24, 0x3B	; 59
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 63 00 	call	0xc6	; 0xc6 <button_init>
	
	//led_init(&PORTB,&DDRB,led0); // used for debugging
	
	// Inintial State
	motor_init(&PORTC_Data,&PORTC_Data,&PORTC_Dir,&PORTC_Dir,motor1_IN1,motor1_IN2);
 226:	ee 24       	eor	r14, r14
 228:	e3 94       	inc	r14
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	24 e3       	ldi	r18, 0x34	; 52
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	44 e3       	ldi	r20, 0x34	; 52
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	65 e3       	ldi	r22, 0x35	; 53
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	85 e3       	ldi	r24, 0x35	; 53
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 72 00 	call	0xe4	; 0xe4 <motor_init>
	motor_init(&PORTC_Data,&PORTC_Data,&PORTC_Dir,&PORTC_Dir,motor2_IN1,motor2_IN2);
 240:	0f 2e       	mov	r0, r31
 242:	f3 e0       	ldi	r31, 0x03	; 3
 244:	ef 2e       	mov	r14, r31
 246:	f0 2d       	mov	r31, r0
 248:	02 e0       	ldi	r16, 0x02	; 2
 24a:	24 e3       	ldi	r18, 0x34	; 52
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	44 e3       	ldi	r20, 0x34	; 52
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	65 e3       	ldi	r22, 0x35	; 53
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	85 e3       	ldi	r24, 0x35	; 53
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 72 00 	call	0xe4	; 0xe4 <motor_init>
	
	
}
 25e:	0f 91       	pop	r16
 260:	ef 90       	pop	r14
 262:	08 95       	ret

00000264 <car_forward>:

void car_forward(void)
{
	move_forward(&PORTC_Data,&PORTC_Data,motor1_IN1,motor1_IN2);
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	65 e3       	ldi	r22, 0x35	; 53
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	85 e3       	ldi	r24, 0x35	; 53
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 8c 00 	call	0x118	; 0x118 <move_forward>
	move_forward(&PORTC_Data,&PORTC_Data,motor2_IN1,motor2_IN2);
 274:	23 e0       	ldi	r18, 0x03	; 3
 276:	42 e0       	ldi	r20, 0x02	; 2
 278:	65 e3       	ldi	r22, 0x35	; 53
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	85 e3       	ldi	r24, 0x35	; 53
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 8c 00 	call	0x118	; 0x118 <move_forward>
 284:	08 95       	ret

00000286 <car_bacwards>:
}

void car_bacwards(void)
{
	move_backwards(&PORTC_Data,&PORTC_Data,motor1_IN1,motor1_IN2);
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	65 e3       	ldi	r22, 0x35	; 53
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	85 e3       	ldi	r24, 0x35	; 53
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 be 00 	call	0x17c	; 0x17c <move_backwards>
	move_backwards(&PORTC_Data,&PORTC_Data,motor2_IN1,motor2_IN2);
 296:	23 e0       	ldi	r18, 0x03	; 3
 298:	42 e0       	ldi	r20, 0x02	; 2
 29a:	65 e3       	ldi	r22, 0x35	; 53
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	85 e3       	ldi	r24, 0x35	; 53
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 be 00 	call	0x17c	; 0x17c <move_backwards>
 2a6:	08 95       	ret

000002a8 <car_stop>:
}

void car_stop(void)
{
	stop(&PORTC_Data,&PORTC_Data,motor1_IN1,motor1_IN2);
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	65 e3       	ldi	r22, 0x35	; 53
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	85 e3       	ldi	r24, 0x35	; 53
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 a5 00 	call	0x14a	; 0x14a <stop>
	stop(&PORTC_Data,&PORTC_Data,motor2_IN1,motor2_IN2);
 2b8:	23 e0       	ldi	r18, 0x03	; 3
 2ba:	42 e0       	ldi	r20, 0x02	; 2
 2bc:	65 e3       	ldi	r22, 0x35	; 53
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	85 e3       	ldi	r24, 0x35	; 53
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 a5 00 	call	0x14a	; 0x14a <stop>
 2c8:	08 95       	ret

000002ca <car_rotate_left>:
}

void car_rotate_left(void)
{
	move_forward(&PORTC_Data,&PORTC_Data,motor1_IN1,motor1_IN2);
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	65 e3       	ldi	r22, 0x35	; 53
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	85 e3       	ldi	r24, 0x35	; 53
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 8c 00 	call	0x118	; 0x118 <move_forward>
	move_backwards(&PORTC_Data,&PORTC_Data,motor2_IN1,motor2_IN2);
 2da:	23 e0       	ldi	r18, 0x03	; 3
 2dc:	42 e0       	ldi	r20, 0x02	; 2
 2de:	65 e3       	ldi	r22, 0x35	; 53
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	85 e3       	ldi	r24, 0x35	; 53
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 be 00 	call	0x17c	; 0x17c <move_backwards>
	set_speed(30);
 2ea:	8e e1       	ldi	r24, 0x1E	; 30
 2ec:	0e 94 d6 00 	call	0x1ac	; 0x1ac <set_speed>
 2f0:	08 95       	ret

000002f2 <car_rotate_right>:

}

void car_rotate_right(void)
{
	move_forward(&PORTC_Data,&PORTC_Data,motor2_IN1,motor2_IN2);
 2f2:	23 e0       	ldi	r18, 0x03	; 3
 2f4:	42 e0       	ldi	r20, 0x02	; 2
 2f6:	65 e3       	ldi	r22, 0x35	; 53
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	85 e3       	ldi	r24, 0x35	; 53
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 8c 00 	call	0x118	; 0x118 <move_forward>
	move_backwards(&PORTC_Data,&PORTC_Data,motor1_IN1,motor1_IN2);
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	65 e3       	ldi	r22, 0x35	; 53
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	85 e3       	ldi	r24, 0x35	; 53
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 be 00 	call	0x17c	; 0x17c <move_backwards>
	set_speed(30);
 312:	8e e1       	ldi	r24, 0x1E	; 30
 314:	0e 94 d6 00 	call	0x1ac	; 0x1ac <set_speed>
 318:	08 95       	ret

0000031a <setState>:

}

void setState(uint8_t state)
{
 31a:	cf 93       	push	r28
 31c:	c8 2f       	mov	r28, r24
	if(state >= 0 && state!=3 )
 31e:	83 30       	cpi	r24, 0x03	; 3
 320:	a1 f0       	breq	.+40     	; 0x34a <setState+0x30>
	{
		car_forward();
 322:	0e 94 32 01 	call	0x264	; 0x264 <car_forward>
		if(state == 0) set_speed(30);
 326:	c1 11       	cpse	r28, r1
 328:	04 c0       	rjmp	.+8      	; 0x332 <setState+0x18>
 32a:	8e e1       	ldi	r24, 0x1E	; 30
 32c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <set_speed>
 330:	11 c0       	rjmp	.+34     	; 0x354 <setState+0x3a>
		else if (state == 1) set_speed(60);
 332:	c1 30       	cpi	r28, 0x01	; 1
 334:	21 f4       	brne	.+8      	; 0x33e <setState+0x24>
 336:	8c e3       	ldi	r24, 0x3C	; 60
 338:	0e 94 d6 00 	call	0x1ac	; 0x1ac <set_speed>
 33c:	0b c0       	rjmp	.+22     	; 0x354 <setState+0x3a>
		else if (state == 2) set_speed(90);
 33e:	c2 30       	cpi	r28, 0x02	; 2
 340:	49 f4       	brne	.+18     	; 0x354 <setState+0x3a>
 342:	8a e5       	ldi	r24, 0x5A	; 90
 344:	0e 94 d6 00 	call	0x1ac	; 0x1ac <set_speed>
 348:	05 c0       	rjmp	.+10     	; 0x354 <setState+0x3a>
	}
	else
	{
		car_bacwards();
 34a:	0e 94 43 01 	call	0x286	; 0x286 <car_bacwards>
		set_speed(30);
 34e:	8e e1       	ldi	r24, 0x1E	; 30
 350:	0e 94 d6 00 	call	0x1ac	; 0x1ac <set_speed>
	}
}
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <is_button_pressed>:
uint8_t is_button_pressed(uint8_t button_bit_number)
{
	return button_pressed(&PORTA_Pin,button_bit_number);
 358:	68 2f       	mov	r22, r24
 35a:	89 e3       	ldi	r24, 0x39	; 57
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 68 00 	call	0xd0	; 0xd0 <button_pressed>
}
 362:	08 95       	ret

00000364 <main>:


int main(void)
{
	
	app_init();
 364:	0e 94 f5 00 	call	0x1ea	; 0x1ea <app_init>
	
	//Initial state of G button
	uint8_t prevG = 0 , nStates = 4;
	int8_t state = -1; //
 368:	df ef       	ldi	r29, 0xFF	; 255
{
	
	app_init();
	
	//Initial state of G button
	uint8_t prevG = 0 , nStates = 4;
 36a:	10 e0       	ldi	r17, 0x00	; 0
 36c:	01 c0       	rjmp	.+2      	; 0x370 <main+0xc>
 36e:	1c 2f       	mov	r17, r28
	int8_t state = -1; //
	while (True)
	{
		uint8_t currentG = is_button_pressed(buttonG) ;
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	0e 94 ac 01 	call	0x358	; 0x358 <is_button_pressed>
 376:	c8 2f       	mov	r28, r24
		
		if(prevG != currentG && currentG) // to Avoid long press
 378:	18 17       	cp	r17, r24
 37a:	11 f0       	breq	.+4      	; 0x380 <main+0x1c>
 37c:	81 11       	cpse	r24, r1
		{
			state++; // each press of button G changes the state
 37e:	df 5f       	subi	r29, 0xFF	; 255
		}
		
		if(is_button_pressed(buttonM) && state > -1)// state > -1 to avoid pressing M at the first time we must press G first
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 ac 01 	call	0x358	; 0x358 <is_button_pressed>
 386:	88 23       	and	r24, r24
 388:	89 f0       	breq	.+34     	; 0x3ac <main+0x48>
 38a:	dd 23       	and	r29, r29
 38c:	7c f0       	brlt	.+30     	; 0x3ac <main+0x48>
		{
			setState(state % nStates); // making the states circulating
 38e:	8d 2f       	mov	r24, r29
 390:	0d 2e       	mov	r0, r29
 392:	00 0c       	add	r0, r0
 394:	99 0b       	sbc	r25, r25
 396:	83 70       	andi	r24, 0x03	; 3
 398:	90 78       	andi	r25, 0x80	; 128
 39a:	99 23       	and	r25, r25
 39c:	24 f4       	brge	.+8      	; 0x3a6 <main+0x42>
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	8c 6f       	ori	r24, 0xFC	; 252
 3a2:	9f 6f       	ori	r25, 0xFF	; 255
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	0e 94 8d 01 	call	0x31a	; 0x31a <setState>
 3aa:	e1 cf       	rjmp	.-62     	; 0x36e <main+0xa>
		}
		else if(state > -1) // STOP State
 3ac:	dd 23       	and	r29, r29
 3ae:	fc f2       	brlt	.-66     	; 0x36e <main+0xa>
		{
			car_stop();
 3b0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <car_stop>
			if(is_button_pressed(buttonL))
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 ac 01 	call	0x358	; 0x358 <is_button_pressed>
 3ba:	88 23       	and	r24, r24
 3bc:	19 f0       	breq	.+6      	; 0x3c4 <main+0x60>
			{
				car_rotate_left();
 3be:	0e 94 65 01 	call	0x2ca	; 0x2ca <car_rotate_left>
 3c2:	d5 cf       	rjmp	.-86     	; 0x36e <main+0xa>
			}
			else if (is_button_pressed(buttonR))
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 ac 01 	call	0x358	; 0x358 <is_button_pressed>
 3ca:	88 23       	and	r24, r24
 3cc:	81 f2       	breq	.-96     	; 0x36e <main+0xa>
			{
				car_rotate_right();
 3ce:	0e 94 79 01 	call	0x2f2	; 0x2f2 <car_rotate_right>
 3d2:	cd cf       	rjmp	.-102    	; 0x36e <main+0xa>

000003d4 <ceil>:
 3d4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__fp_trunc>
 3d8:	90 f0       	brcs	.+36     	; 0x3fe <ceil+0x2a>
 3da:	9f 37       	cpi	r25, 0x7F	; 127
 3dc:	48 f4       	brcc	.+18     	; 0x3f0 <ceil+0x1c>
 3de:	91 11       	cpse	r25, r1
 3e0:	16 f4       	brtc	.+4      	; 0x3e6 <ceil+0x12>
 3e2:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_szero>
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	80 e8       	ldi	r24, 0x80	; 128
 3ec:	9f e3       	ldi	r25, 0x3F	; 63
 3ee:	08 95       	ret
 3f0:	26 f0       	brts	.+8      	; 0x3fa <ceil+0x26>
 3f2:	1b 16       	cp	r1, r27
 3f4:	61 1d       	adc	r22, r1
 3f6:	71 1d       	adc	r23, r1
 3f8:	81 1d       	adc	r24, r1
 3fa:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_mintl>
 3fe:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_mpack>

00000402 <__divsf3>:
 402:	0e 94 15 02 	call	0x42a	; 0x42a <__divsf3x>
 406:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_round>
 40a:	0e 94 18 03 	call	0x630	; 0x630 <__fp_pscB>
 40e:	58 f0       	brcs	.+22     	; 0x426 <__divsf3+0x24>
 410:	0e 94 11 03 	call	0x622	; 0x622 <__fp_pscA>
 414:	40 f0       	brcs	.+16     	; 0x426 <__divsf3+0x24>
 416:	29 f4       	brne	.+10     	; 0x422 <__divsf3+0x20>
 418:	5f 3f       	cpi	r21, 0xFF	; 255
 41a:	29 f0       	breq	.+10     	; 0x426 <__divsf3+0x24>
 41c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 420:	51 11       	cpse	r21, r1
 422:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_szero>
 426:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_nan>

0000042a <__divsf3x>:
 42a:	0e 94 30 03 	call	0x660	; 0x660 <__fp_split3>
 42e:	68 f3       	brcs	.-38     	; 0x40a <__divsf3+0x8>

00000430 <__divsf3_pse>:
 430:	99 23       	and	r25, r25
 432:	b1 f3       	breq	.-20     	; 0x420 <__divsf3+0x1e>
 434:	55 23       	and	r21, r21
 436:	91 f3       	breq	.-28     	; 0x41c <__divsf3+0x1a>
 438:	95 1b       	sub	r25, r21
 43a:	55 0b       	sbc	r21, r21
 43c:	bb 27       	eor	r27, r27
 43e:	aa 27       	eor	r26, r26
 440:	62 17       	cp	r22, r18
 442:	73 07       	cpc	r23, r19
 444:	84 07       	cpc	r24, r20
 446:	38 f0       	brcs	.+14     	; 0x456 <__divsf3_pse+0x26>
 448:	9f 5f       	subi	r25, 0xFF	; 255
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	44 1f       	adc	r20, r20
 452:	aa 1f       	adc	r26, r26
 454:	a9 f3       	breq	.-22     	; 0x440 <__divsf3_pse+0x10>
 456:	35 d0       	rcall	.+106    	; 0x4c2 <__divsf3_pse+0x92>
 458:	0e 2e       	mov	r0, r30
 45a:	3a f0       	brmi	.+14     	; 0x46a <__divsf3_pse+0x3a>
 45c:	e0 e8       	ldi	r30, 0x80	; 128
 45e:	32 d0       	rcall	.+100    	; 0x4c4 <__divsf3_pse+0x94>
 460:	91 50       	subi	r25, 0x01	; 1
 462:	50 40       	sbci	r21, 0x00	; 0
 464:	e6 95       	lsr	r30
 466:	00 1c       	adc	r0, r0
 468:	ca f7       	brpl	.-14     	; 0x45c <__divsf3_pse+0x2c>
 46a:	2b d0       	rcall	.+86     	; 0x4c2 <__divsf3_pse+0x92>
 46c:	fe 2f       	mov	r31, r30
 46e:	29 d0       	rcall	.+82     	; 0x4c2 <__divsf3_pse+0x92>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	88 1f       	adc	r24, r24
 476:	bb 1f       	adc	r27, r27
 478:	26 17       	cp	r18, r22
 47a:	37 07       	cpc	r19, r23
 47c:	48 07       	cpc	r20, r24
 47e:	ab 07       	cpc	r26, r27
 480:	b0 e8       	ldi	r27, 0x80	; 128
 482:	09 f0       	breq	.+2      	; 0x486 <__divsf3_pse+0x56>
 484:	bb 0b       	sbc	r27, r27
 486:	80 2d       	mov	r24, r0
 488:	bf 01       	movw	r22, r30
 48a:	ff 27       	eor	r31, r31
 48c:	93 58       	subi	r25, 0x83	; 131
 48e:	5f 4f       	sbci	r21, 0xFF	; 255
 490:	3a f0       	brmi	.+14     	; 0x4a0 <__divsf3_pse+0x70>
 492:	9e 3f       	cpi	r25, 0xFE	; 254
 494:	51 05       	cpc	r21, r1
 496:	78 f0       	brcs	.+30     	; 0x4b6 <__divsf3_pse+0x86>
 498:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 49c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_szero>
 4a0:	5f 3f       	cpi	r21, 0xFF	; 255
 4a2:	e4 f3       	brlt	.-8      	; 0x49c <__divsf3_pse+0x6c>
 4a4:	98 3e       	cpi	r25, 0xE8	; 232
 4a6:	d4 f3       	brlt	.-12     	; 0x49c <__divsf3_pse+0x6c>
 4a8:	86 95       	lsr	r24
 4aa:	77 95       	ror	r23
 4ac:	67 95       	ror	r22
 4ae:	b7 95       	ror	r27
 4b0:	f7 95       	ror	r31
 4b2:	9f 5f       	subi	r25, 0xFF	; 255
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__divsf3_pse+0x78>
 4b6:	88 0f       	add	r24, r24
 4b8:	91 1d       	adc	r25, r1
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	97 f9       	bld	r25, 7
 4c0:	08 95       	ret
 4c2:	e1 e0       	ldi	r30, 0x01	; 1
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	bb 1f       	adc	r27, r27
 4cc:	62 17       	cp	r22, r18
 4ce:	73 07       	cpc	r23, r19
 4d0:	84 07       	cpc	r24, r20
 4d2:	ba 07       	cpc	r27, r26
 4d4:	20 f0       	brcs	.+8      	; 0x4de <__divsf3_pse+0xae>
 4d6:	62 1b       	sub	r22, r18
 4d8:	73 0b       	sbc	r23, r19
 4da:	84 0b       	sbc	r24, r20
 4dc:	ba 0b       	sbc	r27, r26
 4de:	ee 1f       	adc	r30, r30
 4e0:	88 f7       	brcc	.-30     	; 0x4c4 <__divsf3_pse+0x94>
 4e2:	e0 95       	com	r30
 4e4:	08 95       	ret

000004e6 <__fixunssfsi>:
 4e6:	0e 94 38 03 	call	0x670	; 0x670 <__fp_splitA>
 4ea:	88 f0       	brcs	.+34     	; 0x50e <__fixunssfsi+0x28>
 4ec:	9f 57       	subi	r25, 0x7F	; 127
 4ee:	98 f0       	brcs	.+38     	; 0x516 <__fixunssfsi+0x30>
 4f0:	b9 2f       	mov	r27, r25
 4f2:	99 27       	eor	r25, r25
 4f4:	b7 51       	subi	r27, 0x17	; 23
 4f6:	b0 f0       	brcs	.+44     	; 0x524 <__fixunssfsi+0x3e>
 4f8:	e1 f0       	breq	.+56     	; 0x532 <__fixunssfsi+0x4c>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	1a f0       	brmi	.+6      	; 0x50a <__fixunssfsi+0x24>
 504:	ba 95       	dec	r27
 506:	c9 f7       	brne	.-14     	; 0x4fa <__fixunssfsi+0x14>
 508:	14 c0       	rjmp	.+40     	; 0x532 <__fixunssfsi+0x4c>
 50a:	b1 30       	cpi	r27, 0x01	; 1
 50c:	91 f0       	breq	.+36     	; 0x532 <__fixunssfsi+0x4c>
 50e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__fp_zero>
 512:	b1 e0       	ldi	r27, 0x01	; 1
 514:	08 95       	ret
 516:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_zero>
 51a:	67 2f       	mov	r22, r23
 51c:	78 2f       	mov	r23, r24
 51e:	88 27       	eor	r24, r24
 520:	b8 5f       	subi	r27, 0xF8	; 248
 522:	39 f0       	breq	.+14     	; 0x532 <__fixunssfsi+0x4c>
 524:	b9 3f       	cpi	r27, 0xF9	; 249
 526:	cc f3       	brlt	.-14     	; 0x51a <__fixunssfsi+0x34>
 528:	86 95       	lsr	r24
 52a:	77 95       	ror	r23
 52c:	67 95       	ror	r22
 52e:	b3 95       	inc	r27
 530:	d9 f7       	brne	.-10     	; 0x528 <__fixunssfsi+0x42>
 532:	3e f4       	brtc	.+14     	; 0x542 <__fixunssfsi+0x5c>
 534:	90 95       	com	r25
 536:	80 95       	com	r24
 538:	70 95       	com	r23
 53a:	61 95       	neg	r22
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	08 95       	ret

00000544 <__floatunsisf>:
 544:	e8 94       	clt
 546:	09 c0       	rjmp	.+18     	; 0x55a <__floatsisf+0x12>

00000548 <__floatsisf>:
 548:	97 fb       	bst	r25, 7
 54a:	3e f4       	brtc	.+14     	; 0x55a <__floatsisf+0x12>
 54c:	90 95       	com	r25
 54e:	80 95       	com	r24
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	99 23       	and	r25, r25
 55c:	a9 f0       	breq	.+42     	; 0x588 <__floatsisf+0x40>
 55e:	f9 2f       	mov	r31, r25
 560:	96 e9       	ldi	r25, 0x96	; 150
 562:	bb 27       	eor	r27, r27
 564:	93 95       	inc	r25
 566:	f6 95       	lsr	r31
 568:	87 95       	ror	r24
 56a:	77 95       	ror	r23
 56c:	67 95       	ror	r22
 56e:	b7 95       	ror	r27
 570:	f1 11       	cpse	r31, r1
 572:	f8 cf       	rjmp	.-16     	; 0x564 <__floatsisf+0x1c>
 574:	fa f4       	brpl	.+62     	; 0x5b4 <__floatsisf+0x6c>
 576:	bb 0f       	add	r27, r27
 578:	11 f4       	brne	.+4      	; 0x57e <__floatsisf+0x36>
 57a:	60 ff       	sbrs	r22, 0
 57c:	1b c0       	rjmp	.+54     	; 0x5b4 <__floatsisf+0x6c>
 57e:	6f 5f       	subi	r22, 0xFF	; 255
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	16 c0       	rjmp	.+44     	; 0x5b4 <__floatsisf+0x6c>
 588:	88 23       	and	r24, r24
 58a:	11 f0       	breq	.+4      	; 0x590 <__floatsisf+0x48>
 58c:	96 e9       	ldi	r25, 0x96	; 150
 58e:	11 c0       	rjmp	.+34     	; 0x5b2 <__floatsisf+0x6a>
 590:	77 23       	and	r23, r23
 592:	21 f0       	breq	.+8      	; 0x59c <__floatsisf+0x54>
 594:	9e e8       	ldi	r25, 0x8E	; 142
 596:	87 2f       	mov	r24, r23
 598:	76 2f       	mov	r23, r22
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <__floatsisf+0x5e>
 59c:	66 23       	and	r22, r22
 59e:	71 f0       	breq	.+28     	; 0x5bc <__floatsisf+0x74>
 5a0:	96 e8       	ldi	r25, 0x86	; 134
 5a2:	86 2f       	mov	r24, r22
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	2a f0       	brmi	.+10     	; 0x5b4 <__floatsisf+0x6c>
 5aa:	9a 95       	dec	r25
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	da f7       	brpl	.-10     	; 0x5aa <__floatsisf+0x62>
 5b4:	88 0f       	add	r24, r24
 5b6:	96 95       	lsr	r25
 5b8:	87 95       	ror	r24
 5ba:	97 f9       	bld	r25, 7
 5bc:	08 95       	ret

000005be <__fp_inf>:
 5be:	97 f9       	bld	r25, 7
 5c0:	9f 67       	ori	r25, 0x7F	; 127
 5c2:	80 e8       	ldi	r24, 0x80	; 128
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	08 95       	ret

000005ca <__fp_mintl>:
 5ca:	88 23       	and	r24, r24
 5cc:	71 f4       	brne	.+28     	; 0x5ea <__fp_mintl+0x20>
 5ce:	77 23       	and	r23, r23
 5d0:	21 f0       	breq	.+8      	; 0x5da <__fp_mintl+0x10>
 5d2:	98 50       	subi	r25, 0x08	; 8
 5d4:	87 2b       	or	r24, r23
 5d6:	76 2f       	mov	r23, r22
 5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <__fp_mintl+0x1e>
 5da:	66 23       	and	r22, r22
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <__fp_mintl+0x18>
 5de:	99 27       	eor	r25, r25
 5e0:	0d c0       	rjmp	.+26     	; 0x5fc <__fp_mintl+0x32>
 5e2:	90 51       	subi	r25, 0x10	; 16
 5e4:	86 2b       	or	r24, r22
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	2a f0       	brmi	.+10     	; 0x5f6 <__fp_mintl+0x2c>
 5ec:	9a 95       	dec	r25
 5ee:	66 0f       	add	r22, r22
 5f0:	77 1f       	adc	r23, r23
 5f2:	88 1f       	adc	r24, r24
 5f4:	da f7       	brpl	.-10     	; 0x5ec <__fp_mintl+0x22>
 5f6:	88 0f       	add	r24, r24
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	97 f9       	bld	r25, 7
 5fe:	08 95       	ret

00000600 <__fp_mpack>:
 600:	9f 3f       	cpi	r25, 0xFF	; 255
 602:	31 f0       	breq	.+12     	; 0x610 <__fp_mpack_finite+0xc>

00000604 <__fp_mpack_finite>:
 604:	91 50       	subi	r25, 0x01	; 1
 606:	20 f4       	brcc	.+8      	; 0x610 <__fp_mpack_finite+0xc>
 608:	87 95       	ror	r24
 60a:	77 95       	ror	r23
 60c:	67 95       	ror	r22
 60e:	b7 95       	ror	r27
 610:	88 0f       	add	r24, r24
 612:	91 1d       	adc	r25, r1
 614:	96 95       	lsr	r25
 616:	87 95       	ror	r24
 618:	97 f9       	bld	r25, 7
 61a:	08 95       	ret

0000061c <__fp_nan>:
 61c:	9f ef       	ldi	r25, 0xFF	; 255
 61e:	80 ec       	ldi	r24, 0xC0	; 192
 620:	08 95       	ret

00000622 <__fp_pscA>:
 622:	00 24       	eor	r0, r0
 624:	0a 94       	dec	r0
 626:	16 16       	cp	r1, r22
 628:	17 06       	cpc	r1, r23
 62a:	18 06       	cpc	r1, r24
 62c:	09 06       	cpc	r0, r25
 62e:	08 95       	ret

00000630 <__fp_pscB>:
 630:	00 24       	eor	r0, r0
 632:	0a 94       	dec	r0
 634:	12 16       	cp	r1, r18
 636:	13 06       	cpc	r1, r19
 638:	14 06       	cpc	r1, r20
 63a:	05 06       	cpc	r0, r21
 63c:	08 95       	ret

0000063e <__fp_round>:
 63e:	09 2e       	mov	r0, r25
 640:	03 94       	inc	r0
 642:	00 0c       	add	r0, r0
 644:	11 f4       	brne	.+4      	; 0x64a <__fp_round+0xc>
 646:	88 23       	and	r24, r24
 648:	52 f0       	brmi	.+20     	; 0x65e <__fp_round+0x20>
 64a:	bb 0f       	add	r27, r27
 64c:	40 f4       	brcc	.+16     	; 0x65e <__fp_round+0x20>
 64e:	bf 2b       	or	r27, r31
 650:	11 f4       	brne	.+4      	; 0x656 <__fp_round+0x18>
 652:	60 ff       	sbrs	r22, 0
 654:	04 c0       	rjmp	.+8      	; 0x65e <__fp_round+0x20>
 656:	6f 5f       	subi	r22, 0xFF	; 255
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	08 95       	ret

00000660 <__fp_split3>:
 660:	57 fd       	sbrc	r21, 7
 662:	90 58       	subi	r25, 0x80	; 128
 664:	44 0f       	add	r20, r20
 666:	55 1f       	adc	r21, r21
 668:	59 f0       	breq	.+22     	; 0x680 <__fp_splitA+0x10>
 66a:	5f 3f       	cpi	r21, 0xFF	; 255
 66c:	71 f0       	breq	.+28     	; 0x68a <__fp_splitA+0x1a>
 66e:	47 95       	ror	r20

00000670 <__fp_splitA>:
 670:	88 0f       	add	r24, r24
 672:	97 fb       	bst	r25, 7
 674:	99 1f       	adc	r25, r25
 676:	61 f0       	breq	.+24     	; 0x690 <__fp_splitA+0x20>
 678:	9f 3f       	cpi	r25, 0xFF	; 255
 67a:	79 f0       	breq	.+30     	; 0x69a <__fp_splitA+0x2a>
 67c:	87 95       	ror	r24
 67e:	08 95       	ret
 680:	12 16       	cp	r1, r18
 682:	13 06       	cpc	r1, r19
 684:	14 06       	cpc	r1, r20
 686:	55 1f       	adc	r21, r21
 688:	f2 cf       	rjmp	.-28     	; 0x66e <__fp_split3+0xe>
 68a:	46 95       	lsr	r20
 68c:	f1 df       	rcall	.-30     	; 0x670 <__fp_splitA>
 68e:	08 c0       	rjmp	.+16     	; 0x6a0 <__fp_splitA+0x30>
 690:	16 16       	cp	r1, r22
 692:	17 06       	cpc	r1, r23
 694:	18 06       	cpc	r1, r24
 696:	99 1f       	adc	r25, r25
 698:	f1 cf       	rjmp	.-30     	; 0x67c <__fp_splitA+0xc>
 69a:	86 95       	lsr	r24
 69c:	71 05       	cpc	r23, r1
 69e:	61 05       	cpc	r22, r1
 6a0:	08 94       	sec
 6a2:	08 95       	ret

000006a4 <__fp_trunc>:
 6a4:	0e 94 38 03 	call	0x670	; 0x670 <__fp_splitA>
 6a8:	a0 f0       	brcs	.+40     	; 0x6d2 <__fp_trunc+0x2e>
 6aa:	be e7       	ldi	r27, 0x7E	; 126
 6ac:	b9 17       	cp	r27, r25
 6ae:	88 f4       	brcc	.+34     	; 0x6d2 <__fp_trunc+0x2e>
 6b0:	bb 27       	eor	r27, r27
 6b2:	9f 38       	cpi	r25, 0x8F	; 143
 6b4:	60 f4       	brcc	.+24     	; 0x6ce <__fp_trunc+0x2a>
 6b6:	16 16       	cp	r1, r22
 6b8:	b1 1d       	adc	r27, r1
 6ba:	67 2f       	mov	r22, r23
 6bc:	78 2f       	mov	r23, r24
 6be:	88 27       	eor	r24, r24
 6c0:	98 5f       	subi	r25, 0xF8	; 248
 6c2:	f7 cf       	rjmp	.-18     	; 0x6b2 <__fp_trunc+0xe>
 6c4:	86 95       	lsr	r24
 6c6:	77 95       	ror	r23
 6c8:	67 95       	ror	r22
 6ca:	b1 1d       	adc	r27, r1
 6cc:	93 95       	inc	r25
 6ce:	96 39       	cpi	r25, 0x96	; 150
 6d0:	c8 f3       	brcs	.-14     	; 0x6c4 <__fp_trunc+0x20>
 6d2:	08 95       	ret

000006d4 <__fp_zero>:
 6d4:	e8 94       	clt

000006d6 <__fp_szero>:
 6d6:	bb 27       	eor	r27, r27
 6d8:	66 27       	eor	r22, r22
 6da:	77 27       	eor	r23, r23
 6dc:	cb 01       	movw	r24, r22
 6de:	97 f9       	bld	r25, 7
 6e0:	08 95       	ret

000006e2 <__mulsf3>:
 6e2:	0e 94 84 03 	call	0x708	; 0x708 <__mulsf3x>
 6e6:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_round>
 6ea:	0e 94 11 03 	call	0x622	; 0x622 <__fp_pscA>
 6ee:	38 f0       	brcs	.+14     	; 0x6fe <__mulsf3+0x1c>
 6f0:	0e 94 18 03 	call	0x630	; 0x630 <__fp_pscB>
 6f4:	20 f0       	brcs	.+8      	; 0x6fe <__mulsf3+0x1c>
 6f6:	95 23       	and	r25, r21
 6f8:	11 f0       	breq	.+4      	; 0x6fe <__mulsf3+0x1c>
 6fa:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 6fe:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_nan>
 702:	11 24       	eor	r1, r1
 704:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_szero>

00000708 <__mulsf3x>:
 708:	0e 94 30 03 	call	0x660	; 0x660 <__fp_split3>
 70c:	70 f3       	brcs	.-36     	; 0x6ea <__mulsf3+0x8>

0000070e <__mulsf3_pse>:
 70e:	95 9f       	mul	r25, r21
 710:	c1 f3       	breq	.-16     	; 0x702 <__mulsf3+0x20>
 712:	95 0f       	add	r25, r21
 714:	50 e0       	ldi	r21, 0x00	; 0
 716:	55 1f       	adc	r21, r21
 718:	62 9f       	mul	r22, r18
 71a:	f0 01       	movw	r30, r0
 71c:	72 9f       	mul	r23, r18
 71e:	bb 27       	eor	r27, r27
 720:	f0 0d       	add	r31, r0
 722:	b1 1d       	adc	r27, r1
 724:	63 9f       	mul	r22, r19
 726:	aa 27       	eor	r26, r26
 728:	f0 0d       	add	r31, r0
 72a:	b1 1d       	adc	r27, r1
 72c:	aa 1f       	adc	r26, r26
 72e:	64 9f       	mul	r22, r20
 730:	66 27       	eor	r22, r22
 732:	b0 0d       	add	r27, r0
 734:	a1 1d       	adc	r26, r1
 736:	66 1f       	adc	r22, r22
 738:	82 9f       	mul	r24, r18
 73a:	22 27       	eor	r18, r18
 73c:	b0 0d       	add	r27, r0
 73e:	a1 1d       	adc	r26, r1
 740:	62 1f       	adc	r22, r18
 742:	73 9f       	mul	r23, r19
 744:	b0 0d       	add	r27, r0
 746:	a1 1d       	adc	r26, r1
 748:	62 1f       	adc	r22, r18
 74a:	83 9f       	mul	r24, r19
 74c:	a0 0d       	add	r26, r0
 74e:	61 1d       	adc	r22, r1
 750:	22 1f       	adc	r18, r18
 752:	74 9f       	mul	r23, r20
 754:	33 27       	eor	r19, r19
 756:	a0 0d       	add	r26, r0
 758:	61 1d       	adc	r22, r1
 75a:	23 1f       	adc	r18, r19
 75c:	84 9f       	mul	r24, r20
 75e:	60 0d       	add	r22, r0
 760:	21 1d       	adc	r18, r1
 762:	82 2f       	mov	r24, r18
 764:	76 2f       	mov	r23, r22
 766:	6a 2f       	mov	r22, r26
 768:	11 24       	eor	r1, r1
 76a:	9f 57       	subi	r25, 0x7F	; 127
 76c:	50 40       	sbci	r21, 0x00	; 0
 76e:	9a f0       	brmi	.+38     	; 0x796 <__mulsf3_pse+0x88>
 770:	f1 f0       	breq	.+60     	; 0x7ae <__mulsf3_pse+0xa0>
 772:	88 23       	and	r24, r24
 774:	4a f0       	brmi	.+18     	; 0x788 <__mulsf3_pse+0x7a>
 776:	ee 0f       	add	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	bb 1f       	adc	r27, r27
 77c:	66 1f       	adc	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	91 50       	subi	r25, 0x01	; 1
 784:	50 40       	sbci	r21, 0x00	; 0
 786:	a9 f7       	brne	.-22     	; 0x772 <__mulsf3_pse+0x64>
 788:	9e 3f       	cpi	r25, 0xFE	; 254
 78a:	51 05       	cpc	r21, r1
 78c:	80 f0       	brcs	.+32     	; 0x7ae <__mulsf3_pse+0xa0>
 78e:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 792:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_szero>
 796:	5f 3f       	cpi	r21, 0xFF	; 255
 798:	e4 f3       	brlt	.-8      	; 0x792 <__mulsf3_pse+0x84>
 79a:	98 3e       	cpi	r25, 0xE8	; 232
 79c:	d4 f3       	brlt	.-12     	; 0x792 <__mulsf3_pse+0x84>
 79e:	86 95       	lsr	r24
 7a0:	77 95       	ror	r23
 7a2:	67 95       	ror	r22
 7a4:	b7 95       	ror	r27
 7a6:	f7 95       	ror	r31
 7a8:	e7 95       	ror	r30
 7aa:	9f 5f       	subi	r25, 0xFF	; 255
 7ac:	c1 f7       	brne	.-16     	; 0x79e <__mulsf3_pse+0x90>
 7ae:	fe 2b       	or	r31, r30
 7b0:	88 0f       	add	r24, r24
 7b2:	91 1d       	adc	r25, r1
 7b4:	96 95       	lsr	r25
 7b6:	87 95       	ror	r24
 7b8:	97 f9       	bld	r25, 7
 7ba:	08 95       	ret

000007bc <_exit>:
 7bc:	f8 94       	cli

000007be <__stop_program>:
 7be:	ff cf       	rjmp	.-2      	; 0x7be <__stop_program>
