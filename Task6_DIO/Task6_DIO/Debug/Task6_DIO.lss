
Task6_DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079f  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064e  00000000  00000000  000009e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035d  00000000  00000000  00001031  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000331  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  000017b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <button_init>:
#include "../DIO_Driver/DIO.h"


void button_init(void)
{
	DIO_init_PortC();
  6c:	0e 94 42 00 	call	0x84	; 0x84 <DIO_init_PortC>
  70:	08 95       	ret

00000072 <button_pressed>:
}
int button_pressed(void)
{
	return (DIO_read_portC() == 0x01);
  72:	0e 94 47 00 	call	0x8e	; 0x8e <DIO_read_portC>
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	09 f0       	breq	.+2      	; 0x7e <button_pressed+0xc>
  7c:	20 e0       	ldi	r18, 0x00	; 0
}
  7e:	82 2f       	mov	r24, r18
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	08 95       	ret

00000084 <DIO_init_PortC>:
 */ 
#include "registers.h"
//#include <avr/io.h>
void DIO_init_PortC()
{
	PORTC_DIR = 0x00; // input for the button 
  84:	14 ba       	out	0x14, r1	; 20
  86:	08 95       	ret

00000088 <DIO_init_PortA>:
}
void DIO_init_PortA()
{
	PORTA_DIR = 0x01; // output for the led
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	8a bb       	out	0x1a, r24	; 26
  8c:	08 95       	ret

0000008e <DIO_read_portC>:
}
int DIO_read_portC()
{
	return PINC_Data; // return the input data from the button
  8e:	83 b3       	in	r24, 0x13	; 19
}
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	08 95       	ret

00000094 <DIO_write_PortA>:
void DIO_write_PortA(int value)
{
	PORTA_Data = value;
  94:	8b bb       	out	0x1b, r24	; 27
  96:	08 95       	ret

00000098 <led_init>:
 */ 
#include "../DIO_Driver/DIO.h"

void led_init(void)
{
	DIO_init_PortA();
  98:	0e 94 44 00 	call	0x88	; 0x88 <DIO_init_PortA>
  9c:	08 95       	ret

0000009e <led_ON>:
}

void led_ON(void)
{
	DIO_write_PortA(0x01);	
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_write_PortA>
  a6:	08 95       	ret

000000a8 <led_OFF>:
}

void led_OFF(void)
{
	DIO_write_PortA(0x00);
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_write_PortA>
  b0:	08 95       	ret

000000b2 <main>:
#include "LED_Driver/led.h"


int main(void)
{
	led_init();
  b2:	0e 94 4c 00 	call	0x98	; 0x98 <led_init>
	button_init();
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <button_init>
	while (true)
	{
		if(button_pressed())
  ba:	0e 94 39 00 	call	0x72	; 0x72 <button_pressed>
  be:	88 23       	and	r24, r24
  c0:	19 f0       	breq	.+6      	; 0xc8 <main+0x16>
		{
			led_ON();
  c2:	0e 94 4f 00 	call	0x9e	; 0x9e <led_ON>
  c6:	f9 cf       	rjmp	.-14     	; 0xba <main+0x8>
		}
		else
		{
			led_OFF();
  c8:	0e 94 54 00 	call	0xa8	; 0xa8 <led_OFF>
  cc:	f6 cf       	rjmp	.-20     	; 0xba <main+0x8>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
