
CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000583  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000050f  00000000  00000000  0000070f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f7  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b5  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001101  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
	
}
int main(void)
{
	DDRC |= (1<<PORTC0) | (1<<PORTC1)| (1<<PORTC2) | (1<<PORTC3);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	8f 60       	ori	r24, 0x0F	; 15
  70:	84 bb       	out	0x14, r24	; 20
	// Right Motor
	PORTC |= (1<<PORTC0);	//in1 //high
  72:	85 b3       	in	r24, 0x15	; 21
  74:	81 60       	ori	r24, 0x01	; 1
  76:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<PORTC1);	// in2 //low  Then Forward CLock Wise
  78:	85 b3       	in	r24, 0x15	; 21
  7a:	8d 7f       	andi	r24, 0xFD	; 253
  7c:	85 bb       	out	0x15, r24	; 21
	// Left Motor
	PORTC |= (1<<PORTC3);	// in3 // high 
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	88 60       	ori	r24, 0x08	; 8
  82:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<PORTC4);	// in4 // low Then Forward CLock Wise
  84:	85 b3       	in	r24, 0x15	; 21
  86:	8f 7e       	andi	r24, 0xEF	; 239
  88:	85 bb       	out	0x15, r24	; 21
	
	
	// Controlling the speed of the motors using Fast PWM , Timer0, 1/128 preScaler
	DDRB |= set(PORTB3);
  8a:	87 b3       	in	r24, 0x17	; 23
  8c:	88 60       	ori	r24, 0x08	; 8
  8e:	87 bb       	out	0x17, r24	; 23
	TCCR0 |= set(WGM01) | set(WGM00) | set(COM01) | set(CS00) | set(CS02);
  90:	83 b7       	in	r24, 0x33	; 51
  92:	8d 66       	ori	r24, 0x6D	; 109
  94:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~set(COM00) | ~set(CS01);
  96:	83 b7       	in	r24, 0x33	; 51
  98:	83 bf       	out	0x33, r24	; 51
	OCR0 = 200; // 10/256 * 100 % of full speed
  9a:	88 ec       	ldi	r24, 0xC8	; 200
  9c:	8c bf       	out	0x3c, r24	; 60
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0x32>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
