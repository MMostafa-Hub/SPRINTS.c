
CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f51  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063a  00000000  00000000  000018ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062b  00000000  00000000  00001ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00002514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046d  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000638  00000000  00000000  00002b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000316d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  64:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_init>:
	
	TCNT0 = extra_TCNT0_initial_value; // setting the initial value of TCVTO to be 256 - 37 = 219
	while((TIFR & (1<<TOV0)) == 0);
	TIFR = 0x01;  		// Clear TOV0 flag
	TCNT0 = 0x00; // disable timer0
}
  6c:	41 11       	cpse	r20, r1
  6e:	18 c0       	rjmp	.+48     	; 0xa0 <DIO_init+0x34>
  70:	30 b7       	in	r19, 0x30	; 48
  72:	3b 7f       	andi	r19, 0xFB	; 251
  74:	30 bf       	out	0x30, r19	; 48
  76:	db 01       	movw	r26, r22
  78:	ec 91       	ld	r30, X
  7a:	41 e0       	ldi	r20, 0x01	; 1
  7c:	50 e0       	ldi	r21, 0x00	; 0
  7e:	da 01       	movw	r26, r20
  80:	02 c0       	rjmp	.+4      	; 0x86 <DIO_init+0x1a>
  82:	aa 0f       	add	r26, r26
  84:	bb 1f       	adc	r27, r27
  86:	2a 95       	dec	r18
  88:	e2 f7       	brpl	.-8      	; 0x82 <DIO_init+0x16>
  8a:	9d 01       	movw	r18, r26
  8c:	3a 2f       	mov	r19, r26
  8e:	30 95       	com	r19
  90:	3e 23       	and	r19, r30
  92:	fb 01       	movw	r30, r22
  94:	30 83       	st	Z, r19
  96:	dc 01       	movw	r26, r24
  98:	3c 91       	ld	r19, X
  9a:	23 2b       	or	r18, r19
  9c:	2c 93       	st	X, r18
  9e:	08 95       	ret
  a0:	fb 01       	movw	r30, r22
  a2:	30 81       	ld	r19, Z
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_init+0x42>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	2a 95       	dec	r18
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_init+0x3e>
  b2:	83 2b       	or	r24, r19
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <DIO_read>:
  b8:	fc 01       	movw	r30, r24
  ba:	20 81       	ld	r18, Z
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_read+0xe>
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_read+0xa>
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	24 23       	and	r18, r20
  ce:	35 23       	and	r19, r21
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	42 17       	cp	r20, r18
  d4:	53 07       	cpc	r21, r19
  d6:	09 f0       	breq	.+2      	; 0xda <DIO_read+0x22>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 95       	ret

000000dc <button_init>:
  dc:	24 2f       	mov	r18, r20
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
  e4:	08 95       	ret

000000e6 <button_pressed>:
  e6:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_read>
  ea:	08 95       	ret

000000ec <Fast_PWM>:
  ec:	97 b3       	in	r25, 0x17	; 23
  ee:	98 60       	ori	r25, 0x08	; 8
  f0:	97 bb       	out	0x17, r25	; 23
  f2:	93 b7       	in	r25, 0x33	; 51
  f4:	9d 66       	ori	r25, 0x6D	; 109
  f6:	93 bf       	out	0x33, r25	; 51
  f8:	93 b7       	in	r25, 0x33	; 51
  fa:	93 bf       	out	0x33, r25	; 51
  fc:	8c bf       	out	0x3c, r24	; 60
  fe:	08 95       	ret

00000100 <motor_init>:
#include "../DIO_Driver/dio.h"
#include "../Timer_Driver/timer.h"
#include <math.h>

void motor_init(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,vuint8_t* IN1_DDR, vuint8_t* IN2_DDR,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
 100:	cf 92       	push	r12
 102:	df 92       	push	r13
 104:	ef 92       	push	r14
 106:	0f 93       	push	r16
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	eb 01       	movw	r28, r22
 10e:	ba 01       	movw	r22, r20
 110:	69 01       	movw	r12, r18
 112:	20 2f       	mov	r18, r16
	DIO_init(PORT_IN1,IN1_DDR,OUTPUT,IN1_bitNumber);
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
	DIO_init(PORT_IN2,IN2_DDR,OUTPUT,IN2_bitNumber);
 11a:	2e 2d       	mov	r18, r14
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	b6 01       	movw	r22, r12
 120:	ce 01       	movw	r24, r28
 122:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	0f 91       	pop	r16
 12c:	ef 90       	pop	r14
 12e:	df 90       	pop	r13
 130:	cf 90       	pop	r12
 132:	08 95       	ret

00000134 <move_forward>:

void move_forward(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
	*PORT_IN1 |= (1<<IN1_bitNumber);	//in1 //high
 134:	dc 01       	movw	r26, r24
 136:	3c 91       	ld	r19, X
 138:	e1 e0       	ldi	r30, 0x01	; 1
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	df 01       	movw	r26, r30
 13e:	02 c0       	rjmp	.+4      	; 0x144 <move_forward+0x10>
 140:	aa 0f       	add	r26, r26
 142:	bb 1f       	adc	r27, r27
 144:	4a 95       	dec	r20
 146:	e2 f7       	brpl	.-8      	; 0x140 <move_forward+0xc>
 148:	ad 01       	movw	r20, r26
 14a:	43 2b       	or	r20, r19
 14c:	dc 01       	movw	r26, r24
 14e:	4c 93       	st	X, r20
	*PORT_IN2 &= ~(1<<IN2_bitNumber);	// in2 //low  Then Forward CLock Wise
 150:	db 01       	movw	r26, r22
 152:	8c 91       	ld	r24, X
 154:	02 c0       	rjmp	.+4      	; 0x15a <move_forward+0x26>
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	2a 95       	dec	r18
 15c:	e2 f7       	brpl	.-8      	; 0x156 <move_forward+0x22>
 15e:	e0 95       	com	r30
 160:	e8 23       	and	r30, r24
 162:	ec 93       	st	X, r30
 164:	08 95       	ret

00000166 <stop>:
}

void stop(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
 166:	dc 01       	movw	r26, r24
	*PORT_IN1 &= ~(1<<IN1_bitNumber);	//in1 //high
 168:	3c 91       	ld	r19, X
 16a:	e1 e0       	ldi	r30, 0x01	; 1
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	cf 01       	movw	r24, r30
 170:	02 c0       	rjmp	.+4      	; 0x176 <stop+0x10>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	4a 95       	dec	r20
 178:	e2 f7       	brpl	.-8      	; 0x172 <stop+0xc>
 17a:	98 2f       	mov	r25, r24
 17c:	90 95       	com	r25
 17e:	93 23       	and	r25, r19
 180:	9c 93       	st	X, r25
	*PORT_IN2 &= ~(1<<IN2_bitNumber);
 182:	db 01       	movw	r26, r22
 184:	8c 91       	ld	r24, X
 186:	02 c0       	rjmp	.+4      	; 0x18c <stop+0x26>
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	2a 95       	dec	r18
 18e:	e2 f7       	brpl	.-8      	; 0x188 <stop+0x22>
 190:	e0 95       	com	r30
 192:	e8 23       	and	r30, r24
 194:	ec 93       	st	X, r30
 196:	08 95       	ret

00000198 <move_backwards>:
}

void move_backwards(vuint8_t* PORT_IN1,vuint8_t* PORT_IN2,uint8_t IN1_bitNumber , uint8_t IN2_bitNumber)
{
 198:	dc 01       	movw	r26, r24
	*PORT_IN1 &= ~(1<<IN1_bitNumber);	//in1 //high
 19a:	3c 91       	ld	r19, X
 19c:	e1 e0       	ldi	r30, 0x01	; 1
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	cf 01       	movw	r24, r30
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <move_backwards+0x10>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	4a 95       	dec	r20
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <move_backwards+0xc>
 1ac:	98 2f       	mov	r25, r24
 1ae:	90 95       	com	r25
 1b0:	93 23       	and	r25, r19
 1b2:	9c 93       	st	X, r25
	*PORT_IN2 |= (1<<IN2_bitNumber);	// in2 //low  Then Forward CLock Wise
 1b4:	db 01       	movw	r26, r22
 1b6:	8c 91       	ld	r24, X
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <move_backwards+0x26>
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	2a 95       	dec	r18
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <move_backwards+0x22>
 1c2:	e8 2b       	or	r30, r24
 1c4:	ec 93       	st	X, r30
 1c6:	08 95       	ret

000001c8 <set_speed>:
}

void set_speed(uint8_t percentage)
{
 1c8:	cf 93       	push	r28
 1ca:	c8 2f       	mov	r28, r24
	uint8_t speed = ceil(((double)((double)percentage/(double)100))*(double)255);
 1cc:	68 2f       	mov	r22, r24
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 b0 02 	call	0x560	; 0x560 <__floatunsisf>
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	48 ec       	ldi	r20, 0xC8	; 200
 1de:	52 e4       	ldi	r21, 0x42	; 66
 1e0:	0e 94 0f 02 	call	0x41e	; 0x41e <__divsf3>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	4f e7       	ldi	r20, 0x7F	; 127
 1ea:	53 e4       	ldi	r21, 0x43	; 67
 1ec:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__mulsf3>
 1f0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <ceil>
 1f4:	0e 94 81 02 	call	0x502	; 0x502 <__fixunssfsi>
	if(percentage <= 100)
 1f8:	c5 36       	cpi	r28, 0x65	; 101
 1fa:	18 f4       	brcc	.+6      	; 0x202 <set_speed+0x3a>
		Fast_PWM(speed);
 1fc:	86 2f       	mov	r24, r22
 1fe:	0e 94 76 00 	call	0xec	; 0xec <Fast_PWM>
}
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <app_init>:
#include "Button_Driver/button.h"
#include "Motor_Driver/motor.h"
#include "macros.h"

void app_init()
{
 206:	ef 92       	push	r14
 208:	0f 93       	push	r16
	button_init(&PORTA,&DDRA,buttonG);
 20a:	43 e0       	ldi	r20, 0x03	; 3
 20c:	6a e3       	ldi	r22, 0x3A	; 58
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	8b e3       	ldi	r24, 0x3B	; 59
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 6e 00 	call	0xdc	; 0xdc <button_init>
	button_init(&PORTA,&DDRA,buttonL);
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	6a e3       	ldi	r22, 0x3A	; 58
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	8b e3       	ldi	r24, 0x3B	; 59
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 6e 00 	call	0xdc	; 0xdc <button_init>
	button_init(&PORTA,&DDRA,buttonM);
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	6a e3       	ldi	r22, 0x3A	; 58
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	8b e3       	ldi	r24, 0x3B	; 59
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 6e 00 	call	0xdc	; 0xdc <button_init>
	button_init(&PORTA,&DDRA,buttonR);
 234:	42 e0       	ldi	r20, 0x02	; 2
 236:	6a e3       	ldi	r22, 0x3A	; 58
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	8b e3       	ldi	r24, 0x3B	; 59
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 6e 00 	call	0xdc	; 0xdc <button_init>
	
	//led_init(&PORTB,&DDRB,led0); // used for debugging
	
	// Inintial State
	motor_init(&PORTC,&PORTC,&DDRC,&DDRC,motor1_IN1,motor1_IN2);
 242:	ee 24       	eor	r14, r14
 244:	e3 94       	inc	r14
 246:	00 e0       	ldi	r16, 0x00	; 0
 248:	24 e3       	ldi	r18, 0x34	; 52
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	44 e3       	ldi	r20, 0x34	; 52
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	65 e3       	ldi	r22, 0x35	; 53
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	85 e3       	ldi	r24, 0x35	; 53
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 80 00 	call	0x100	; 0x100 <motor_init>
	motor_init(&PORTC,&PORTC,&DDRC,&DDRC,motor2_IN1,motor2_IN2);
 25c:	0f 2e       	mov	r0, r31
 25e:	f3 e0       	ldi	r31, 0x03	; 3
 260:	ef 2e       	mov	r14, r31
 262:	f0 2d       	mov	r31, r0
 264:	02 e0       	ldi	r16, 0x02	; 2
 266:	24 e3       	ldi	r18, 0x34	; 52
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	44 e3       	ldi	r20, 0x34	; 52
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	65 e3       	ldi	r22, 0x35	; 53
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	85 e3       	ldi	r24, 0x35	; 53
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 80 00 	call	0x100	; 0x100 <motor_init>
	
	
}
 27a:	0f 91       	pop	r16
 27c:	ef 90       	pop	r14
 27e:	08 95       	ret

00000280 <car_forward>:

void car_forward(void)
{
	move_forward(&PORTC,&PORTC,motor1_IN1,motor1_IN2);
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	65 e3       	ldi	r22, 0x35	; 53
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	85 e3       	ldi	r24, 0x35	; 53
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 9a 00 	call	0x134	; 0x134 <move_forward>
	move_forward(&PORTC,&PORTC,motor2_IN1,motor2_IN2);
 290:	23 e0       	ldi	r18, 0x03	; 3
 292:	42 e0       	ldi	r20, 0x02	; 2
 294:	65 e3       	ldi	r22, 0x35	; 53
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	85 e3       	ldi	r24, 0x35	; 53
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 9a 00 	call	0x134	; 0x134 <move_forward>
 2a0:	08 95       	ret

000002a2 <car_bacwards>:
}

void car_bacwards(void)
{
	move_backwards(&PORTC,&PORTC,motor1_IN1,motor1_IN2);
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	65 e3       	ldi	r22, 0x35	; 53
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	85 e3       	ldi	r24, 0x35	; 53
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 cc 00 	call	0x198	; 0x198 <move_backwards>
	move_backwards(&PORTC,&PORTC,motor2_IN1,motor2_IN2);
 2b2:	23 e0       	ldi	r18, 0x03	; 3
 2b4:	42 e0       	ldi	r20, 0x02	; 2
 2b6:	65 e3       	ldi	r22, 0x35	; 53
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	85 e3       	ldi	r24, 0x35	; 53
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 cc 00 	call	0x198	; 0x198 <move_backwards>
 2c2:	08 95       	ret

000002c4 <car_stop>:
}

void car_stop(void)
{
	stop(&PORTC,&PORTC,motor1_IN1,motor1_IN2);
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	65 e3       	ldi	r22, 0x35	; 53
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	85 e3       	ldi	r24, 0x35	; 53
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 b3 00 	call	0x166	; 0x166 <stop>
	stop(&PORTC,&PORTC,motor2_IN1,motor2_IN2);
 2d4:	23 e0       	ldi	r18, 0x03	; 3
 2d6:	42 e0       	ldi	r20, 0x02	; 2
 2d8:	65 e3       	ldi	r22, 0x35	; 53
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	85 e3       	ldi	r24, 0x35	; 53
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 b3 00 	call	0x166	; 0x166 <stop>
 2e4:	08 95       	ret

000002e6 <car_rotate_left>:
}

void car_rotate_left(void)
{
	move_forward(&PORTC,&PORTC,motor1_IN1,motor1_IN2);
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	65 e3       	ldi	r22, 0x35	; 53
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	85 e3       	ldi	r24, 0x35	; 53
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 9a 00 	call	0x134	; 0x134 <move_forward>
	move_backwards(&PORTC,&PORTC,motor2_IN1,motor2_IN2);
 2f6:	23 e0       	ldi	r18, 0x03	; 3
 2f8:	42 e0       	ldi	r20, 0x02	; 2
 2fa:	65 e3       	ldi	r22, 0x35	; 53
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	85 e3       	ldi	r24, 0x35	; 53
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 cc 00 	call	0x198	; 0x198 <move_backwards>
	set_speed(30);
 306:	8e e1       	ldi	r24, 0x1E	; 30
 308:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <set_speed>
 30c:	08 95       	ret

0000030e <car_rotate_right>:

}

void car_rotate_right(void)
{
	move_forward(&PORTC,&PORTC,motor2_IN1,motor2_IN2);
 30e:	23 e0       	ldi	r18, 0x03	; 3
 310:	42 e0       	ldi	r20, 0x02	; 2
 312:	65 e3       	ldi	r22, 0x35	; 53
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	85 e3       	ldi	r24, 0x35	; 53
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 9a 00 	call	0x134	; 0x134 <move_forward>
	move_backwards(&PORTC,&PORTC,motor1_IN1,motor1_IN2);
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	65 e3       	ldi	r22, 0x35	; 53
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	85 e3       	ldi	r24, 0x35	; 53
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 cc 00 	call	0x198	; 0x198 <move_backwards>
	set_speed(30);
 32e:	8e e1       	ldi	r24, 0x1E	; 30
 330:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <set_speed>
 334:	08 95       	ret

00000336 <setState>:

}

void setState(uint8_t state)
{
 336:	cf 93       	push	r28
 338:	c8 2f       	mov	r28, r24
	if(state >= 0 && state!=3 )
 33a:	83 30       	cpi	r24, 0x03	; 3
 33c:	a1 f0       	breq	.+40     	; 0x366 <setState+0x30>
	{
		car_forward();
 33e:	0e 94 40 01 	call	0x280	; 0x280 <car_forward>
		if(state == 0) set_speed(30);
 342:	c1 11       	cpse	r28, r1
 344:	04 c0       	rjmp	.+8      	; 0x34e <setState+0x18>
 346:	8e e1       	ldi	r24, 0x1E	; 30
 348:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <set_speed>
 34c:	11 c0       	rjmp	.+34     	; 0x370 <setState+0x3a>
		else if (state == 1) set_speed(60);
 34e:	c1 30       	cpi	r28, 0x01	; 1
 350:	21 f4       	brne	.+8      	; 0x35a <setState+0x24>
 352:	8c e3       	ldi	r24, 0x3C	; 60
 354:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <set_speed>
 358:	0b c0       	rjmp	.+22     	; 0x370 <setState+0x3a>
		else if (state == 2) set_speed(90);
 35a:	c2 30       	cpi	r28, 0x02	; 2
 35c:	49 f4       	brne	.+18     	; 0x370 <setState+0x3a>
 35e:	8a e5       	ldi	r24, 0x5A	; 90
 360:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <set_speed>
 364:	05 c0       	rjmp	.+10     	; 0x370 <setState+0x3a>
	}
	else
	{
		car_bacwards();
 366:	0e 94 51 01 	call	0x2a2	; 0x2a2 <car_bacwards>
		set_speed(30);
 36a:	8e e1       	ldi	r24, 0x1E	; 30
 36c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <set_speed>
	}
}
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <is_button_pressed>:
uint8_t is_button_pressed(uint8_t button_bit_number)
{
	return button_pressed(&PINA,button_bit_number);
 374:	68 2f       	mov	r22, r24
 376:	89 e3       	ldi	r24, 0x39	; 57
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 73 00 	call	0xe6	; 0xe6 <button_pressed>
}
 37e:	08 95       	ret

00000380 <main>:


int main(void)
{
	
	app_init();
 380:	0e 94 03 01 	call	0x206	; 0x206 <app_init>
	
	//Initial state of G button
	uint8_t prevG = 0 , nStates = 4;
	int8_t state = -1; //
 384:	df ef       	ldi	r29, 0xFF	; 255
{
	
	app_init();
	
	//Initial state of G button
	uint8_t prevG = 0 , nStates = 4;
 386:	10 e0       	ldi	r17, 0x00	; 0
 388:	01 c0       	rjmp	.+2      	; 0x38c <main+0xc>
 38a:	1c 2f       	mov	r17, r28
	int8_t state = -1; //
	while (True)
	{
		uint8_t currentG = is_button_pressed(buttonG) ;
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	0e 94 ba 01 	call	0x374	; 0x374 <is_button_pressed>
 392:	c8 2f       	mov	r28, r24
		
		if(prevG != currentG && currentG) // to Avoid long press
 394:	18 17       	cp	r17, r24
 396:	11 f0       	breq	.+4      	; 0x39c <main+0x1c>
 398:	81 11       	cpse	r24, r1
		{
			state++; // each press of button G changes the state
 39a:	df 5f       	subi	r29, 0xFF	; 255
		}
		
		if(is_button_pressed(buttonM) && state > -1)// state > -1 to avoid pressing M at the first time we must press G first
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 ba 01 	call	0x374	; 0x374 <is_button_pressed>
 3a2:	88 23       	and	r24, r24
 3a4:	89 f0       	breq	.+34     	; 0x3c8 <main+0x48>
 3a6:	dd 23       	and	r29, r29
 3a8:	7c f0       	brlt	.+30     	; 0x3c8 <main+0x48>
		{
			setState(state % nStates); // making the states circulating
 3aa:	8d 2f       	mov	r24, r29
 3ac:	0d 2e       	mov	r0, r29
 3ae:	00 0c       	add	r0, r0
 3b0:	99 0b       	sbc	r25, r25
 3b2:	83 70       	andi	r24, 0x03	; 3
 3b4:	90 78       	andi	r25, 0x80	; 128
 3b6:	99 23       	and	r25, r25
 3b8:	24 f4       	brge	.+8      	; 0x3c2 <main+0x42>
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	8c 6f       	ori	r24, 0xFC	; 252
 3be:	9f 6f       	ori	r25, 0xFF	; 255
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	0e 94 9b 01 	call	0x336	; 0x336 <setState>
 3c6:	e1 cf       	rjmp	.-62     	; 0x38a <main+0xa>
		}
		else if(state > -1) // STOP State
 3c8:	dd 23       	and	r29, r29
 3ca:	fc f2       	brlt	.-66     	; 0x38a <main+0xa>
		{
			car_stop();
 3cc:	0e 94 62 01 	call	0x2c4	; 0x2c4 <car_stop>
			if(is_button_pressed(buttonL))
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 ba 01 	call	0x374	; 0x374 <is_button_pressed>
 3d6:	88 23       	and	r24, r24
 3d8:	19 f0       	breq	.+6      	; 0x3e0 <main+0x60>
			{
				car_rotate_left();
 3da:	0e 94 73 01 	call	0x2e6	; 0x2e6 <car_rotate_left>
 3de:	d5 cf       	rjmp	.-86     	; 0x38a <main+0xa>
			}
			else if (is_button_pressed(buttonR))
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	0e 94 ba 01 	call	0x374	; 0x374 <is_button_pressed>
 3e6:	88 23       	and	r24, r24
 3e8:	81 f2       	breq	.-96     	; 0x38a <main+0xa>
			{
				car_rotate_right();
 3ea:	0e 94 87 01 	call	0x30e	; 0x30e <car_rotate_right>
 3ee:	cd cf       	rjmp	.-102    	; 0x38a <main+0xa>

000003f0 <ceil>:
 3f0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_trunc>
 3f4:	90 f0       	brcs	.+36     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3f6:	9f 37       	cpi	r25, 0x7F	; 127
 3f8:	48 f4       	brcc	.+18     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3fa:	91 11       	cpse	r25, r1
 3fc:	16 f4       	brtc	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_szero>
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	80 e8       	ldi	r24, 0x80	; 128
 408:	9f e3       	ldi	r25, 0x3F	; 63
 40a:	08 95       	ret
 40c:	26 f0       	brts	.+8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 40e:	1b 16       	cp	r1, r27
 410:	61 1d       	adc	r22, r1
 412:	71 1d       	adc	r23, r1
 414:	81 1d       	adc	r24, r1
 416:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__fp_mintl>
 41a:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_mpack>

0000041e <__divsf3>:
 41e:	0e 94 23 02 	call	0x446	; 0x446 <__divsf3x>
 422:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__fp_round>
 426:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_pscB>
 42a:	58 f0       	brcs	.+22     	; 0x442 <__divsf3+0x24>
 42c:	0e 94 1f 03 	call	0x63e	; 0x63e <__fp_pscA>
 430:	40 f0       	brcs	.+16     	; 0x442 <__divsf3+0x24>
 432:	29 f4       	brne	.+10     	; 0x43e <__divsf3+0x20>
 434:	5f 3f       	cpi	r21, 0xFF	; 255
 436:	29 f0       	breq	.+10     	; 0x442 <__divsf3+0x24>
 438:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__fp_inf>
 43c:	51 11       	cpse	r21, r1
 43e:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_szero>
 442:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_nan>

00000446 <__divsf3x>:
 446:	0e 94 3e 03 	call	0x67c	; 0x67c <__fp_split3>
 44a:	68 f3       	brcs	.-38     	; 0x426 <__divsf3+0x8>

0000044c <__divsf3_pse>:
 44c:	99 23       	and	r25, r25
 44e:	b1 f3       	breq	.-20     	; 0x43c <__divsf3+0x1e>
 450:	55 23       	and	r21, r21
 452:	91 f3       	breq	.-28     	; 0x438 <__divsf3+0x1a>
 454:	95 1b       	sub	r25, r21
 456:	55 0b       	sbc	r21, r21
 458:	bb 27       	eor	r27, r27
 45a:	aa 27       	eor	r26, r26
 45c:	62 17       	cp	r22, r18
 45e:	73 07       	cpc	r23, r19
 460:	84 07       	cpc	r24, r20
 462:	38 f0       	brcs	.+14     	; 0x472 <__divsf3_pse+0x26>
 464:	9f 5f       	subi	r25, 0xFF	; 255
 466:	5f 4f       	sbci	r21, 0xFF	; 255
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	44 1f       	adc	r20, r20
 46e:	aa 1f       	adc	r26, r26
 470:	a9 f3       	breq	.-22     	; 0x45c <__divsf3_pse+0x10>
 472:	35 d0       	rcall	.+106    	; 0x4de <__divsf3_pse+0x92>
 474:	0e 2e       	mov	r0, r30
 476:	3a f0       	brmi	.+14     	; 0x486 <__divsf3_pse+0x3a>
 478:	e0 e8       	ldi	r30, 0x80	; 128
 47a:	32 d0       	rcall	.+100    	; 0x4e0 <__divsf3_pse+0x94>
 47c:	91 50       	subi	r25, 0x01	; 1
 47e:	50 40       	sbci	r21, 0x00	; 0
 480:	e6 95       	lsr	r30
 482:	00 1c       	adc	r0, r0
 484:	ca f7       	brpl	.-14     	; 0x478 <__divsf3_pse+0x2c>
 486:	2b d0       	rcall	.+86     	; 0x4de <__divsf3_pse+0x92>
 488:	fe 2f       	mov	r31, r30
 48a:	29 d0       	rcall	.+82     	; 0x4de <__divsf3_pse+0x92>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	88 1f       	adc	r24, r24
 492:	bb 1f       	adc	r27, r27
 494:	26 17       	cp	r18, r22
 496:	37 07       	cpc	r19, r23
 498:	48 07       	cpc	r20, r24
 49a:	ab 07       	cpc	r26, r27
 49c:	b0 e8       	ldi	r27, 0x80	; 128
 49e:	09 f0       	breq	.+2      	; 0x4a2 <__divsf3_pse+0x56>
 4a0:	bb 0b       	sbc	r27, r27
 4a2:	80 2d       	mov	r24, r0
 4a4:	bf 01       	movw	r22, r30
 4a6:	ff 27       	eor	r31, r31
 4a8:	93 58       	subi	r25, 0x83	; 131
 4aa:	5f 4f       	sbci	r21, 0xFF	; 255
 4ac:	3a f0       	brmi	.+14     	; 0x4bc <__divsf3_pse+0x70>
 4ae:	9e 3f       	cpi	r25, 0xFE	; 254
 4b0:	51 05       	cpc	r21, r1
 4b2:	78 f0       	brcs	.+30     	; 0x4d2 <__divsf3_pse+0x86>
 4b4:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__fp_inf>
 4b8:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_szero>
 4bc:	5f 3f       	cpi	r21, 0xFF	; 255
 4be:	e4 f3       	brlt	.-8      	; 0x4b8 <__divsf3_pse+0x6c>
 4c0:	98 3e       	cpi	r25, 0xE8	; 232
 4c2:	d4 f3       	brlt	.-12     	; 0x4b8 <__divsf3_pse+0x6c>
 4c4:	86 95       	lsr	r24
 4c6:	77 95       	ror	r23
 4c8:	67 95       	ror	r22
 4ca:	b7 95       	ror	r27
 4cc:	f7 95       	ror	r31
 4ce:	9f 5f       	subi	r25, 0xFF	; 255
 4d0:	c9 f7       	brne	.-14     	; 0x4c4 <__divsf3_pse+0x78>
 4d2:	88 0f       	add	r24, r24
 4d4:	91 1d       	adc	r25, r1
 4d6:	96 95       	lsr	r25
 4d8:	87 95       	ror	r24
 4da:	97 f9       	bld	r25, 7
 4dc:	08 95       	ret
 4de:	e1 e0       	ldi	r30, 0x01	; 1
 4e0:	66 0f       	add	r22, r22
 4e2:	77 1f       	adc	r23, r23
 4e4:	88 1f       	adc	r24, r24
 4e6:	bb 1f       	adc	r27, r27
 4e8:	62 17       	cp	r22, r18
 4ea:	73 07       	cpc	r23, r19
 4ec:	84 07       	cpc	r24, r20
 4ee:	ba 07       	cpc	r27, r26
 4f0:	20 f0       	brcs	.+8      	; 0x4fa <__divsf3_pse+0xae>
 4f2:	62 1b       	sub	r22, r18
 4f4:	73 0b       	sbc	r23, r19
 4f6:	84 0b       	sbc	r24, r20
 4f8:	ba 0b       	sbc	r27, r26
 4fa:	ee 1f       	adc	r30, r30
 4fc:	88 f7       	brcc	.-30     	; 0x4e0 <__divsf3_pse+0x94>
 4fe:	e0 95       	com	r30
 500:	08 95       	ret

00000502 <__fixunssfsi>:
 502:	0e 94 46 03 	call	0x68c	; 0x68c <__fp_splitA>
 506:	88 f0       	brcs	.+34     	; 0x52a <__fixunssfsi+0x28>
 508:	9f 57       	subi	r25, 0x7F	; 127
 50a:	98 f0       	brcs	.+38     	; 0x532 <__fixunssfsi+0x30>
 50c:	b9 2f       	mov	r27, r25
 50e:	99 27       	eor	r25, r25
 510:	b7 51       	subi	r27, 0x17	; 23
 512:	b0 f0       	brcs	.+44     	; 0x540 <__fixunssfsi+0x3e>
 514:	e1 f0       	breq	.+56     	; 0x54e <__fixunssfsi+0x4c>
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	88 1f       	adc	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	1a f0       	brmi	.+6      	; 0x526 <__fixunssfsi+0x24>
 520:	ba 95       	dec	r27
 522:	c9 f7       	brne	.-14     	; 0x516 <__fixunssfsi+0x14>
 524:	14 c0       	rjmp	.+40     	; 0x54e <__fixunssfsi+0x4c>
 526:	b1 30       	cpi	r27, 0x01	; 1
 528:	91 f0       	breq	.+36     	; 0x54e <__fixunssfsi+0x4c>
 52a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_zero>
 52e:	b1 e0       	ldi	r27, 0x01	; 1
 530:	08 95       	ret
 532:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__fp_zero>
 536:	67 2f       	mov	r22, r23
 538:	78 2f       	mov	r23, r24
 53a:	88 27       	eor	r24, r24
 53c:	b8 5f       	subi	r27, 0xF8	; 248
 53e:	39 f0       	breq	.+14     	; 0x54e <__fixunssfsi+0x4c>
 540:	b9 3f       	cpi	r27, 0xF9	; 249
 542:	cc f3       	brlt	.-14     	; 0x536 <__fixunssfsi+0x34>
 544:	86 95       	lsr	r24
 546:	77 95       	ror	r23
 548:	67 95       	ror	r22
 54a:	b3 95       	inc	r27
 54c:	d9 f7       	brne	.-10     	; 0x544 <__fixunssfsi+0x42>
 54e:	3e f4       	brtc	.+14     	; 0x55e <__fixunssfsi+0x5c>
 550:	90 95       	com	r25
 552:	80 95       	com	r24
 554:	70 95       	com	r23
 556:	61 95       	neg	r22
 558:	7f 4f       	sbci	r23, 0xFF	; 255
 55a:	8f 4f       	sbci	r24, 0xFF	; 255
 55c:	9f 4f       	sbci	r25, 0xFF	; 255
 55e:	08 95       	ret

00000560 <__floatunsisf>:
 560:	e8 94       	clt
 562:	09 c0       	rjmp	.+18     	; 0x576 <__floatsisf+0x12>

00000564 <__floatsisf>:
 564:	97 fb       	bst	r25, 7
 566:	3e f4       	brtc	.+14     	; 0x576 <__floatsisf+0x12>
 568:	90 95       	com	r25
 56a:	80 95       	com	r24
 56c:	70 95       	com	r23
 56e:	61 95       	neg	r22
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	99 23       	and	r25, r25
 578:	a9 f0       	breq	.+42     	; 0x5a4 <__floatsisf+0x40>
 57a:	f9 2f       	mov	r31, r25
 57c:	96 e9       	ldi	r25, 0x96	; 150
 57e:	bb 27       	eor	r27, r27
 580:	93 95       	inc	r25
 582:	f6 95       	lsr	r31
 584:	87 95       	ror	r24
 586:	77 95       	ror	r23
 588:	67 95       	ror	r22
 58a:	b7 95       	ror	r27
 58c:	f1 11       	cpse	r31, r1
 58e:	f8 cf       	rjmp	.-16     	; 0x580 <__floatsisf+0x1c>
 590:	fa f4       	brpl	.+62     	; 0x5d0 <__floatsisf+0x6c>
 592:	bb 0f       	add	r27, r27
 594:	11 f4       	brne	.+4      	; 0x59a <__floatsisf+0x36>
 596:	60 ff       	sbrs	r22, 0
 598:	1b c0       	rjmp	.+54     	; 0x5d0 <__floatsisf+0x6c>
 59a:	6f 5f       	subi	r22, 0xFF	; 255
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	16 c0       	rjmp	.+44     	; 0x5d0 <__floatsisf+0x6c>
 5a4:	88 23       	and	r24, r24
 5a6:	11 f0       	breq	.+4      	; 0x5ac <__floatsisf+0x48>
 5a8:	96 e9       	ldi	r25, 0x96	; 150
 5aa:	11 c0       	rjmp	.+34     	; 0x5ce <__floatsisf+0x6a>
 5ac:	77 23       	and	r23, r23
 5ae:	21 f0       	breq	.+8      	; 0x5b8 <__floatsisf+0x54>
 5b0:	9e e8       	ldi	r25, 0x8E	; 142
 5b2:	87 2f       	mov	r24, r23
 5b4:	76 2f       	mov	r23, r22
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <__floatsisf+0x5e>
 5b8:	66 23       	and	r22, r22
 5ba:	71 f0       	breq	.+28     	; 0x5d8 <__floatsisf+0x74>
 5bc:	96 e8       	ldi	r25, 0x86	; 134
 5be:	86 2f       	mov	r24, r22
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	2a f0       	brmi	.+10     	; 0x5d0 <__floatsisf+0x6c>
 5c6:	9a 95       	dec	r25
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	88 1f       	adc	r24, r24
 5ce:	da f7       	brpl	.-10     	; 0x5c6 <__floatsisf+0x62>
 5d0:	88 0f       	add	r24, r24
 5d2:	96 95       	lsr	r25
 5d4:	87 95       	ror	r24
 5d6:	97 f9       	bld	r25, 7
 5d8:	08 95       	ret

000005da <__fp_inf>:
 5da:	97 f9       	bld	r25, 7
 5dc:	9f 67       	ori	r25, 0x7F	; 127
 5de:	80 e8       	ldi	r24, 0x80	; 128
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	08 95       	ret

000005e6 <__fp_mintl>:
 5e6:	88 23       	and	r24, r24
 5e8:	71 f4       	brne	.+28     	; 0x606 <__fp_mintl+0x20>
 5ea:	77 23       	and	r23, r23
 5ec:	21 f0       	breq	.+8      	; 0x5f6 <__fp_mintl+0x10>
 5ee:	98 50       	subi	r25, 0x08	; 8
 5f0:	87 2b       	or	r24, r23
 5f2:	76 2f       	mov	r23, r22
 5f4:	07 c0       	rjmp	.+14     	; 0x604 <__fp_mintl+0x1e>
 5f6:	66 23       	and	r22, r22
 5f8:	11 f4       	brne	.+4      	; 0x5fe <__fp_mintl+0x18>
 5fa:	99 27       	eor	r25, r25
 5fc:	0d c0       	rjmp	.+26     	; 0x618 <__fp_mintl+0x32>
 5fe:	90 51       	subi	r25, 0x10	; 16
 600:	86 2b       	or	r24, r22
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	2a f0       	brmi	.+10     	; 0x612 <__fp_mintl+0x2c>
 608:	9a 95       	dec	r25
 60a:	66 0f       	add	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	88 1f       	adc	r24, r24
 610:	da f7       	brpl	.-10     	; 0x608 <__fp_mintl+0x22>
 612:	88 0f       	add	r24, r24
 614:	96 95       	lsr	r25
 616:	87 95       	ror	r24
 618:	97 f9       	bld	r25, 7
 61a:	08 95       	ret

0000061c <__fp_mpack>:
 61c:	9f 3f       	cpi	r25, 0xFF	; 255
 61e:	31 f0       	breq	.+12     	; 0x62c <__fp_mpack_finite+0xc>

00000620 <__fp_mpack_finite>:
 620:	91 50       	subi	r25, 0x01	; 1
 622:	20 f4       	brcc	.+8      	; 0x62c <__fp_mpack_finite+0xc>
 624:	87 95       	ror	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	88 0f       	add	r24, r24
 62e:	91 1d       	adc	r25, r1
 630:	96 95       	lsr	r25
 632:	87 95       	ror	r24
 634:	97 f9       	bld	r25, 7
 636:	08 95       	ret

00000638 <__fp_nan>:
 638:	9f ef       	ldi	r25, 0xFF	; 255
 63a:	80 ec       	ldi	r24, 0xC0	; 192
 63c:	08 95       	ret

0000063e <__fp_pscA>:
 63e:	00 24       	eor	r0, r0
 640:	0a 94       	dec	r0
 642:	16 16       	cp	r1, r22
 644:	17 06       	cpc	r1, r23
 646:	18 06       	cpc	r1, r24
 648:	09 06       	cpc	r0, r25
 64a:	08 95       	ret

0000064c <__fp_pscB>:
 64c:	00 24       	eor	r0, r0
 64e:	0a 94       	dec	r0
 650:	12 16       	cp	r1, r18
 652:	13 06       	cpc	r1, r19
 654:	14 06       	cpc	r1, r20
 656:	05 06       	cpc	r0, r21
 658:	08 95       	ret

0000065a <__fp_round>:
 65a:	09 2e       	mov	r0, r25
 65c:	03 94       	inc	r0
 65e:	00 0c       	add	r0, r0
 660:	11 f4       	brne	.+4      	; 0x666 <__fp_round+0xc>
 662:	88 23       	and	r24, r24
 664:	52 f0       	brmi	.+20     	; 0x67a <__fp_round+0x20>
 666:	bb 0f       	add	r27, r27
 668:	40 f4       	brcc	.+16     	; 0x67a <__fp_round+0x20>
 66a:	bf 2b       	or	r27, r31
 66c:	11 f4       	brne	.+4      	; 0x672 <__fp_round+0x18>
 66e:	60 ff       	sbrs	r22, 0
 670:	04 c0       	rjmp	.+8      	; 0x67a <__fp_round+0x20>
 672:	6f 5f       	subi	r22, 0xFF	; 255
 674:	7f 4f       	sbci	r23, 0xFF	; 255
 676:	8f 4f       	sbci	r24, 0xFF	; 255
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__fp_split3>:
 67c:	57 fd       	sbrc	r21, 7
 67e:	90 58       	subi	r25, 0x80	; 128
 680:	44 0f       	add	r20, r20
 682:	55 1f       	adc	r21, r21
 684:	59 f0       	breq	.+22     	; 0x69c <__fp_splitA+0x10>
 686:	5f 3f       	cpi	r21, 0xFF	; 255
 688:	71 f0       	breq	.+28     	; 0x6a6 <__fp_splitA+0x1a>
 68a:	47 95       	ror	r20

0000068c <__fp_splitA>:
 68c:	88 0f       	add	r24, r24
 68e:	97 fb       	bst	r25, 7
 690:	99 1f       	adc	r25, r25
 692:	61 f0       	breq	.+24     	; 0x6ac <__fp_splitA+0x20>
 694:	9f 3f       	cpi	r25, 0xFF	; 255
 696:	79 f0       	breq	.+30     	; 0x6b6 <__fp_splitA+0x2a>
 698:	87 95       	ror	r24
 69a:	08 95       	ret
 69c:	12 16       	cp	r1, r18
 69e:	13 06       	cpc	r1, r19
 6a0:	14 06       	cpc	r1, r20
 6a2:	55 1f       	adc	r21, r21
 6a4:	f2 cf       	rjmp	.-28     	; 0x68a <__fp_split3+0xe>
 6a6:	46 95       	lsr	r20
 6a8:	f1 df       	rcall	.-30     	; 0x68c <__fp_splitA>
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <__fp_splitA+0x30>
 6ac:	16 16       	cp	r1, r22
 6ae:	17 06       	cpc	r1, r23
 6b0:	18 06       	cpc	r1, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	f1 cf       	rjmp	.-30     	; 0x698 <__fp_splitA+0xc>
 6b6:	86 95       	lsr	r24
 6b8:	71 05       	cpc	r23, r1
 6ba:	61 05       	cpc	r22, r1
 6bc:	08 94       	sec
 6be:	08 95       	ret

000006c0 <__fp_trunc>:
 6c0:	0e 94 46 03 	call	0x68c	; 0x68c <__fp_splitA>
 6c4:	a0 f0       	brcs	.+40     	; 0x6ee <__fp_trunc+0x2e>
 6c6:	be e7       	ldi	r27, 0x7E	; 126
 6c8:	b9 17       	cp	r27, r25
 6ca:	88 f4       	brcc	.+34     	; 0x6ee <__fp_trunc+0x2e>
 6cc:	bb 27       	eor	r27, r27
 6ce:	9f 38       	cpi	r25, 0x8F	; 143
 6d0:	60 f4       	brcc	.+24     	; 0x6ea <__fp_trunc+0x2a>
 6d2:	16 16       	cp	r1, r22
 6d4:	b1 1d       	adc	r27, r1
 6d6:	67 2f       	mov	r22, r23
 6d8:	78 2f       	mov	r23, r24
 6da:	88 27       	eor	r24, r24
 6dc:	98 5f       	subi	r25, 0xF8	; 248
 6de:	f7 cf       	rjmp	.-18     	; 0x6ce <__fp_trunc+0xe>
 6e0:	86 95       	lsr	r24
 6e2:	77 95       	ror	r23
 6e4:	67 95       	ror	r22
 6e6:	b1 1d       	adc	r27, r1
 6e8:	93 95       	inc	r25
 6ea:	96 39       	cpi	r25, 0x96	; 150
 6ec:	c8 f3       	brcs	.-14     	; 0x6e0 <__fp_trunc+0x20>
 6ee:	08 95       	ret

000006f0 <__fp_zero>:
 6f0:	e8 94       	clt

000006f2 <__fp_szero>:
 6f2:	bb 27       	eor	r27, r27
 6f4:	66 27       	eor	r22, r22
 6f6:	77 27       	eor	r23, r23
 6f8:	cb 01       	movw	r24, r22
 6fa:	97 f9       	bld	r25, 7
 6fc:	08 95       	ret

000006fe <__mulsf3>:
 6fe:	0e 94 92 03 	call	0x724	; 0x724 <__mulsf3x>
 702:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__fp_round>
 706:	0e 94 1f 03 	call	0x63e	; 0x63e <__fp_pscA>
 70a:	38 f0       	brcs	.+14     	; 0x71a <__mulsf3+0x1c>
 70c:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_pscB>
 710:	20 f0       	brcs	.+8      	; 0x71a <__mulsf3+0x1c>
 712:	95 23       	and	r25, r21
 714:	11 f0       	breq	.+4      	; 0x71a <__mulsf3+0x1c>
 716:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__fp_inf>
 71a:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_nan>
 71e:	11 24       	eor	r1, r1
 720:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_szero>

00000724 <__mulsf3x>:
 724:	0e 94 3e 03 	call	0x67c	; 0x67c <__fp_split3>
 728:	70 f3       	brcs	.-36     	; 0x706 <__mulsf3+0x8>

0000072a <__mulsf3_pse>:
 72a:	95 9f       	mul	r25, r21
 72c:	c1 f3       	breq	.-16     	; 0x71e <__mulsf3+0x20>
 72e:	95 0f       	add	r25, r21
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	55 1f       	adc	r21, r21
 734:	62 9f       	mul	r22, r18
 736:	f0 01       	movw	r30, r0
 738:	72 9f       	mul	r23, r18
 73a:	bb 27       	eor	r27, r27
 73c:	f0 0d       	add	r31, r0
 73e:	b1 1d       	adc	r27, r1
 740:	63 9f       	mul	r22, r19
 742:	aa 27       	eor	r26, r26
 744:	f0 0d       	add	r31, r0
 746:	b1 1d       	adc	r27, r1
 748:	aa 1f       	adc	r26, r26
 74a:	64 9f       	mul	r22, r20
 74c:	66 27       	eor	r22, r22
 74e:	b0 0d       	add	r27, r0
 750:	a1 1d       	adc	r26, r1
 752:	66 1f       	adc	r22, r22
 754:	82 9f       	mul	r24, r18
 756:	22 27       	eor	r18, r18
 758:	b0 0d       	add	r27, r0
 75a:	a1 1d       	adc	r26, r1
 75c:	62 1f       	adc	r22, r18
 75e:	73 9f       	mul	r23, r19
 760:	b0 0d       	add	r27, r0
 762:	a1 1d       	adc	r26, r1
 764:	62 1f       	adc	r22, r18
 766:	83 9f       	mul	r24, r19
 768:	a0 0d       	add	r26, r0
 76a:	61 1d       	adc	r22, r1
 76c:	22 1f       	adc	r18, r18
 76e:	74 9f       	mul	r23, r20
 770:	33 27       	eor	r19, r19
 772:	a0 0d       	add	r26, r0
 774:	61 1d       	adc	r22, r1
 776:	23 1f       	adc	r18, r19
 778:	84 9f       	mul	r24, r20
 77a:	60 0d       	add	r22, r0
 77c:	21 1d       	adc	r18, r1
 77e:	82 2f       	mov	r24, r18
 780:	76 2f       	mov	r23, r22
 782:	6a 2f       	mov	r22, r26
 784:	11 24       	eor	r1, r1
 786:	9f 57       	subi	r25, 0x7F	; 127
 788:	50 40       	sbci	r21, 0x00	; 0
 78a:	9a f0       	brmi	.+38     	; 0x7b2 <__mulsf3_pse+0x88>
 78c:	f1 f0       	breq	.+60     	; 0x7ca <__mulsf3_pse+0xa0>
 78e:	88 23       	and	r24, r24
 790:	4a f0       	brmi	.+18     	; 0x7a4 <__mulsf3_pse+0x7a>
 792:	ee 0f       	add	r30, r30
 794:	ff 1f       	adc	r31, r31
 796:	bb 1f       	adc	r27, r27
 798:	66 1f       	adc	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	88 1f       	adc	r24, r24
 79e:	91 50       	subi	r25, 0x01	; 1
 7a0:	50 40       	sbci	r21, 0x00	; 0
 7a2:	a9 f7       	brne	.-22     	; 0x78e <__mulsf3_pse+0x64>
 7a4:	9e 3f       	cpi	r25, 0xFE	; 254
 7a6:	51 05       	cpc	r21, r1
 7a8:	80 f0       	brcs	.+32     	; 0x7ca <__mulsf3_pse+0xa0>
 7aa:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__fp_inf>
 7ae:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_szero>
 7b2:	5f 3f       	cpi	r21, 0xFF	; 255
 7b4:	e4 f3       	brlt	.-8      	; 0x7ae <__mulsf3_pse+0x84>
 7b6:	98 3e       	cpi	r25, 0xE8	; 232
 7b8:	d4 f3       	brlt	.-12     	; 0x7ae <__mulsf3_pse+0x84>
 7ba:	86 95       	lsr	r24
 7bc:	77 95       	ror	r23
 7be:	67 95       	ror	r22
 7c0:	b7 95       	ror	r27
 7c2:	f7 95       	ror	r31
 7c4:	e7 95       	ror	r30
 7c6:	9f 5f       	subi	r25, 0xFF	; 255
 7c8:	c1 f7       	brne	.-16     	; 0x7ba <__mulsf3_pse+0x90>
 7ca:	fe 2b       	or	r31, r30
 7cc:	88 0f       	add	r24, r24
 7ce:	91 1d       	adc	r25, r1
 7d0:	96 95       	lsr	r25
 7d2:	87 95       	ror	r24
 7d4:	97 f9       	bld	r25, 7
 7d6:	08 95       	ret

000007d8 <_exit>:
 7d8:	f8 94       	cli

000007da <__stop_program>:
 7da:	ff cf       	rjmp	.-2      	; 0x7da <__stop_program>
