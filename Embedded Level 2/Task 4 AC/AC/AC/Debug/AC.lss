
AC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00000e72  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c8  008000c8  00000f6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ccd  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d60  00000000  00000000  00002f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001278  00000000  00000000  00003c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000528  00000000  00000000  00004edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092b  00000000  00000000  00005404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe6  00000000  00000000  00005d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00006d15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_7>
  20:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__vector_8>
  24:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__vector_9>
  28:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__vector_10>
  2c:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3c       	cpi	r26, 0xC8	; 200
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ec       	ldi	r26, 0xC8	; 200
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3d       	cpi	r26, 0xD0	; 208
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ef 02 	call	0x5de	; 0x5de <main>
  8a:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_UpdateScreen>:
* Return value: none
* Description: function used to update the screen after any user input.
************************************************************************************/
void APP_UpdateScreen(void)
{		
	EULCD_voidLCDWriteCommand(CLEAR_SCREEN);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EULCD_voidLCDWriteCommand>
	EULCD_voidLCDWriteString ("PLease Set The");
  98:	80 e7       	ldi	r24, 0x70	; 112
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 94 02 	call	0x528	; 0x528 <EULCD_voidLCDWriteString>
	EULCD_voidLCDGoto (1 ,1);
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 bf 02 	call	0x57e	; 0x57e <EULCD_voidLCDGoto>
	EULCD_voidLCDWriteString ("Temperature:");						
  a8:	8f e7       	ldi	r24, 0x7F	; 127
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 94 02 	call	0x528	; 0x528 <EULCD_voidLCDWriteString>
  b0:	08 95       	ret

000000b2 <APP_Init>:
* Description	  : initialize the Air Conditioner to work by initializing the modules used in it
**********************************************************************************************************************************/
void APP_Init(void)
{
	
	EULLCD_voidLCDInit();
  b2:	0e 94 35 02 	call	0x46a	; 0x46a <EULLCD_voidLCDInit>
	EUKeypad_voidKeypadInit();
  b6:	0e 94 22 01 	call	0x244	; 0x244 <EUKeypad_voidKeypadInit>
	MPWM_voidPwmInit();
  ba:	0e 94 49 04 	call	0x892	; 0x892 <MPWM_voidPwmInit>
	EUDCMOTOR_voidDcMotorInit();
  be:	0e 94 08 01 	call	0x210	; 0x210 <EUDCMOTOR_voidDcMotorInit>
	EULM35_voidInit();
  c2:	0e 94 ce 02 	call	0x59c	; 0x59c <EULM35_voidInit>
	APP_UpdateScreen();
  c6:	0e 94 49 00 	call	0x92	; 0x92 <APP_UpdateScreen>
  ca:	08 95       	ret

000000cc <App_Fan_ON>:
* Return value: none
* Description: function used to turn on the fan with speed 90%.
************************************************************************************/
void App_Fan_ON(void)
{
	 EULCD_voidLCDWriteCommand(CLEAR_SCREEN);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EULCD_voidLCDWriteCommand>
	 EULCD_voidLCDGoto (0,1);
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 bf 02 	call	0x57e	; 0x57e <EULCD_voidLCDGoto>
	 EULCD_voidLCDWriteString ("Current temp:");
  da:	8c e8       	ldi	r24, 0x8C	; 140
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 94 02 	call	0x528	; 0x528 <EULCD_voidLCDWriteString>
	 EULCD_voidLCDGoto (0 ,14);
  e2:	6e e0       	ldi	r22, 0x0E	; 14
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 bf 02 	call	0x57e	; 0x57e <EULCD_voidLCDGoto>
	 EULCD_voidLCDDisplayInteger(global_u16CurrentTemp);
  ea:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end>
  ee:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__data_end+0x1>
  f2:	0e 94 a1 02 	call	0x542	; 0x542 <EULCD_voidLCDDisplayInteger>
	 EULCD_voidLCDGoto (1,1);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 bf 02 	call	0x57e	; 0x57e <EULCD_voidLCDGoto>
	 EULCD_voidLCDWriteString ("Fan turned on");
  fe:	8a e9       	ldi	r24, 0x9A	; 154
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 94 02 	call	0x528	; 0x528 <EULCD_voidLCDWriteString>
	 EUDCMOTOR_voidStartMotor();
 106:	0e 94 1c 01 	call	0x238	; 0x238 <EUDCMOTOR_voidStartMotor>
	 EUDCMOTOR_voidSetMotorSpeed(90);
 10a:	8a e5       	ldi	r24, 0x5A	; 90
 10c:	0e 94 13 01 	call	0x226	; 0x226 <EUDCMOTOR_voidSetMotorSpeed>
	 MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN1_WIRE1,HIGH);
 110:	41 e0       	ldi	r20, 0x01	; 1
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN2_WIRE1,LOW);
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	89 e6       	ldi	r24, 0x69	; 105
 128:	98 e1       	ldi	r25, 0x18	; 24
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <App_Fan_ON+0x5e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <App_Fan_ON+0x68>
 134:	00 00       	nop
	 _delay_ms(1000);
	 APP_UpdateScreen();
 136:	0e 94 49 00 	call	0x92	; 0x92 <APP_UpdateScreen>
 13a:	08 95       	ret

0000013c <App_Fan_OFF>:
* Return value: none
* Description: function used to turn off the fan.
************************************************************************************/
void App_Fan_OFF(void)
{
	EULCD_voidLCDWriteCommand(CLEAR_SCREEN);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EULCD_voidLCDWriteCommand>
	EULCD_voidLCDGoto (0,1);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 bf 02 	call	0x57e	; 0x57e <EULCD_voidLCDGoto>
	EULCD_voidLCDWriteString ("Current temp:");
 14a:	8c e8       	ldi	r24, 0x8C	; 140
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 94 02 	call	0x528	; 0x528 <EULCD_voidLCDWriteString>
	EULCD_voidLCDGoto (0 ,14);
 152:	6e e0       	ldi	r22, 0x0E	; 14
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 bf 02 	call	0x57e	; 0x57e <EULCD_voidLCDGoto>
	EULCD_voidLCDDisplayInteger(global_u16CurrentTemp);
 15a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end>
 15e:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__data_end+0x1>
 162:	0e 94 a1 02 	call	0x542	; 0x542 <EULCD_voidLCDDisplayInteger>
	EULCD_voidLCDGoto (1 ,1);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 bf 02 	call	0x57e	; 0x57e <EULCD_voidLCDGoto>
	EULCD_voidLCDWriteString ("Fan turned off");
 16e:	88 ea       	ldi	r24, 0xA8	; 168
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 94 02 	call	0x528	; 0x528 <EULCD_voidLCDWriteString>
	EUDCMOTOR_voidStopMotor();
 176:	0e 94 1f 01 	call	0x23e	; 0x23e <EUDCMOTOR_voidStopMotor>
	 MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN1_WIRE1,LOW);
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN2_WIRE1,LOW);
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	89 e6       	ldi	r24, 0x69	; 105
 192:	98 e1       	ldi	r25, 0x18	; 24
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <App_Fan_OFF+0x58>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <App_Fan_OFF+0x62>
 19e:	00 00       	nop
	_delay_ms(1000);
	APP_UpdateScreen();
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <APP_UpdateScreen>
 1a4:	08 95       	ret

000001a6 <APP_validate>:
* Description: function used to turn on or off the fan according to the wanted temperature and the current temperature.
************************************************************************************/
void APP_validate(void)
{

	global_u8IntegerKey = atoi(global_u8ArrayOfKeys);	
 1a6:	8c ec       	ldi	r24, 0xCC	; 204
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 d1 06 	call	0xda2	; 0xda2 <atoi>
 1ae:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <global_u8IntegerKey>
	global_u16CurrentTemp = EULM35_u16LM35ReadValue(ADC0);
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <EULM35_u16LM35ReadValue>
 1b8:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__data_end+0x1>
 1bc:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__data_end>
	if (global_u16CurrentTemp > global_u8IntegerKey )
 1c0:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <global_u8IntegerKey>
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	28 17       	cp	r18, r24
 1c8:	39 07       	cpc	r19, r25
 1ca:	18 f4       	brcc	.+6      	; 0x1d2 <APP_validate+0x2c>
	{
		App_Fan_ON();
 1cc:	0e 94 66 00 	call	0xcc	; 0xcc <App_Fan_ON>
 1d0:	08 95       	ret
	}
	else
	{
		App_Fan_OFF();
 1d2:	0e 94 9e 00 	call	0x13c	; 0x13c <App_Fan_OFF>
 1d6:	08 95       	ret

000001d8 <APP_update>:
* Parameters (out): none
* Return value: none
* Description: main task of the control system, handles all application cases
************************************************************************************/
void APP_update(void)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
	/* local Variable holds the value return from Keypad */
	u8 local_u8ReturnKeypadValue ;
	/* local variable used in the iteration */
	u8 local_u8Iterator = 0;
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
	/* loop  */
	while (local_u8Iterator < 3)
 1de:	0f c0       	rjmp	.+30     	; 0x1fe <APP_update+0x26>
	{
		/* Get The Input From the Keypad */
		local_u8ReturnKeypadValue = EUKeypad_voidKeyPressed() ;
 1e0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <EUKeypad_voidKeyPressed>
 1e4:	c8 2f       	mov	r28, r24
		/* if the Keypad Pressed */
		if (local_u8ReturnKeypadValue != 0xFF)
 1e6:	8f 3f       	cpi	r24, 0xFF	; 255
 1e8:	51 f0       	breq	.+20     	; 0x1fe <APP_update+0x26>
		{
			/* if the User entered '=' break the while loop*/
			if (local_u8ReturnKeypadValue == '=')
 1ea:	8d 33       	cpi	r24, 0x3D	; 61
 1ec:	51 f0       	breq	.+20     	; 0x202 <APP_update+0x2a>
			break ;
			/* Store The Input in the Array */
			global_u8ArrayOfKeys[local_u8Iterator]= local_u8ReturnKeypadValue ;
 1ee:	ed 2f       	mov	r30, r29
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	e4 53       	subi	r30, 0x34	; 52
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	80 83       	st	Z, r24
			/* Write the Input To The LCD */
			EULCD_voidLCDWriteChar(local_u8ReturnKeypadValue);
 1f8:	0e 94 48 02 	call	0x490	; 0x490 <EULCD_voidLCDWriteChar>
			/* increment the iterator */
			local_u8Iterator ++ ;
 1fc:	df 5f       	subi	r29, 0xFF	; 255
	/* local Variable holds the value return from Keypad */
	u8 local_u8ReturnKeypadValue ;
	/* local variable used in the iteration */
	u8 local_u8Iterator = 0;
	/* loop  */
	while (local_u8Iterator < 3)
 1fe:	d3 30       	cpi	r29, 0x03	; 3
 200:	78 f3       	brcs	.-34     	; 0x1e0 <APP_update+0x8>
			local_u8Iterator ++ ;
		}
	}
	
	/* When User Enter "=" Call Validate Function */
	if (local_u8ReturnKeypadValue == '=')
 202:	cd 33       	cpi	r28, 0x3D	; 61
 204:	11 f4       	brne	.+4      	; 0x20a <APP_update+0x32>
	{
			APP_validate();
 206:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <APP_validate>
	}

}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <EUDCMOTOR_voidDcMotorInit>:

void EUDCMOTOR_voidDcMotorInit(void)
{
	#if (DCMOTOR_NUM == 1)
	{
		MDIO_voidSetPinDirection(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN1_WIRE1,HIGH);
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	0e 94 11 03 	call	0x622	; 0x622 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN2_WIRE1,HIGH);
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	0e 94 11 03 	call	0x622	; 0x622 <MDIO_voidSetPinDirection>
 224:	08 95       	ret

00000226 <EUDCMOTOR_voidSetMotorSpeed>:

}

void EUDCMOTOR_voidSetMotorSpeed(u8 copy_u8Speed)
{
		MPWM_voidSetDutyCycle(copy_u8Speed);
 226:	68 2f       	mov	r22, r24
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__floatunsisf>
 232:	0e 94 64 04 	call	0x8c8	; 0x8c8 <MPWM_voidSetDutyCycle>
 236:	08 95       	ret

00000238 <EUDCMOTOR_voidStartMotor>:

}
void EUDCMOTOR_voidStartMotor(void)
{
	MPWM_voidStartPWM();
 238:	0e 94 74 04 	call	0x8e8	; 0x8e8 <MPWM_voidStartPWM>
 23c:	08 95       	ret

0000023e <EUDCMOTOR_voidStopMotor>:
}
void EUDCMOTOR_voidStopMotor(void)
{
	MPWM_voidStopPWM();
 23e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <MPWM_voidStopPWM>
 242:	08 95       	ret

00000244 <EUKeypad_voidKeypadInit>:
Return value : none
*/
void EUKeypad_voidKeypadInit (void)
{
	// Make Columns as Output Pins
	MDIO_voidSetPinDirection(Col0, HIGH);
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 11 03 	call	0x622	; 0x622 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Col1, HIGH);
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	0e 94 11 03 	call	0x622	; 0x622 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Col2, HIGH);
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 11 03 	call	0x622	; 0x622 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Col3, HIGH);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	63 e0       	ldi	r22, 0x03	; 3
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 11 03 	call	0x622	; 0x622 <MDIO_voidSetPinDirection>
	
	// Make Rows as Input Pins
	MDIO_voidSetPinDirection(Row0, LOW);
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	64 e0       	ldi	r22, 0x04	; 4
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 11 03 	call	0x622	; 0x622 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Row1, LOW);
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	65 e0       	ldi	r22, 0x05	; 5
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 11 03 	call	0x622	; 0x622 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Row2, LOW);
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	66 e0       	ldi	r22, 0x06	; 6
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	0e 94 11 03 	call	0x622	; 0x622 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Row3, LOW);
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	67 e0       	ldi	r22, 0x07	; 7
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	0e 94 11 03 	call	0x622	; 0x622 <MDIO_voidSetPinDirection>
	
	// Send High Voltage To Columns
	MDIO_voidSetPinValue(Col0, HIGH);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Col1, HIGH);
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Col2, HIGH);
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Col3, HIGH);
 2b2:	41 e0       	ldi	r20, 0x01	; 1
 2b4:	63 e0       	ldi	r22, 0x03	; 3
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
	
	// Make Rows As Pull Up Resistors
	MDIO_voidSetPinValue(Row0, HIGH);
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	64 e0       	ldi	r22, 0x04	; 4
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Row1, HIGH);
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	65 e0       	ldi	r22, 0x05	; 5
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Row2, HIGH);
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	66 e0       	ldi	r22, 0x06	; 6
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Row3, HIGH);
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	67 e0       	ldi	r22, 0x07	; 7
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
 2e4:	08 95       	ret

000002e6 <EUKeypad_voidKeyPressed>:
}

u8 EUKeypad_voidKeyPressed (void)
{
 2e6:	6f 92       	push	r6
 2e8:	7f 92       	push	r7
 2ea:	8f 92       	push	r8
 2ec:	9f 92       	push	r9
 2ee:	af 92       	push	r10
 2f0:	bf 92       	push	r11
 2f2:	cf 92       	push	r12
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
		
	for (u8 c = 0; c < 4; ++c)
 302:	61 2c       	mov	r6, r1
 304:	52 c0       	rjmp	.+164    	; 0x3aa <EUKeypad_voidKeyPressed+0xc4>
	{
		MDIO_voidSetPinValue(col[c * 2], col[c * 2 + 1], LOW); // alternating low on the column pins (pinC0 -> pinC3)
 306:	a6 2c       	mov	r10, r6
 308:	b1 2c       	mov	r11, r1
 30a:	65 01       	movw	r12, r10
 30c:	cc 0c       	add	r12, r12
 30e:	dd 1c       	adc	r13, r13
 310:	46 01       	movw	r8, r12
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	88 1a       	sub	r8, r24
 316:	98 0a       	sbc	r9, r24
 318:	d4 01       	movw	r26, r8
 31a:	a8 59       	subi	r26, 0x98	; 152
 31c:	bf 4f       	sbci	r27, 0xFF	; 255
 31e:	f6 01       	movw	r30, r12
 320:	e8 59       	subi	r30, 0x98	; 152
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	6c 91       	ld	r22, X
 328:	80 81       	ld	r24, Z
 32a:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
	
		for (u8 r = 0; r < 4; ++r)
 32e:	71 2c       	mov	r7, r1
 330:	2d c0       	rjmp	.+90     	; 0x38c <EUKeypad_voidKeyPressed+0xa6>
		{
			if (!MDIO_voidGetPinValue(row[r * 2], row[r * 2 + 1]))
 332:	e7 2c       	mov	r14, r7
 334:	f1 2c       	mov	r15, r1
 336:	e7 01       	movw	r28, r14
 338:	cc 0f       	add	r28, r28
 33a:	dd 1f       	adc	r29, r29
 33c:	8e 01       	movw	r16, r28
 33e:	0f 5f       	subi	r16, 0xFF	; 255
 340:	1f 4f       	sbci	r17, 0xFF	; 255
 342:	d8 01       	movw	r26, r16
 344:	a0 5a       	subi	r26, 0xA0	; 160
 346:	bf 4f       	sbci	r27, 0xFF	; 255
 348:	fe 01       	movw	r30, r28
 34a:	e0 5a       	subi	r30, 0xA0	; 160
 34c:	ff 4f       	sbci	r31, 0xFF	; 255
 34e:	6c 91       	ld	r22, X
 350:	80 81       	ld	r24, Z
 352:	0e 94 1b 04 	call	0x836	; 0x836 <MDIO_voidGetPinValue>
 356:	81 11       	cpse	r24, r1
 358:	18 c0       	rjmp	.+48     	; 0x38a <EUKeypad_voidKeyPressed+0xa4>
			{
				while (!MDIO_voidGetPinValue(row[r * 2], row[r * 2 + 1])); // Prevent the long presses
 35a:	f8 01       	movw	r30, r16
 35c:	e0 5a       	subi	r30, 0xA0	; 160
 35e:	ff 4f       	sbci	r31, 0xFF	; 255
 360:	60 81       	ld	r22, Z
 362:	fe 01       	movw	r30, r28
 364:	e0 5a       	subi	r30, 0xA0	; 160
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	80 81       	ld	r24, Z
 36a:	0e 94 1b 04 	call	0x836	; 0x836 <MDIO_voidGetPinValue>
 36e:	88 23       	and	r24, r24
 370:	a1 f3       	breq	.-24     	; 0x35a <EUKeypad_voidKeyPressed+0x74>
				
				if(keypad_buttons [r][c] != INVALID) // if the user pressed on a valid value
 372:	f7 01       	movw	r30, r14
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	e9 54       	subi	r30, 0x49	; 73
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
 380:	ea 0d       	add	r30, r10
 382:	fb 1d       	adc	r31, r11
 384:	80 81       	ld	r24, Z
 386:	89 36       	cpi	r24, 0x69	; 105
 388:	a9 f4       	brne	.+42     	; 0x3b4 <EUKeypad_voidKeyPressed+0xce>
		
	for (u8 c = 0; c < 4; ++c)
	{
		MDIO_voidSetPinValue(col[c * 2], col[c * 2 + 1], LOW); // alternating low on the column pins (pinC0 -> pinC3)
	
		for (u8 r = 0; r < 4; ++r)
 38a:	73 94       	inc	r7
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	87 15       	cp	r24, r7
 390:	80 f6       	brcc	.-96     	; 0x332 <EUKeypad_voidKeyPressed+0x4c>
				if(keypad_buttons [r][c] != INVALID) // if the user pressed on a valid value
					return keypad_buttons [r][c];

			}
		}
		MDIO_voidSetPinValue(col[c * 2],col[c * 2 + 1], HIGH);
 392:	d4 01       	movw	r26, r8
 394:	a8 59       	subi	r26, 0x98	; 152
 396:	bf 4f       	sbci	r27, 0xFF	; 255
 398:	f6 01       	movw	r30, r12
 39a:	e8 59       	subi	r30, 0x98	; 152
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	6c 91       	ld	r22, X
 3a2:	80 81       	ld	r24, Z
 3a4:	0e 94 96 03 	call	0x72c	; 0x72c <MDIO_voidSetPinValue>
}

u8 EUKeypad_voidKeyPressed (void)
{
		
	for (u8 c = 0; c < 4; ++c)
 3a8:	63 94       	inc	r6
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	86 15       	cp	r24, r6
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <EUKeypad_voidKeyPressed+0xcc>
 3b0:	aa cf       	rjmp	.-172    	; 0x306 <EUKeypad_voidKeyPressed+0x20>

			}
		}
		MDIO_voidSetPinValue(col[c * 2],col[c * 2 + 1], HIGH);
	}
	return NONE;
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	ff 90       	pop	r15
 3be:	ef 90       	pop	r14
 3c0:	df 90       	pop	r13
 3c2:	cf 90       	pop	r12
 3c4:	bf 90       	pop	r11
 3c6:	af 90       	pop	r10
 3c8:	9f 90       	pop	r9
 3ca:	8f 90       	pop	r8
 3cc:	7f 90       	pop	r7
 3ce:	6f 90       	pop	r6
 3d0:	08 95       	ret

000003d2 <EULCD_voidLCDWriteCommand>:
	EULCD_voidLCDWriteCommand(CURSOR_OFF);

}

void EULCD_voidLCDWriteCommand(uint8 command){
	CLEAR_BIT(LCD_CTRL_PORT, RS);
 3d2:	98 b3       	in	r25, 0x18	; 24
 3d4:	9e 7f       	andi	r25, 0xFE	; 254
 3d6:	98 bb       	out	0x18, r25	; 24
	CLEAR_BIT(LCD_CTRL_PORT, RW);
 3d8:	98 b3       	in	r25, 0x18	; 24
 3da:	9d 7f       	andi	r25, 0xFD	; 253
 3dc:	98 bb       	out	0x18, r25	; 24
 3de:	ef ec       	ldi	r30, 0xCF	; 207
 3e0:	f7 e0       	ldi	r31, 0x07	; 7
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <EULCD_voidLCDWriteCommand+0x10>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <EULCD_voidLCDWriteCommand+0x16>
 3e8:	00 00       	nop
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
 3ea:	98 b3       	in	r25, 0x18	; 24
 3ec:	94 60       	ori	r25, 0x04	; 4
 3ee:	98 bb       	out	0x18, r25	; 24
 3f0:	ef ec       	ldi	r30, 0xCF	; 207
 3f2:	f7 e0       	ldi	r31, 0x07	; 7
 3f4:	31 97       	sbiw	r30, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <EULCD_voidLCDWriteCommand+0x22>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <EULCD_voidLCDWriteCommand+0x28>
 3fa:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT, E);
		_delay_ms(1);
	#elif (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
 3fc:	98 b3       	in	r25, 0x18	; 24
 3fe:	9f 70       	andi	r25, 0x0F	; 15
 400:	28 2f       	mov	r18, r24
 402:	20 7f       	andi	r18, 0xF0	; 240
 404:	92 2b       	or	r25, r18
 406:	98 bb       	out	0x18, r25	; 24
 408:	ef ec       	ldi	r30, 0xCF	; 207
 40a:	f7 e0       	ldi	r31, 0x07	; 7
 40c:	31 97       	sbiw	r30, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
			_delay_ms(1);
			CLEAR_BIT(LCD_CTRL_PORT, E);
 414:	98 b3       	in	r25, 0x18	; 24
 416:	9b 7f       	andi	r25, 0xFB	; 251
 418:	98 bb       	out	0x18, r25	; 24
 41a:	ef ec       	ldi	r30, 0xCF	; 207
 41c:	f7 e0       	ldi	r31, 0x07	; 7
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 424:	00 00       	nop
			_delay_ms(1);
			SET_BIT(LCD_CTRL_PORT, E);
 426:	98 b3       	in	r25, 0x18	; 24
 428:	94 60       	ori	r25, 0x04	; 4
 42a:	98 bb       	out	0x18, r25	; 24
 42c:	ef ec       	ldi	r30, 0xCF	; 207
 42e:	f7 e0       	ldi	r31, 0x07	; 7
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 436:	00 00       	nop
			_delay_ms(1);
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command << 4);
 438:	28 b3       	in	r18, 0x18	; 24
 43a:	f0 e1       	ldi	r31, 0x10	; 16
 43c:	8f 9f       	mul	r24, r31
 43e:	c0 01       	movw	r24, r0
 440:	11 24       	eor	r1, r1
 442:	92 2f       	mov	r25, r18
 444:	9f 70       	andi	r25, 0x0F	; 15
 446:	89 2b       	or	r24, r25
 448:	88 bb       	out	0x18, r24	; 24
 44a:	8f ec       	ldi	r24, 0xCF	; 207
 44c:	97 e0       	ldi	r25, 0x07	; 7
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 454:	00 00       	nop
			_delay_ms(1);
			CLEAR_BIT(LCD_CTRL_PORT, E);
 456:	88 b3       	in	r24, 0x18	; 24
 458:	8b 7f       	andi	r24, 0xFB	; 251
 45a:	88 bb       	out	0x18, r24	; 24
 45c:	ef ec       	ldi	r30, 0xCF	; 207
 45e:	f7 e0       	ldi	r31, 0x07	; 7
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 466:	00 00       	nop
 468:	08 95       	ret

0000046a <EULLCD_voidLCDInit>:
#include"lcd.h"

void EULLCD_voidLCDInit(){
	LCD_CTRL_PORT_DIR |= (1<<RS) | (1<<E) | (1<<RW);
 46a:	87 b3       	in	r24, 0x17	; 23
 46c:	87 60       	ori	r24, 0x07	; 7
 46e:	87 bb       	out	0x17, r24	; 23
	#if (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF;
		EULCD_voidLCDWriteCommand(TWO_LINES_EIGHT_BITS_MODE);
	#elif (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT
			LCD_DATA_PORT_DIR |= 0xF0;
 470:	87 b3       	in	r24, 0x17	; 23
 472:	80 6f       	ori	r24, 0xF0	; 240
 474:	87 bb       	out	0x17, r24	; 23
		#else
			LCD_DATA_PORT_DIR |= 0x0F;
		#endif
		EULCD_voidLCDWriteCommand(FOUR_BITS_DATA_MODE);
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EULCD_voidLCDWriteCommand>
		EULCD_voidLCDWriteCommand(TWO_LINES_FOUR_BITS_MODE);
 47c:	88 e2       	ldi	r24, 0x28	; 40
 47e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EULCD_voidLCDWriteCommand>
	#endif
	EULCD_voidLCDWriteCommand(CLEAR_SCREEN);
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EULCD_voidLCDWriteCommand>
	EULCD_voidLCDWriteCommand(CURSOR_OFF);
 488:	8c e0       	ldi	r24, 0x0C	; 12
 48a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EULCD_voidLCDWriteCommand>
 48e:	08 95       	ret

00000490 <EULCD_voidLCDWriteChar>:
		#endif
	#endif
}

void EULCD_voidLCDWriteChar(uint8 character){
	SET_BIT(LCD_CTRL_PORT, RS);
 490:	98 b3       	in	r25, 0x18	; 24
 492:	91 60       	ori	r25, 0x01	; 1
 494:	98 bb       	out	0x18, r25	; 24
	CLEAR_BIT(LCD_CTRL_PORT, RW);
 496:	98 b3       	in	r25, 0x18	; 24
 498:	9d 7f       	andi	r25, 0xFD	; 253
 49a:	98 bb       	out	0x18, r25	; 24
 49c:	ef ec       	ldi	r30, 0xCF	; 207
 49e:	f7 e0       	ldi	r31, 0x07	; 7
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <EULCD_voidLCDWriteChar+0x10>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <EULCD_voidLCDWriteChar+0x16>
 4a6:	00 00       	nop
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
 4a8:	98 b3       	in	r25, 0x18	; 24
 4aa:	94 60       	ori	r25, 0x04	; 4
 4ac:	98 bb       	out	0x18, r25	; 24
 4ae:	ef ec       	ldi	r30, 0xCF	; 207
 4b0:	f7 e0       	ldi	r31, 0x07	; 7
 4b2:	31 97       	sbiw	r30, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <EULCD_voidLCDWriteChar+0x22>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <EULCD_voidLCDWriteChar+0x28>
 4b8:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT, E);
		_delay_ms(1);
	#elif (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (character & 0xF0);
 4ba:	98 b3       	in	r25, 0x18	; 24
 4bc:	9f 70       	andi	r25, 0x0F	; 15
 4be:	28 2f       	mov	r18, r24
 4c0:	20 7f       	andi	r18, 0xF0	; 240
 4c2:	92 2b       	or	r25, r18
 4c4:	98 bb       	out	0x18, r25	; 24
 4c6:	ef ec       	ldi	r30, 0xCF	; 207
 4c8:	f7 e0       	ldi	r31, 0x07	; 7
 4ca:	31 97       	sbiw	r30, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <EULCD_voidLCDWriteChar+0x3a>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <EULCD_voidLCDWriteChar+0x40>
 4d0:	00 00       	nop
			_delay_ms(1);
			CLEAR_BIT(LCD_CTRL_PORT, E);
 4d2:	98 b3       	in	r25, 0x18	; 24
 4d4:	9b 7f       	andi	r25, 0xFB	; 251
 4d6:	98 bb       	out	0x18, r25	; 24
 4d8:	ef ec       	ldi	r30, 0xCF	; 207
 4da:	f7 e0       	ldi	r31, 0x07	; 7
 4dc:	31 97       	sbiw	r30, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <EULCD_voidLCDWriteChar+0x4c>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <EULCD_voidLCDWriteChar+0x52>
 4e2:	00 00       	nop
			_delay_ms(1);
			SET_BIT(LCD_CTRL_PORT, E);
 4e4:	98 b3       	in	r25, 0x18	; 24
 4e6:	94 60       	ori	r25, 0x04	; 4
 4e8:	98 bb       	out	0x18, r25	; 24
 4ea:	ef ec       	ldi	r30, 0xCF	; 207
 4ec:	f7 e0       	ldi	r31, 0x07	; 7
 4ee:	31 97       	sbiw	r30, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <EULCD_voidLCDWriteChar+0x5e>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <EULCD_voidLCDWriteChar+0x64>
 4f4:	00 00       	nop
			_delay_ms(1);
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (character << 4);
 4f6:	28 b3       	in	r18, 0x18	; 24
 4f8:	f0 e1       	ldi	r31, 0x10	; 16
 4fa:	8f 9f       	mul	r24, r31
 4fc:	c0 01       	movw	r24, r0
 4fe:	11 24       	eor	r1, r1
 500:	92 2f       	mov	r25, r18
 502:	9f 70       	andi	r25, 0x0F	; 15
 504:	89 2b       	or	r24, r25
 506:	88 bb       	out	0x18, r24	; 24
 508:	8f ec       	ldi	r24, 0xCF	; 207
 50a:	97 e0       	ldi	r25, 0x07	; 7
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <EULCD_voidLCDWriteChar+0x7c>
 510:	00 c0       	rjmp	.+0      	; 0x512 <EULCD_voidLCDWriteChar+0x82>
 512:	00 00       	nop
			_delay_ms(1);
			CLEAR_BIT(LCD_CTRL_PORT, E);
 514:	88 b3       	in	r24, 0x18	; 24
 516:	8b 7f       	andi	r24, 0xFB	; 251
 518:	88 bb       	out	0x18, r24	; 24
 51a:	ef ec       	ldi	r30, 0xCF	; 207
 51c:	f7 e0       	ldi	r31, 0x07	; 7
 51e:	31 97       	sbiw	r30, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <EULCD_voidLCDWriteChar+0x8e>
 522:	00 c0       	rjmp	.+0      	; 0x524 <EULCD_voidLCDWriteChar+0x94>
 524:	00 00       	nop
 526:	08 95       	ret

00000528 <EULCD_voidLCDWriteString>:
			_delay_ms(1);
		#endif
	#endif
}

void EULCD_voidLCDWriteString (uint8 *str){
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	ec 01       	movw	r28, r24
	while(*str!='\0'){
 52e:	03 c0       	rjmp	.+6      	; 0x536 <EULCD_voidLCDWriteString+0xe>
		EULCD_voidLCDWriteChar(*str);
 530:	0e 94 48 02 	call	0x490	; 0x490 <EULCD_voidLCDWriteChar>
		str++;
 534:	21 96       	adiw	r28, 0x01	; 1
		#endif
	#endif
}

void EULCD_voidLCDWriteString (uint8 *str){
	while(*str!='\0'){
 536:	88 81       	ld	r24, Y
 538:	81 11       	cpse	r24, r1
 53a:	fa cf       	rjmp	.-12     	; 0x530 <EULCD_voidLCDWriteString+0x8>
		EULCD_voidLCDWriteChar(*str);
		str++;
	}
}
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <EULCD_voidLCDDisplayInteger>:

void EULCD_voidLCDDisplayInteger (int num){
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
 54a:	60 97       	sbiw	r28, 0x10	; 16
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	f8 94       	cli
 550:	de bf       	out	0x3e, r29	; 62
 552:	0f be       	out	0x3f, r0	; 63
 554:	cd bf       	out	0x3d, r28	; 61
	char array[16];
	itoa(num, array, 10);
 556:	4a e0       	ldi	r20, 0x0A	; 10
 558:	50 e0       	ldi	r21, 0x00	; 0
 55a:	be 01       	movw	r22, r28
 55c:	6f 5f       	subi	r22, 0xFF	; 255
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	0e 94 ef 06 	call	0xdde	; 0xdde <itoa>
	EULCD_voidLCDWriteString(array);
 564:	ce 01       	movw	r24, r28
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	0e 94 94 02 	call	0x528	; 0x528 <EULCD_voidLCDWriteString>
}
 56c:	60 96       	adiw	r28, 0x10	; 16
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	de bf       	out	0x3e, r29	; 62
 574:	0f be       	out	0x3f, r0	; 63
 576:	cd bf       	out	0x3d, r28	; 61
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <EULCD_voidLCDGoto>:

void EULCD_voidLCDGoto (uint8 row, uint8 coloumn){
	switch(row){
 57e:	88 23       	and	r24, r24
 580:	19 f0       	breq	.+6      	; 0x588 <EULCD_voidLCDGoto+0xa>
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	31 f0       	breq	.+12     	; 0x592 <EULCD_voidLCDGoto+0x14>
 586:	08 95       	ret
		case 0:
			EULCD_voidLCDWriteCommand(coloumn+127);
 588:	8f e7       	ldi	r24, 0x7F	; 127
 58a:	86 0f       	add	r24, r22
 58c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EULCD_voidLCDWriteCommand>
			break;
 590:	08 95       	ret
		case 1:
			EULCD_voidLCDWriteCommand(coloumn+191);
 592:	8f eb       	ldi	r24, 0xBF	; 191
 594:	86 0f       	add	r24, r22
 596:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EULCD_voidLCDWriteCommand>
 59a:	08 95       	ret

0000059c <EULM35_voidInit>:
* Parameters:(out): Call the ADC initialization function
* Return value	  : none
* Description	  : Function used to make the internal ADC ready to be used
**********************************************************************************************************************************/
void EULM35_voidInit(void){
	MADC_voidInit();
 59c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MADC_voidInit>
 5a0:	08 95       	ret

000005a2 <EULM35_u16LM35ReadValue>:
u16 EULM35_u16LM35ReadValue(u8 copy_u8ChannelNum)
{
	u16 Local_u16DigitalValue = 0 ;
	u16 Local_u16AnalogValue ;
	u8 Local_u16Temperature ;
	Local_u16DigitalValue = MADC_u16Read(copy_u8ChannelNum) ;
 5a2:	0e 94 03 03 	call	0x606	; 0x606 <MADC_u16Read>
	Local_u16AnalogValue = (Local_u16DigitalValue * VREF) / 1024 ;
 5a6:	9c 01       	movw	r18, r24
 5a8:	a8 e8       	ldi	r26, 0x88	; 136
 5aa:	b3 e1       	ldi	r27, 0x13	; 19
 5ac:	0e 94 c2 06 	call	0xd84	; 0xd84 <__umulhisi3>
 5b0:	9b 01       	movw	r18, r22
 5b2:	ac 01       	movw	r20, r24
 5b4:	01 2e       	mov	r0, r17
 5b6:	1a e0       	ldi	r17, 0x0A	; 10
 5b8:	56 95       	lsr	r21
 5ba:	47 95       	ror	r20
 5bc:	37 95       	ror	r19
 5be:	27 95       	ror	r18
 5c0:	1a 95       	dec	r17
 5c2:	d1 f7       	brne	.-12     	; 0x5b8 <EULM35_u16LM35ReadValue+0x16>
 5c4:	10 2d       	mov	r17, r0
	Local_u16Temperature = Local_u16AnalogValue/10  ;
 5c6:	ad ec       	ldi	r26, 0xCD	; 205
 5c8:	bc ec       	ldi	r27, 0xCC	; 204
 5ca:	0e 94 c2 06 	call	0xd84	; 0xd84 <__umulhisi3>
 5ce:	96 95       	lsr	r25
 5d0:	87 95       	ror	r24
 5d2:	96 95       	lsr	r25
 5d4:	87 95       	ror	r24
 5d6:	96 95       	lsr	r25
 5d8:	87 95       	ror	r24
	return Local_u16Temperature;
 5da:	99 27       	eor	r25, r25
 5dc:	08 95       	ret

000005de <main>:
#include "APP/APP.h"


int main(void)
{
    APP_Init ();
 5de:	0e 94 59 00 	call	0xb2	; 0xb2 <APP_Init>
    while (1) 
    {
		APP_update();
 5e2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <APP_update>
 5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <main+0x4>

000005e8 <MADC_voidInit>:
	{
		ADCMUX &= ~(1<<REFS1) & ~((1<<REFS0));
	}
	else if (VOLTAGE_REF == AVCC)
	{
		ADCMUX &= ~(1<<REFS1);
 5e8:	87 b1       	in	r24, 0x07	; 7
 5ea:	8f 77       	andi	r24, 0x7F	; 127
 5ec:	87 b9       	out	0x07, r24	; 7
		ADCMUX |= (1<<REFS0);
 5ee:	87 b1       	in	r24, 0x07	; 7
 5f0:	80 64       	ori	r24, 0x40	; 64
 5f2:	87 b9       	out	0x07, r24	; 7
	else if (VOLTAGE_REF == INTERNAL_2_HALF_VOLT)
	{
		ADCMUX |= (1<<REFS1) | (1<<REFS0);
	}

	ADCSRA |= ADC_PRE_SCALER; // select Pre-Scalaer
 5f4:	86 b1       	in	r24, 0x06	; 6
 5f6:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN); // Enable ADC
 5f8:	86 b1       	in	r24, 0x06	; 6
 5fa:	80 68       	ori	r24, 0x80	; 128
 5fc:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADSC); // Start Conversion
 5fe:	86 b1       	in	r24, 0x06	; 6
 600:	80 64       	ori	r24, 0x40	; 64
 602:	86 b9       	out	0x06, r24	; 6
 604:	08 95       	ret

00000606 <MADC_u16Read>:
Output args   : none
Return value  : integer value from the ADC
*/
u16 MADC_u16Read(u8 copy_u8ChannelId )
{
	ADCMUX &= 0xf0; // Clear Channel Number
 606:	97 b1       	in	r25, 0x07	; 7
 608:	90 7f       	andi	r25, 0xF0	; 240
 60a:	97 b9       	out	0x07, r25	; 7
	ADCMUX |= copy_u8ChannelId; // Choose Channel ID
 60c:	97 b1       	in	r25, 0x07	; 7
 60e:	89 2b       	or	r24, r25
 610:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); // Start Conversion
 612:	86 b1       	in	r24, 0x06	; 6
 614:	80 64       	ori	r24, 0x40	; 64
 616:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1<<ADSC)); // Waiting For The Conversation To Finish
 618:	36 99       	sbic	0x06, 6	; 6
 61a:	fe cf       	rjmp	.-4      	; 0x618 <MADC_u16Read+0x12>

	return ADC;  //Get The Digital Value form ADCL and ADCH Registers
 61c:	84 b1       	in	r24, 0x04	; 4
 61e:	95 b1       	in	r25, 0x05	; 5
 620:	08 95       	ret

00000622 <MDIO_voidSetPinDirection>:
		switch (copy_u8Port)
				{
					case GPIOA :	PORTA_REGISTER = copy_u8Value ;  break ;
					case GPIOB :	PORTB_REGISTER = copy_u8Value ;	break ;
					case GPIOC :	PORTC_REGISTER = copy_u8Value ;  break ;
					case GPIOD :	PORTD_REGISTER = copy_u8Value ;  break ;
 622:	41 30       	cpi	r20, 0x01	; 1
 624:	09 f0       	breq	.+2      	; 0x628 <MDIO_voidSetPinDirection+0x6>
 626:	40 c0       	rjmp	.+128    	; 0x6a8 <MDIO_voidSetPinDirection+0x86>
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	a1 f0       	breq	.+40     	; 0x654 <MDIO_voidSetPinDirection+0x32>
 62c:	28 f0       	brcs	.+10     	; 0x638 <MDIO_voidSetPinDirection+0x16>
 62e:	82 30       	cpi	r24, 0x02	; 2
 630:	f9 f0       	breq	.+62     	; 0x670 <MDIO_voidSetPinDirection+0x4e>
 632:	83 30       	cpi	r24, 0x03	; 3
 634:	59 f1       	breq	.+86     	; 0x68c <MDIO_voidSetPinDirection+0x6a>
 636:	08 95       	ret
 638:	68 30       	cpi	r22, 0x08	; 8
 63a:	08 f0       	brcs	.+2      	; 0x63e <MDIO_voidSetPinDirection+0x1c>
 63c:	76 c0       	rjmp	.+236    	; 0x72a <MDIO_voidSetPinDirection+0x108>
 63e:	2a b3       	in	r18, 0x1a	; 26
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <MDIO_voidSetPinDirection+0x28>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	6a 95       	dec	r22
 64c:	e2 f7       	brpl	.-8      	; 0x646 <MDIO_voidSetPinDirection+0x24>
 64e:	82 2b       	or	r24, r18
 650:	8a bb       	out	0x1a, r24	; 26
 652:	08 95       	ret
 654:	68 30       	cpi	r22, 0x08	; 8
 656:	08 f0       	brcs	.+2      	; 0x65a <MDIO_voidSetPinDirection+0x38>
 658:	68 c0       	rjmp	.+208    	; 0x72a <MDIO_voidSetPinDirection+0x108>
 65a:	27 b3       	in	r18, 0x17	; 23
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <MDIO_voidSetPinDirection+0x44>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	6a 95       	dec	r22
 668:	e2 f7       	brpl	.-8      	; 0x662 <MDIO_voidSetPinDirection+0x40>
 66a:	82 2b       	or	r24, r18
 66c:	87 bb       	out	0x17, r24	; 23
 66e:	08 95       	ret
 670:	68 30       	cpi	r22, 0x08	; 8
 672:	08 f0       	brcs	.+2      	; 0x676 <MDIO_voidSetPinDirection+0x54>
 674:	5a c0       	rjmp	.+180    	; 0x72a <MDIO_voidSetPinDirection+0x108>
 676:	24 b3       	in	r18, 0x14	; 20
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <MDIO_voidSetPinDirection+0x60>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	6a 95       	dec	r22
 684:	e2 f7       	brpl	.-8      	; 0x67e <MDIO_voidSetPinDirection+0x5c>
 686:	82 2b       	or	r24, r18
 688:	84 bb       	out	0x14, r24	; 20
 68a:	08 95       	ret
 68c:	68 30       	cpi	r22, 0x08	; 8
 68e:	08 f0       	brcs	.+2      	; 0x692 <MDIO_voidSetPinDirection+0x70>
 690:	4c c0       	rjmp	.+152    	; 0x72a <MDIO_voidSetPinDirection+0x108>
 692:	21 b3       	in	r18, 0x11	; 17
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <MDIO_voidSetPinDirection+0x7c>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	6a 95       	dec	r22
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <MDIO_voidSetPinDirection+0x78>
 6a2:	82 2b       	or	r24, r18
 6a4:	81 bb       	out	0x11, r24	; 17
 6a6:	08 95       	ret
 6a8:	41 11       	cpse	r20, r1
 6aa:	3f c0       	rjmp	.+126    	; 0x72a <MDIO_voidSetPinDirection+0x108>
 6ac:	81 30       	cpi	r24, 0x01	; 1
 6ae:	a1 f0       	breq	.+40     	; 0x6d8 <MDIO_voidSetPinDirection+0xb6>
 6b0:	28 f0       	brcs	.+10     	; 0x6bc <MDIO_voidSetPinDirection+0x9a>
 6b2:	82 30       	cpi	r24, 0x02	; 2
 6b4:	f9 f0       	breq	.+62     	; 0x6f4 <MDIO_voidSetPinDirection+0xd2>
 6b6:	83 30       	cpi	r24, 0x03	; 3
 6b8:	59 f1       	breq	.+86     	; 0x710 <MDIO_voidSetPinDirection+0xee>
 6ba:	08 95       	ret
 6bc:	68 30       	cpi	r22, 0x08	; 8
 6be:	a8 f5       	brcc	.+106    	; 0x72a <MDIO_voidSetPinDirection+0x108>
 6c0:	2a b3       	in	r18, 0x1a	; 26
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <MDIO_voidSetPinDirection+0xaa>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <MDIO_voidSetPinDirection+0xa6>
 6d0:	80 95       	com	r24
 6d2:	82 23       	and	r24, r18
 6d4:	8a bb       	out	0x1a, r24	; 26
 6d6:	08 95       	ret
 6d8:	68 30       	cpi	r22, 0x08	; 8
 6da:	38 f5       	brcc	.+78     	; 0x72a <MDIO_voidSetPinDirection+0x108>
 6dc:	27 b3       	in	r18, 0x17	; 23
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <MDIO_voidSetPinDirection+0xc6>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	6a 95       	dec	r22
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <MDIO_voidSetPinDirection+0xc2>
 6ec:	80 95       	com	r24
 6ee:	82 23       	and	r24, r18
 6f0:	87 bb       	out	0x17, r24	; 23
 6f2:	08 95       	ret
 6f4:	68 30       	cpi	r22, 0x08	; 8
 6f6:	c8 f4       	brcc	.+50     	; 0x72a <MDIO_voidSetPinDirection+0x108>
 6f8:	24 b3       	in	r18, 0x14	; 20
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <MDIO_voidSetPinDirection+0xe2>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	6a 95       	dec	r22
 706:	e2 f7       	brpl	.-8      	; 0x700 <MDIO_voidSetPinDirection+0xde>
 708:	80 95       	com	r24
 70a:	82 23       	and	r24, r18
 70c:	84 bb       	out	0x14, r24	; 20
 70e:	08 95       	ret
 710:	68 30       	cpi	r22, 0x08	; 8
 712:	58 f4       	brcc	.+22     	; 0x72a <MDIO_voidSetPinDirection+0x108>
 714:	21 b3       	in	r18, 0x11	; 17
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <MDIO_voidSetPinDirection+0xfe>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <MDIO_voidSetPinDirection+0xfa>
 724:	80 95       	com	r24
 726:	82 23       	and	r24, r18
 728:	81 bb       	out	0x11, r24	; 17
 72a:	08 95       	ret

0000072c <MDIO_voidSetPinValue>:
 72c:	41 30       	cpi	r20, 0x01	; 1
 72e:	09 f0       	breq	.+2      	; 0x732 <MDIO_voidSetPinValue+0x6>
 730:	40 c0       	rjmp	.+128    	; 0x7b2 <MDIO_voidSetPinValue+0x86>
 732:	81 30       	cpi	r24, 0x01	; 1
 734:	a1 f0       	breq	.+40     	; 0x75e <MDIO_voidSetPinValue+0x32>
 736:	28 f0       	brcs	.+10     	; 0x742 <MDIO_voidSetPinValue+0x16>
 738:	82 30       	cpi	r24, 0x02	; 2
 73a:	f9 f0       	breq	.+62     	; 0x77a <MDIO_voidSetPinValue+0x4e>
 73c:	83 30       	cpi	r24, 0x03	; 3
 73e:	59 f1       	breq	.+86     	; 0x796 <MDIO_voidSetPinValue+0x6a>
 740:	08 95       	ret
 742:	68 30       	cpi	r22, 0x08	; 8
 744:	08 f0       	brcs	.+2      	; 0x748 <MDIO_voidSetPinValue+0x1c>
 746:	76 c0       	rjmp	.+236    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 748:	2b b3       	in	r18, 0x1b	; 27
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <MDIO_voidSetPinValue+0x28>
 750:	88 0f       	add	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <MDIO_voidSetPinValue+0x24>
 758:	82 2b       	or	r24, r18
 75a:	8b bb       	out	0x1b, r24	; 27
 75c:	08 95       	ret
 75e:	68 30       	cpi	r22, 0x08	; 8
 760:	08 f0       	brcs	.+2      	; 0x764 <MDIO_voidSetPinValue+0x38>
 762:	68 c0       	rjmp	.+208    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 764:	28 b3       	in	r18, 0x18	; 24
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <MDIO_voidSetPinValue+0x44>
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	6a 95       	dec	r22
 772:	e2 f7       	brpl	.-8      	; 0x76c <MDIO_voidSetPinValue+0x40>
 774:	82 2b       	or	r24, r18
 776:	88 bb       	out	0x18, r24	; 24
 778:	08 95       	ret
 77a:	68 30       	cpi	r22, 0x08	; 8
 77c:	08 f0       	brcs	.+2      	; 0x780 <MDIO_voidSetPinValue+0x54>
 77e:	5a c0       	rjmp	.+180    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 780:	25 b3       	in	r18, 0x15	; 21
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	02 c0       	rjmp	.+4      	; 0x78c <MDIO_voidSetPinValue+0x60>
 788:	88 0f       	add	r24, r24
 78a:	99 1f       	adc	r25, r25
 78c:	6a 95       	dec	r22
 78e:	e2 f7       	brpl	.-8      	; 0x788 <MDIO_voidSetPinValue+0x5c>
 790:	82 2b       	or	r24, r18
 792:	85 bb       	out	0x15, r24	; 21
 794:	08 95       	ret
 796:	68 30       	cpi	r22, 0x08	; 8
 798:	08 f0       	brcs	.+2      	; 0x79c <MDIO_voidSetPinValue+0x70>
 79a:	4c c0       	rjmp	.+152    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 79c:	22 b3       	in	r18, 0x12	; 18
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <MDIO_voidSetPinValue+0x7c>
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	6a 95       	dec	r22
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <MDIO_voidSetPinValue+0x78>
 7ac:	82 2b       	or	r24, r18
 7ae:	82 bb       	out	0x12, r24	; 18
 7b0:	08 95       	ret
 7b2:	41 11       	cpse	r20, r1
 7b4:	3f c0       	rjmp	.+126    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7b6:	81 30       	cpi	r24, 0x01	; 1
 7b8:	a1 f0       	breq	.+40     	; 0x7e2 <MDIO_voidSetPinValue+0xb6>
 7ba:	28 f0       	brcs	.+10     	; 0x7c6 <MDIO_voidSetPinValue+0x9a>
 7bc:	82 30       	cpi	r24, 0x02	; 2
 7be:	f9 f0       	breq	.+62     	; 0x7fe <MDIO_voidSetPinValue+0xd2>
 7c0:	83 30       	cpi	r24, 0x03	; 3
 7c2:	59 f1       	breq	.+86     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7c4:	08 95       	ret
 7c6:	68 30       	cpi	r22, 0x08	; 8
 7c8:	a8 f5       	brcc	.+106    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7ca:	2b b3       	in	r18, 0x1b	; 27
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <MDIO_voidSetPinValue+0xaa>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	6a 95       	dec	r22
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <MDIO_voidSetPinValue+0xa6>
 7da:	80 95       	com	r24
 7dc:	82 23       	and	r24, r18
 7de:	8b bb       	out	0x1b, r24	; 27
 7e0:	08 95       	ret
 7e2:	68 30       	cpi	r22, 0x08	; 8
 7e4:	38 f5       	brcc	.+78     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7e6:	28 b3       	in	r18, 0x18	; 24
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <MDIO_voidSetPinValue+0xc6>
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	6a 95       	dec	r22
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <MDIO_voidSetPinValue+0xc2>
 7f6:	80 95       	com	r24
 7f8:	82 23       	and	r24, r18
 7fa:	88 bb       	out	0x18, r24	; 24
 7fc:	08 95       	ret
 7fe:	68 30       	cpi	r22, 0x08	; 8
 800:	c8 f4       	brcc	.+50     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 802:	25 b3       	in	r18, 0x15	; 21
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	6a 95       	dec	r22
 810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 812:	80 95       	com	r24
 814:	82 23       	and	r24, r18
 816:	85 bb       	out	0x15, r24	; 21
 818:	08 95       	ret
 81a:	68 30       	cpi	r22, 0x08	; 8
 81c:	58 f4       	brcc	.+22     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 81e:	22 b3       	in	r18, 0x12	; 18
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	6a 95       	dec	r22
 82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	80 95       	com	r24
 830:	82 23       	and	r24, r18
 832:	82 bb       	out	0x12, r24	; 18
 834:	08 95       	ret

00000836 <MDIO_voidGetPinValue>:
**********************************************************************************************************************************/

u8 MDIO_voidGetPinValue (u8 copy_u8Port , u8 copy_u8Pin )
{
	u8 LocGetValue = 0 ;
	switch (copy_u8Port )
 836:	81 30       	cpi	r24, 0x01	; 1
 838:	79 f0       	breq	.+30     	; 0x858 <MDIO_voidGetPinValue+0x22>
 83a:	28 f0       	brcs	.+10     	; 0x846 <MDIO_voidGetPinValue+0x10>
 83c:	82 30       	cpi	r24, 0x02	; 2
 83e:	a9 f0       	breq	.+42     	; 0x86a <__stack+0xb>
 840:	83 30       	cpi	r24, 0x03	; 3
 842:	e1 f0       	breq	.+56     	; 0x87c <__stack+0x1d>
 844:	24 c0       	rjmp	.+72     	; 0x88e <__stack+0x2f>
	{
		case GPIOA : LocGetValue = GET_BIT (PINA_REGISTER ,  copy_u8Pin ); break ;
 846:	89 b3       	in	r24, 0x19	; 25
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <MDIO_voidGetPinValue+0x1a>
 84c:	95 95       	asr	r25
 84e:	87 95       	ror	r24
 850:	6a 95       	dec	r22
 852:	e2 f7       	brpl	.-8      	; 0x84c <MDIO_voidGetPinValue+0x16>
 854:	81 70       	andi	r24, 0x01	; 1
 856:	08 95       	ret
		case GPIOB : LocGetValue = GET_BIT (PINB_REGISTER ,  copy_u8Pin ); break ;
 858:	86 b3       	in	r24, 0x16	; 22
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	95 95       	asr	r25
 860:	87 95       	ror	r24
 862:	6a 95       	dec	r22
 864:	e2 f7       	brpl	.-8      	; 0x85e <MDIO_voidGetPinValue+0x28>
 866:	81 70       	andi	r24, 0x01	; 1
 868:	08 95       	ret
		case GPIOC : LocGetValue = GET_BIT (PINC_REGISTER ,  copy_u8Pin ); break ;
 86a:	83 b3       	in	r24, 0x13	; 19
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
 870:	95 95       	asr	r25
 872:	87 95       	ror	r24
 874:	6a 95       	dec	r22
 876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
 878:	81 70       	andi	r24, 0x01	; 1
 87a:	08 95       	ret
		case GPIOD : LocGetValue = GET_BIT (PIND_REGISTER ,  copy_u8Pin ); break ;
 87c:	80 b3       	in	r24, 0x10	; 16
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	95 95       	asr	r25
 884:	87 95       	ror	r24
 886:	6a 95       	dec	r22
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	81 70       	andi	r24, 0x01	; 1
 88c:	08 95       	ret
* Description	  : Function used to get the Specific Pin Value High of Low 
**********************************************************************************************************************************/

u8 MDIO_voidGetPinValue (u8 copy_u8Port , u8 copy_u8Pin )
{
	u8 LocGetValue = 0 ;
 88e:	80 e0       	ldi	r24, 0x00	; 0
		case GPIOC : LocGetValue = GET_BIT (PINC_REGISTER ,  copy_u8Pin ); break ;
		case GPIOD : LocGetValue = GET_BIT (PIND_REGISTER ,  copy_u8Pin ); break ;
		
	}
	return LocGetValue ; 
}
 890:	08 95       	ret

00000892 <MPWM_voidPwmInit>:
	TCCR0 &= ~(1<<TCCR0_CS01);
	TCCR0 &= ~(1<<TCCR0_CS00);
	#elif (TIMER0 == ENABLE)
	#if (PWM0_TYPE == FAST_PWM)
	//Set Fast PWM Mode
	TCCR0 |= (1<<TCCR0_WGM00) ;
 892:	83 b7       	in	r24, 0x33	; 51
 894:	80 64       	ori	r24, 0x40	; 64
 896:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<TCCR0_WGM01);
 898:	83 b7       	in	r24, 0x33	; 51
 89a:	88 60       	ori	r24, 0x08	; 8
 89c:	83 bf       	out	0x33, r24	; 51
	/* Make PIN B3 output */
	MDIO_voidSetPinDirection(GPIOB , PIN3 , HIGH);
 89e:	41 e0       	ldi	r20, 0x01	; 1
 8a0:	63 e0       	ldi	r22, 0x03	; 3
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	0e 94 11 03 	call	0x622	; 0x622 <MDIO_voidSetPinDirection>
	/* Make PIN B3 output */
	MDIO_voidSetPinDirection(GPIOB , PIN3 , HIGH);
	#endif 
	
	#if (PWM0_MODE == NON_INVERTING)
	TCCR0 |= (1<<TCCR0_COM01);
 8a8:	83 b7       	in	r24, 0x33	; 51
 8aa:	80 62       	ori	r24, 0x20	; 32
 8ac:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<TCCR0_COM00);
 8ae:	83 b7       	in	r24, 0x33	; 51
 8b0:	8f 7e       	andi	r24, 0xEF	; 239
 8b2:	83 bf       	out	0x33, r24	; 51
	#endif
	
	#endif 
	
	#if (TIMER1 == DISABLE )
	TCCR1B &= ~ (1<<TCCR1B_CS10);
 8b4:	8e b5       	in	r24, 0x2e	; 46
 8b6:	8e 7f       	andi	r24, 0xFE	; 254
 8b8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~ (1<<TCCR1B_CS11);
 8ba:	8e b5       	in	r24, 0x2e	; 46
 8bc:	8d 7f       	andi	r24, 0xFD	; 253
 8be:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~ (1<<TCCR1B_CS12);
 8c0:	8e b5       	in	r24, 0x2e	; 46
 8c2:	8b 7f       	andi	r24, 0xFB	; 251
 8c4:	8e bd       	out	0x2e, r24	; 46
 8c6:	08 95       	ret

000008c8 <MPWM_voidSetDutyCycle>:
void MPWM_voidSetDutyCycle (float copy_u8DutyPercentage )
{
	float local_u8DutyValue = 0 ;
	if (TIMER0 == ENABLE)
	{
		local_u8DutyValue=((copy_u8DutyPercentage/100) * PWM0_MAX_VALUE );
 8c8:	20 e0       	ldi	r18, 0x00	; 0
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	48 ec       	ldi	r20, 0xC8	; 200
 8ce:	52 e4       	ldi	r21, 0x42	; 66
 8d0:	0e 94 26 05 	call	0xa4c	; 0xa4c <__divsf3>
 8d4:	20 e0       	ldi	r18, 0x00	; 0
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	4f e7       	ldi	r20, 0x7F	; 127
 8da:	53 e4       	ldi	r21, 0x43	; 67
 8dc:	0e 94 55 06 	call	0xcaa	; 0xcaa <__mulsf3>
		OCR0 = local_u8DutyValue ;
 8e0:	0e 94 98 05 	call	0xb30	; 0xb30 <__fixunssfsi>
 8e4:	6c bf       	out	0x3c, r22	; 60
 8e6:	08 95       	ret

000008e8 <MPWM_voidStartPWM>:
}
void MPWM_voidStartPWM(void)
{
	#if (TIMER0 == ENABLE)
	/* Select the Prescaler value to start the timer to count */
	TCCR0 |= TIMER0_CLOCK_SELECT;
 8e8:	83 b7       	in	r24, 0x33	; 51
 8ea:	82 60       	ori	r24, 0x02	; 2
 8ec:	83 bf       	out	0x33, r24	; 51
 8ee:	08 95       	ret

000008f0 <MPWM_voidStopPWM>:
}

void MPWM_voidStopPWM(void)
{
	#if (TIMER0 == ENABLE)
	TCCR0 &= 0b11111000;
 8f0:	83 b7       	in	r24, 0x33	; 51
 8f2:	88 7f       	andi	r24, 0xF8	; 248
 8f4:	83 bf       	out	0x33, r24	; 51
 8f6:	08 95       	ret

000008f8 <__vector_7>:
}

/* Vector Function fot Timer 0 and Timer 1 Intterrupts */

void __vector_7  (void)
{
 8f8:	1f 92       	push	r1
 8fa:	0f 92       	push	r0
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	0f 92       	push	r0
 900:	11 24       	eor	r1, r1
 902:	2f 93       	push	r18
 904:	3f 93       	push	r19
 906:	4f 93       	push	r20
 908:	5f 93       	push	r21
 90a:	6f 93       	push	r22
 90c:	7f 93       	push	r23
 90e:	8f 93       	push	r24
 910:	9f 93       	push	r25
 912:	af 93       	push	r26
 914:	bf 93       	push	r27
 916:	ef 93       	push	r30
 918:	ff 93       	push	r31
	if (ptr != NULL )
 91a:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <ptr>
 91e:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <ptr+0x1>
 922:	30 97       	sbiw	r30, 0x00	; 0
 924:	09 f0       	breq	.+2      	; 0x928 <__vector_7+0x30>
	{
		ptr();
 926:	09 95       	icall
	}
}
 928:	ff 91       	pop	r31
 92a:	ef 91       	pop	r30
 92c:	bf 91       	pop	r27
 92e:	af 91       	pop	r26
 930:	9f 91       	pop	r25
 932:	8f 91       	pop	r24
 934:	7f 91       	pop	r23
 936:	6f 91       	pop	r22
 938:	5f 91       	pop	r21
 93a:	4f 91       	pop	r20
 93c:	3f 91       	pop	r19
 93e:	2f 91       	pop	r18
 940:	0f 90       	pop	r0
 942:	0f be       	out	0x3f, r0	; 63
 944:	0f 90       	pop	r0
 946:	1f 90       	pop	r1
 948:	18 95       	reti

0000094a <__vector_8>:
void __vector_8 (void)
{
 94a:	1f 92       	push	r1
 94c:	0f 92       	push	r0
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	0f 92       	push	r0
 952:	11 24       	eor	r1, r1
 954:	2f 93       	push	r18
 956:	3f 93       	push	r19
 958:	4f 93       	push	r20
 95a:	5f 93       	push	r21
 95c:	6f 93       	push	r22
 95e:	7f 93       	push	r23
 960:	8f 93       	push	r24
 962:	9f 93       	push	r25
 964:	af 93       	push	r26
 966:	bf 93       	push	r27
 968:	ef 93       	push	r30
 96a:	ff 93       	push	r31
	if (ptr != NULL )
 96c:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <ptr>
 970:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <ptr+0x1>
 974:	30 97       	sbiw	r30, 0x00	; 0
 976:	09 f0       	breq	.+2      	; 0x97a <__vector_8+0x30>
	{
		ptr();
 978:	09 95       	icall
	}
}
 97a:	ff 91       	pop	r31
 97c:	ef 91       	pop	r30
 97e:	bf 91       	pop	r27
 980:	af 91       	pop	r26
 982:	9f 91       	pop	r25
 984:	8f 91       	pop	r24
 986:	7f 91       	pop	r23
 988:	6f 91       	pop	r22
 98a:	5f 91       	pop	r21
 98c:	4f 91       	pop	r20
 98e:	3f 91       	pop	r19
 990:	2f 91       	pop	r18
 992:	0f 90       	pop	r0
 994:	0f be       	out	0x3f, r0	; 63
 996:	0f 90       	pop	r0
 998:	1f 90       	pop	r1
 99a:	18 95       	reti

0000099c <__vector_9>:
void __vector_9 (void)
{
 99c:	1f 92       	push	r1
 99e:	0f 92       	push	r0
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	0f 92       	push	r0
 9a4:	11 24       	eor	r1, r1
 9a6:	2f 93       	push	r18
 9a8:	3f 93       	push	r19
 9aa:	4f 93       	push	r20
 9ac:	5f 93       	push	r21
 9ae:	6f 93       	push	r22
 9b0:	7f 93       	push	r23
 9b2:	8f 93       	push	r24
 9b4:	9f 93       	push	r25
 9b6:	af 93       	push	r26
 9b8:	bf 93       	push	r27
 9ba:	ef 93       	push	r30
 9bc:	ff 93       	push	r31

		ptr();
 9be:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <ptr>
 9c2:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <ptr+0x1>
 9c6:	09 95       	icall
}
 9c8:	ff 91       	pop	r31
 9ca:	ef 91       	pop	r30
 9cc:	bf 91       	pop	r27
 9ce:	af 91       	pop	r26
 9d0:	9f 91       	pop	r25
 9d2:	8f 91       	pop	r24
 9d4:	7f 91       	pop	r23
 9d6:	6f 91       	pop	r22
 9d8:	5f 91       	pop	r21
 9da:	4f 91       	pop	r20
 9dc:	3f 91       	pop	r19
 9de:	2f 91       	pop	r18
 9e0:	0f 90       	pop	r0
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	0f 90       	pop	r0
 9e6:	1f 90       	pop	r1
 9e8:	18 95       	reti

000009ea <__vector_10>:
void __vector_10 (void)
{
 9ea:	1f 92       	push	r1
 9ec:	0f 92       	push	r0
 9ee:	0f b6       	in	r0, 0x3f	; 63
 9f0:	0f 92       	push	r0
 9f2:	11 24       	eor	r1, r1
 9f4:	2f 93       	push	r18
 9f6:	3f 93       	push	r19
 9f8:	4f 93       	push	r20
 9fa:	5f 93       	push	r21
 9fc:	6f 93       	push	r22
 9fe:	7f 93       	push	r23
 a00:	8f 93       	push	r24
 a02:	9f 93       	push	r25
 a04:	af 93       	push	r26
 a06:	bf 93       	push	r27
 a08:	ef 93       	push	r30
 a0a:	ff 93       	push	r31
	if (ptr != NULL )
 a0c:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <ptr>
 a10:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <ptr+0x1>
 a14:	30 97       	sbiw	r30, 0x00	; 0
 a16:	09 f0       	breq	.+2      	; 0xa1a <__vector_10+0x30>
	{
		ptr();
 a18:	09 95       	icall
	}
}
 a1a:	ff 91       	pop	r31
 a1c:	ef 91       	pop	r30
 a1e:	bf 91       	pop	r27
 a20:	af 91       	pop	r26
 a22:	9f 91       	pop	r25
 a24:	8f 91       	pop	r24
 a26:	7f 91       	pop	r23
 a28:	6f 91       	pop	r22
 a2a:	5f 91       	pop	r21
 a2c:	4f 91       	pop	r20
 a2e:	3f 91       	pop	r19
 a30:	2f 91       	pop	r18
 a32:	0f 90       	pop	r0
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	0f 90       	pop	r0
 a38:	1f 90       	pop	r1
 a3a:	18 95       	reti

00000a3c <__vector_11>:
void __vector_11 (void)
{
	if (ptr != NULL )
 a3c:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <ptr>
 a40:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <ptr+0x1>
 a44:	30 97       	sbiw	r30, 0x00	; 0
 a46:	09 f0       	breq	.+2      	; 0xa4a <__vector_11+0xe>
	{
		ptr();
 a48:	09 95       	icall
 a4a:	08 95       	ret

00000a4c <__divsf3>:
 a4c:	0e 94 3a 05 	call	0xa74	; 0xa74 <__divsf3x>
 a50:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_round>
 a54:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_pscB>
 a58:	58 f0       	brcs	.+22     	; 0xa70 <__divsf3+0x24>
 a5a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fp_pscA>
 a5e:	40 f0       	brcs	.+16     	; 0xa70 <__divsf3+0x24>
 a60:	29 f4       	brne	.+10     	; 0xa6c <__divsf3+0x20>
 a62:	5f 3f       	cpi	r21, 0xFF	; 255
 a64:	29 f0       	breq	.+10     	; 0xa70 <__divsf3+0x24>
 a66:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_inf>
 a6a:	51 11       	cpse	r21, r1
 a6c:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_szero>
 a70:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_nan>

00000a74 <__divsf3x>:
 a74:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_split3>
 a78:	68 f3       	brcs	.-38     	; 0xa54 <__divsf3+0x8>

00000a7a <__divsf3_pse>:
 a7a:	99 23       	and	r25, r25
 a7c:	b1 f3       	breq	.-20     	; 0xa6a <__divsf3+0x1e>
 a7e:	55 23       	and	r21, r21
 a80:	91 f3       	breq	.-28     	; 0xa66 <__divsf3+0x1a>
 a82:	95 1b       	sub	r25, r21
 a84:	55 0b       	sbc	r21, r21
 a86:	bb 27       	eor	r27, r27
 a88:	aa 27       	eor	r26, r26
 a8a:	62 17       	cp	r22, r18
 a8c:	73 07       	cpc	r23, r19
 a8e:	84 07       	cpc	r24, r20
 a90:	38 f0       	brcs	.+14     	; 0xaa0 <__divsf3_pse+0x26>
 a92:	9f 5f       	subi	r25, 0xFF	; 255
 a94:	5f 4f       	sbci	r21, 0xFF	; 255
 a96:	22 0f       	add	r18, r18
 a98:	33 1f       	adc	r19, r19
 a9a:	44 1f       	adc	r20, r20
 a9c:	aa 1f       	adc	r26, r26
 a9e:	a9 f3       	breq	.-22     	; 0xa8a <__divsf3_pse+0x10>
 aa0:	35 d0       	rcall	.+106    	; 0xb0c <__divsf3_pse+0x92>
 aa2:	0e 2e       	mov	r0, r30
 aa4:	3a f0       	brmi	.+14     	; 0xab4 <__divsf3_pse+0x3a>
 aa6:	e0 e8       	ldi	r30, 0x80	; 128
 aa8:	32 d0       	rcall	.+100    	; 0xb0e <__divsf3_pse+0x94>
 aaa:	91 50       	subi	r25, 0x01	; 1
 aac:	50 40       	sbci	r21, 0x00	; 0
 aae:	e6 95       	lsr	r30
 ab0:	00 1c       	adc	r0, r0
 ab2:	ca f7       	brpl	.-14     	; 0xaa6 <__divsf3_pse+0x2c>
 ab4:	2b d0       	rcall	.+86     	; 0xb0c <__divsf3_pse+0x92>
 ab6:	fe 2f       	mov	r31, r30
 ab8:	29 d0       	rcall	.+82     	; 0xb0c <__divsf3_pse+0x92>
 aba:	66 0f       	add	r22, r22
 abc:	77 1f       	adc	r23, r23
 abe:	88 1f       	adc	r24, r24
 ac0:	bb 1f       	adc	r27, r27
 ac2:	26 17       	cp	r18, r22
 ac4:	37 07       	cpc	r19, r23
 ac6:	48 07       	cpc	r20, r24
 ac8:	ab 07       	cpc	r26, r27
 aca:	b0 e8       	ldi	r27, 0x80	; 128
 acc:	09 f0       	breq	.+2      	; 0xad0 <__divsf3_pse+0x56>
 ace:	bb 0b       	sbc	r27, r27
 ad0:	80 2d       	mov	r24, r0
 ad2:	bf 01       	movw	r22, r30
 ad4:	ff 27       	eor	r31, r31
 ad6:	93 58       	subi	r25, 0x83	; 131
 ad8:	5f 4f       	sbci	r21, 0xFF	; 255
 ada:	3a f0       	brmi	.+14     	; 0xaea <__divsf3_pse+0x70>
 adc:	9e 3f       	cpi	r25, 0xFE	; 254
 ade:	51 05       	cpc	r21, r1
 ae0:	78 f0       	brcs	.+30     	; 0xb00 <__divsf3_pse+0x86>
 ae2:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_inf>
 ae6:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_szero>
 aea:	5f 3f       	cpi	r21, 0xFF	; 255
 aec:	e4 f3       	brlt	.-8      	; 0xae6 <__divsf3_pse+0x6c>
 aee:	98 3e       	cpi	r25, 0xE8	; 232
 af0:	d4 f3       	brlt	.-12     	; 0xae6 <__divsf3_pse+0x6c>
 af2:	86 95       	lsr	r24
 af4:	77 95       	ror	r23
 af6:	67 95       	ror	r22
 af8:	b7 95       	ror	r27
 afa:	f7 95       	ror	r31
 afc:	9f 5f       	subi	r25, 0xFF	; 255
 afe:	c9 f7       	brne	.-14     	; 0xaf2 <__divsf3_pse+0x78>
 b00:	88 0f       	add	r24, r24
 b02:	91 1d       	adc	r25, r1
 b04:	96 95       	lsr	r25
 b06:	87 95       	ror	r24
 b08:	97 f9       	bld	r25, 7
 b0a:	08 95       	ret
 b0c:	e1 e0       	ldi	r30, 0x01	; 1
 b0e:	66 0f       	add	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	bb 1f       	adc	r27, r27
 b16:	62 17       	cp	r22, r18
 b18:	73 07       	cpc	r23, r19
 b1a:	84 07       	cpc	r24, r20
 b1c:	ba 07       	cpc	r27, r26
 b1e:	20 f0       	brcs	.+8      	; 0xb28 <__divsf3_pse+0xae>
 b20:	62 1b       	sub	r22, r18
 b22:	73 0b       	sbc	r23, r19
 b24:	84 0b       	sbc	r24, r20
 b26:	ba 0b       	sbc	r27, r26
 b28:	ee 1f       	adc	r30, r30
 b2a:	88 f7       	brcc	.-30     	; 0xb0e <__divsf3_pse+0x94>
 b2c:	e0 95       	com	r30
 b2e:	08 95       	ret

00000b30 <__fixunssfsi>:
 b30:	0e 94 34 06 	call	0xc68	; 0xc68 <__fp_splitA>
 b34:	88 f0       	brcs	.+34     	; 0xb58 <__fixunssfsi+0x28>
 b36:	9f 57       	subi	r25, 0x7F	; 127
 b38:	98 f0       	brcs	.+38     	; 0xb60 <__fixunssfsi+0x30>
 b3a:	b9 2f       	mov	r27, r25
 b3c:	99 27       	eor	r25, r25
 b3e:	b7 51       	subi	r27, 0x17	; 23
 b40:	b0 f0       	brcs	.+44     	; 0xb6e <__fixunssfsi+0x3e>
 b42:	e1 f0       	breq	.+56     	; 0xb7c <__fixunssfsi+0x4c>
 b44:	66 0f       	add	r22, r22
 b46:	77 1f       	adc	r23, r23
 b48:	88 1f       	adc	r24, r24
 b4a:	99 1f       	adc	r25, r25
 b4c:	1a f0       	brmi	.+6      	; 0xb54 <__fixunssfsi+0x24>
 b4e:	ba 95       	dec	r27
 b50:	c9 f7       	brne	.-14     	; 0xb44 <__fixunssfsi+0x14>
 b52:	14 c0       	rjmp	.+40     	; 0xb7c <__fixunssfsi+0x4c>
 b54:	b1 30       	cpi	r27, 0x01	; 1
 b56:	91 f0       	breq	.+36     	; 0xb7c <__fixunssfsi+0x4c>
 b58:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__fp_zero>
 b5c:	b1 e0       	ldi	r27, 0x01	; 1
 b5e:	08 95       	ret
 b60:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__fp_zero>
 b64:	67 2f       	mov	r22, r23
 b66:	78 2f       	mov	r23, r24
 b68:	88 27       	eor	r24, r24
 b6a:	b8 5f       	subi	r27, 0xF8	; 248
 b6c:	39 f0       	breq	.+14     	; 0xb7c <__fixunssfsi+0x4c>
 b6e:	b9 3f       	cpi	r27, 0xF9	; 249
 b70:	cc f3       	brlt	.-14     	; 0xb64 <__fixunssfsi+0x34>
 b72:	86 95       	lsr	r24
 b74:	77 95       	ror	r23
 b76:	67 95       	ror	r22
 b78:	b3 95       	inc	r27
 b7a:	d9 f7       	brne	.-10     	; 0xb72 <__fixunssfsi+0x42>
 b7c:	3e f4       	brtc	.+14     	; 0xb8c <__fixunssfsi+0x5c>
 b7e:	90 95       	com	r25
 b80:	80 95       	com	r24
 b82:	70 95       	com	r23
 b84:	61 95       	neg	r22
 b86:	7f 4f       	sbci	r23, 0xFF	; 255
 b88:	8f 4f       	sbci	r24, 0xFF	; 255
 b8a:	9f 4f       	sbci	r25, 0xFF	; 255
 b8c:	08 95       	ret

00000b8e <__floatunsisf>:
 b8e:	e8 94       	clt
 b90:	09 c0       	rjmp	.+18     	; 0xba4 <__floatsisf+0x12>

00000b92 <__floatsisf>:
 b92:	97 fb       	bst	r25, 7
 b94:	3e f4       	brtc	.+14     	; 0xba4 <__floatsisf+0x12>
 b96:	90 95       	com	r25
 b98:	80 95       	com	r24
 b9a:	70 95       	com	r23
 b9c:	61 95       	neg	r22
 b9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ba0:	8f 4f       	sbci	r24, 0xFF	; 255
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	99 23       	and	r25, r25
 ba6:	a9 f0       	breq	.+42     	; 0xbd2 <__floatsisf+0x40>
 ba8:	f9 2f       	mov	r31, r25
 baa:	96 e9       	ldi	r25, 0x96	; 150
 bac:	bb 27       	eor	r27, r27
 bae:	93 95       	inc	r25
 bb0:	f6 95       	lsr	r31
 bb2:	87 95       	ror	r24
 bb4:	77 95       	ror	r23
 bb6:	67 95       	ror	r22
 bb8:	b7 95       	ror	r27
 bba:	f1 11       	cpse	r31, r1
 bbc:	f8 cf       	rjmp	.-16     	; 0xbae <__floatsisf+0x1c>
 bbe:	fa f4       	brpl	.+62     	; 0xbfe <__floatsisf+0x6c>
 bc0:	bb 0f       	add	r27, r27
 bc2:	11 f4       	brne	.+4      	; 0xbc8 <__floatsisf+0x36>
 bc4:	60 ff       	sbrs	r22, 0
 bc6:	1b c0       	rjmp	.+54     	; 0xbfe <__floatsisf+0x6c>
 bc8:	6f 5f       	subi	r22, 0xFF	; 255
 bca:	7f 4f       	sbci	r23, 0xFF	; 255
 bcc:	8f 4f       	sbci	r24, 0xFF	; 255
 bce:	9f 4f       	sbci	r25, 0xFF	; 255
 bd0:	16 c0       	rjmp	.+44     	; 0xbfe <__floatsisf+0x6c>
 bd2:	88 23       	and	r24, r24
 bd4:	11 f0       	breq	.+4      	; 0xbda <__floatsisf+0x48>
 bd6:	96 e9       	ldi	r25, 0x96	; 150
 bd8:	11 c0       	rjmp	.+34     	; 0xbfc <__floatsisf+0x6a>
 bda:	77 23       	and	r23, r23
 bdc:	21 f0       	breq	.+8      	; 0xbe6 <__floatsisf+0x54>
 bde:	9e e8       	ldi	r25, 0x8E	; 142
 be0:	87 2f       	mov	r24, r23
 be2:	76 2f       	mov	r23, r22
 be4:	05 c0       	rjmp	.+10     	; 0xbf0 <__floatsisf+0x5e>
 be6:	66 23       	and	r22, r22
 be8:	71 f0       	breq	.+28     	; 0xc06 <__floatsisf+0x74>
 bea:	96 e8       	ldi	r25, 0x86	; 134
 bec:	86 2f       	mov	r24, r22
 bee:	70 e0       	ldi	r23, 0x00	; 0
 bf0:	60 e0       	ldi	r22, 0x00	; 0
 bf2:	2a f0       	brmi	.+10     	; 0xbfe <__floatsisf+0x6c>
 bf4:	9a 95       	dec	r25
 bf6:	66 0f       	add	r22, r22
 bf8:	77 1f       	adc	r23, r23
 bfa:	88 1f       	adc	r24, r24
 bfc:	da f7       	brpl	.-10     	; 0xbf4 <__floatsisf+0x62>
 bfe:	88 0f       	add	r24, r24
 c00:	96 95       	lsr	r25
 c02:	87 95       	ror	r24
 c04:	97 f9       	bld	r25, 7
 c06:	08 95       	ret

00000c08 <__fp_inf>:
 c08:	97 f9       	bld	r25, 7
 c0a:	9f 67       	ori	r25, 0x7F	; 127
 c0c:	80 e8       	ldi	r24, 0x80	; 128
 c0e:	70 e0       	ldi	r23, 0x00	; 0
 c10:	60 e0       	ldi	r22, 0x00	; 0
 c12:	08 95       	ret

00000c14 <__fp_nan>:
 c14:	9f ef       	ldi	r25, 0xFF	; 255
 c16:	80 ec       	ldi	r24, 0xC0	; 192
 c18:	08 95       	ret

00000c1a <__fp_pscA>:
 c1a:	00 24       	eor	r0, r0
 c1c:	0a 94       	dec	r0
 c1e:	16 16       	cp	r1, r22
 c20:	17 06       	cpc	r1, r23
 c22:	18 06       	cpc	r1, r24
 c24:	09 06       	cpc	r0, r25
 c26:	08 95       	ret

00000c28 <__fp_pscB>:
 c28:	00 24       	eor	r0, r0
 c2a:	0a 94       	dec	r0
 c2c:	12 16       	cp	r1, r18
 c2e:	13 06       	cpc	r1, r19
 c30:	14 06       	cpc	r1, r20
 c32:	05 06       	cpc	r0, r21
 c34:	08 95       	ret

00000c36 <__fp_round>:
 c36:	09 2e       	mov	r0, r25
 c38:	03 94       	inc	r0
 c3a:	00 0c       	add	r0, r0
 c3c:	11 f4       	brne	.+4      	; 0xc42 <__fp_round+0xc>
 c3e:	88 23       	and	r24, r24
 c40:	52 f0       	brmi	.+20     	; 0xc56 <__fp_round+0x20>
 c42:	bb 0f       	add	r27, r27
 c44:	40 f4       	brcc	.+16     	; 0xc56 <__fp_round+0x20>
 c46:	bf 2b       	or	r27, r31
 c48:	11 f4       	brne	.+4      	; 0xc4e <__fp_round+0x18>
 c4a:	60 ff       	sbrs	r22, 0
 c4c:	04 c0       	rjmp	.+8      	; 0xc56 <__fp_round+0x20>
 c4e:	6f 5f       	subi	r22, 0xFF	; 255
 c50:	7f 4f       	sbci	r23, 0xFF	; 255
 c52:	8f 4f       	sbci	r24, 0xFF	; 255
 c54:	9f 4f       	sbci	r25, 0xFF	; 255
 c56:	08 95       	ret

00000c58 <__fp_split3>:
 c58:	57 fd       	sbrc	r21, 7
 c5a:	90 58       	subi	r25, 0x80	; 128
 c5c:	44 0f       	add	r20, r20
 c5e:	55 1f       	adc	r21, r21
 c60:	59 f0       	breq	.+22     	; 0xc78 <__fp_splitA+0x10>
 c62:	5f 3f       	cpi	r21, 0xFF	; 255
 c64:	71 f0       	breq	.+28     	; 0xc82 <__fp_splitA+0x1a>
 c66:	47 95       	ror	r20

00000c68 <__fp_splitA>:
 c68:	88 0f       	add	r24, r24
 c6a:	97 fb       	bst	r25, 7
 c6c:	99 1f       	adc	r25, r25
 c6e:	61 f0       	breq	.+24     	; 0xc88 <__fp_splitA+0x20>
 c70:	9f 3f       	cpi	r25, 0xFF	; 255
 c72:	79 f0       	breq	.+30     	; 0xc92 <__fp_splitA+0x2a>
 c74:	87 95       	ror	r24
 c76:	08 95       	ret
 c78:	12 16       	cp	r1, r18
 c7a:	13 06       	cpc	r1, r19
 c7c:	14 06       	cpc	r1, r20
 c7e:	55 1f       	adc	r21, r21
 c80:	f2 cf       	rjmp	.-28     	; 0xc66 <__fp_split3+0xe>
 c82:	46 95       	lsr	r20
 c84:	f1 df       	rcall	.-30     	; 0xc68 <__fp_splitA>
 c86:	08 c0       	rjmp	.+16     	; 0xc98 <__fp_splitA+0x30>
 c88:	16 16       	cp	r1, r22
 c8a:	17 06       	cpc	r1, r23
 c8c:	18 06       	cpc	r1, r24
 c8e:	99 1f       	adc	r25, r25
 c90:	f1 cf       	rjmp	.-30     	; 0xc74 <__fp_splitA+0xc>
 c92:	86 95       	lsr	r24
 c94:	71 05       	cpc	r23, r1
 c96:	61 05       	cpc	r22, r1
 c98:	08 94       	sec
 c9a:	08 95       	ret

00000c9c <__fp_zero>:
 c9c:	e8 94       	clt

00000c9e <__fp_szero>:
 c9e:	bb 27       	eor	r27, r27
 ca0:	66 27       	eor	r22, r22
 ca2:	77 27       	eor	r23, r23
 ca4:	cb 01       	movw	r24, r22
 ca6:	97 f9       	bld	r25, 7
 ca8:	08 95       	ret

00000caa <__mulsf3>:
 caa:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__mulsf3x>
 cae:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_round>
 cb2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fp_pscA>
 cb6:	38 f0       	brcs	.+14     	; 0xcc6 <__mulsf3+0x1c>
 cb8:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_pscB>
 cbc:	20 f0       	brcs	.+8      	; 0xcc6 <__mulsf3+0x1c>
 cbe:	95 23       	and	r25, r21
 cc0:	11 f0       	breq	.+4      	; 0xcc6 <__mulsf3+0x1c>
 cc2:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_inf>
 cc6:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_nan>
 cca:	11 24       	eor	r1, r1
 ccc:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_szero>

00000cd0 <__mulsf3x>:
 cd0:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_split3>
 cd4:	70 f3       	brcs	.-36     	; 0xcb2 <__mulsf3+0x8>

00000cd6 <__mulsf3_pse>:
 cd6:	95 9f       	mul	r25, r21
 cd8:	c1 f3       	breq	.-16     	; 0xcca <__mulsf3+0x20>
 cda:	95 0f       	add	r25, r21
 cdc:	50 e0       	ldi	r21, 0x00	; 0
 cde:	55 1f       	adc	r21, r21
 ce0:	62 9f       	mul	r22, r18
 ce2:	f0 01       	movw	r30, r0
 ce4:	72 9f       	mul	r23, r18
 ce6:	bb 27       	eor	r27, r27
 ce8:	f0 0d       	add	r31, r0
 cea:	b1 1d       	adc	r27, r1
 cec:	63 9f       	mul	r22, r19
 cee:	aa 27       	eor	r26, r26
 cf0:	f0 0d       	add	r31, r0
 cf2:	b1 1d       	adc	r27, r1
 cf4:	aa 1f       	adc	r26, r26
 cf6:	64 9f       	mul	r22, r20
 cf8:	66 27       	eor	r22, r22
 cfa:	b0 0d       	add	r27, r0
 cfc:	a1 1d       	adc	r26, r1
 cfe:	66 1f       	adc	r22, r22
 d00:	82 9f       	mul	r24, r18
 d02:	22 27       	eor	r18, r18
 d04:	b0 0d       	add	r27, r0
 d06:	a1 1d       	adc	r26, r1
 d08:	62 1f       	adc	r22, r18
 d0a:	73 9f       	mul	r23, r19
 d0c:	b0 0d       	add	r27, r0
 d0e:	a1 1d       	adc	r26, r1
 d10:	62 1f       	adc	r22, r18
 d12:	83 9f       	mul	r24, r19
 d14:	a0 0d       	add	r26, r0
 d16:	61 1d       	adc	r22, r1
 d18:	22 1f       	adc	r18, r18
 d1a:	74 9f       	mul	r23, r20
 d1c:	33 27       	eor	r19, r19
 d1e:	a0 0d       	add	r26, r0
 d20:	61 1d       	adc	r22, r1
 d22:	23 1f       	adc	r18, r19
 d24:	84 9f       	mul	r24, r20
 d26:	60 0d       	add	r22, r0
 d28:	21 1d       	adc	r18, r1
 d2a:	82 2f       	mov	r24, r18
 d2c:	76 2f       	mov	r23, r22
 d2e:	6a 2f       	mov	r22, r26
 d30:	11 24       	eor	r1, r1
 d32:	9f 57       	subi	r25, 0x7F	; 127
 d34:	50 40       	sbci	r21, 0x00	; 0
 d36:	9a f0       	brmi	.+38     	; 0xd5e <__mulsf3_pse+0x88>
 d38:	f1 f0       	breq	.+60     	; 0xd76 <__mulsf3_pse+0xa0>
 d3a:	88 23       	and	r24, r24
 d3c:	4a f0       	brmi	.+18     	; 0xd50 <__mulsf3_pse+0x7a>
 d3e:	ee 0f       	add	r30, r30
 d40:	ff 1f       	adc	r31, r31
 d42:	bb 1f       	adc	r27, r27
 d44:	66 1f       	adc	r22, r22
 d46:	77 1f       	adc	r23, r23
 d48:	88 1f       	adc	r24, r24
 d4a:	91 50       	subi	r25, 0x01	; 1
 d4c:	50 40       	sbci	r21, 0x00	; 0
 d4e:	a9 f7       	brne	.-22     	; 0xd3a <__mulsf3_pse+0x64>
 d50:	9e 3f       	cpi	r25, 0xFE	; 254
 d52:	51 05       	cpc	r21, r1
 d54:	80 f0       	brcs	.+32     	; 0xd76 <__mulsf3_pse+0xa0>
 d56:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_inf>
 d5a:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_szero>
 d5e:	5f 3f       	cpi	r21, 0xFF	; 255
 d60:	e4 f3       	brlt	.-8      	; 0xd5a <__mulsf3_pse+0x84>
 d62:	98 3e       	cpi	r25, 0xE8	; 232
 d64:	d4 f3       	brlt	.-12     	; 0xd5a <__mulsf3_pse+0x84>
 d66:	86 95       	lsr	r24
 d68:	77 95       	ror	r23
 d6a:	67 95       	ror	r22
 d6c:	b7 95       	ror	r27
 d6e:	f7 95       	ror	r31
 d70:	e7 95       	ror	r30
 d72:	9f 5f       	subi	r25, 0xFF	; 255
 d74:	c1 f7       	brne	.-16     	; 0xd66 <__mulsf3_pse+0x90>
 d76:	fe 2b       	or	r31, r30
 d78:	88 0f       	add	r24, r24
 d7a:	91 1d       	adc	r25, r1
 d7c:	96 95       	lsr	r25
 d7e:	87 95       	ror	r24
 d80:	97 f9       	bld	r25, 7
 d82:	08 95       	ret

00000d84 <__umulhisi3>:
 d84:	a2 9f       	mul	r26, r18
 d86:	b0 01       	movw	r22, r0
 d88:	b3 9f       	mul	r27, r19
 d8a:	c0 01       	movw	r24, r0
 d8c:	a3 9f       	mul	r26, r19
 d8e:	70 0d       	add	r23, r0
 d90:	81 1d       	adc	r24, r1
 d92:	11 24       	eor	r1, r1
 d94:	91 1d       	adc	r25, r1
 d96:	b2 9f       	mul	r27, r18
 d98:	70 0d       	add	r23, r0
 d9a:	81 1d       	adc	r24, r1
 d9c:	11 24       	eor	r1, r1
 d9e:	91 1d       	adc	r25, r1
 da0:	08 95       	ret

00000da2 <atoi>:
 da2:	fc 01       	movw	r30, r24
 da4:	88 27       	eor	r24, r24
 da6:	99 27       	eor	r25, r25
 da8:	e8 94       	clt
 daa:	21 91       	ld	r18, Z+
 dac:	20 32       	cpi	r18, 0x20	; 32
 dae:	e9 f3       	breq	.-6      	; 0xdaa <atoi+0x8>
 db0:	29 30       	cpi	r18, 0x09	; 9
 db2:	10 f0       	brcs	.+4      	; 0xdb8 <atoi+0x16>
 db4:	2e 30       	cpi	r18, 0x0E	; 14
 db6:	c8 f3       	brcs	.-14     	; 0xdaa <atoi+0x8>
 db8:	2b 32       	cpi	r18, 0x2B	; 43
 dba:	41 f0       	breq	.+16     	; 0xdcc <atoi+0x2a>
 dbc:	2d 32       	cpi	r18, 0x2D	; 45
 dbe:	39 f4       	brne	.+14     	; 0xdce <atoi+0x2c>
 dc0:	68 94       	set
 dc2:	04 c0       	rjmp	.+8      	; 0xdcc <atoi+0x2a>
 dc4:	0e 94 05 07 	call	0xe0a	; 0xe0a <__mulhi_const_10>
 dc8:	82 0f       	add	r24, r18
 dca:	91 1d       	adc	r25, r1
 dcc:	21 91       	ld	r18, Z+
 dce:	20 53       	subi	r18, 0x30	; 48
 dd0:	2a 30       	cpi	r18, 0x0A	; 10
 dd2:	c0 f3       	brcs	.-16     	; 0xdc4 <atoi+0x22>
 dd4:	1e f4       	brtc	.+6      	; 0xddc <atoi+0x3a>
 dd6:	90 95       	com	r25
 dd8:	81 95       	neg	r24
 dda:	9f 4f       	sbci	r25, 0xFF	; 255
 ddc:	08 95       	ret

00000dde <itoa>:
 dde:	45 32       	cpi	r20, 0x25	; 37
 de0:	51 05       	cpc	r21, r1
 de2:	20 f4       	brcc	.+8      	; 0xdec <itoa+0xe>
 de4:	42 30       	cpi	r20, 0x02	; 2
 de6:	10 f0       	brcs	.+4      	; 0xdec <itoa+0xe>
 de8:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__itoa_ncheck>
 dec:	fb 01       	movw	r30, r22
 dee:	10 82       	st	Z, r1
 df0:	cb 01       	movw	r24, r22
 df2:	08 95       	ret

00000df4 <__itoa_ncheck>:
 df4:	bb 27       	eor	r27, r27
 df6:	4a 30       	cpi	r20, 0x0A	; 10
 df8:	31 f4       	brne	.+12     	; 0xe06 <__itoa_ncheck+0x12>
 dfa:	99 23       	and	r25, r25
 dfc:	22 f4       	brpl	.+8      	; 0xe06 <__itoa_ncheck+0x12>
 dfe:	bd e2       	ldi	r27, 0x2D	; 45
 e00:	90 95       	com	r25
 e02:	81 95       	neg	r24
 e04:	9f 4f       	sbci	r25, 0xFF	; 255
 e06:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__utoa_common>

00000e0a <__mulhi_const_10>:
 e0a:	7a e0       	ldi	r23, 0x0A	; 10
 e0c:	97 9f       	mul	r25, r23
 e0e:	90 2d       	mov	r25, r0
 e10:	87 9f       	mul	r24, r23
 e12:	80 2d       	mov	r24, r0
 e14:	91 0d       	add	r25, r1
 e16:	11 24       	eor	r1, r1
 e18:	08 95       	ret

00000e1a <__utoa_ncheck>:
 e1a:	bb 27       	eor	r27, r27

00000e1c <__utoa_common>:
 e1c:	fb 01       	movw	r30, r22
 e1e:	55 27       	eor	r21, r21
 e20:	aa 27       	eor	r26, r26
 e22:	88 0f       	add	r24, r24
 e24:	99 1f       	adc	r25, r25
 e26:	aa 1f       	adc	r26, r26
 e28:	a4 17       	cp	r26, r20
 e2a:	10 f0       	brcs	.+4      	; 0xe30 <__utoa_common+0x14>
 e2c:	a4 1b       	sub	r26, r20
 e2e:	83 95       	inc	r24
 e30:	50 51       	subi	r21, 0x10	; 16
 e32:	b9 f7       	brne	.-18     	; 0xe22 <__utoa_common+0x6>
 e34:	a0 5d       	subi	r26, 0xD0	; 208
 e36:	aa 33       	cpi	r26, 0x3A	; 58
 e38:	08 f0       	brcs	.+2      	; 0xe3c <__utoa_common+0x20>
 e3a:	a9 5d       	subi	r26, 0xD9	; 217
 e3c:	a1 93       	st	Z+, r26
 e3e:	00 97       	sbiw	r24, 0x00	; 0
 e40:	79 f7       	brne	.-34     	; 0xe20 <__utoa_common+0x4>
 e42:	b1 11       	cpse	r27, r1
 e44:	b1 93       	st	Z+, r27
 e46:	11 92       	st	Z+, r1
 e48:	cb 01       	movw	r24, r22
 e4a:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <strrev>

00000e4e <strrev>:
 e4e:	dc 01       	movw	r26, r24
 e50:	fc 01       	movw	r30, r24
 e52:	67 2f       	mov	r22, r23
 e54:	71 91       	ld	r23, Z+
 e56:	77 23       	and	r23, r23
 e58:	e1 f7       	brne	.-8      	; 0xe52 <strrev+0x4>
 e5a:	32 97       	sbiw	r30, 0x02	; 2
 e5c:	04 c0       	rjmp	.+8      	; 0xe66 <strrev+0x18>
 e5e:	7c 91       	ld	r23, X
 e60:	6d 93       	st	X+, r22
 e62:	70 83       	st	Z, r23
 e64:	62 91       	ld	r22, -Z
 e66:	ae 17       	cp	r26, r30
 e68:	bf 07       	cpc	r27, r31
 e6a:	c8 f3       	brcs	.-14     	; 0xe5e <strrev+0x10>
 e6c:	08 95       	ret

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
