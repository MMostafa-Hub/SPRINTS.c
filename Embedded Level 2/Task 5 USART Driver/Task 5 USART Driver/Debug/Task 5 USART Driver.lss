
Task 5 USART Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001e6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084e  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064e  00000000  00000000  00000b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000176  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001b0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "USART/uart.h"

#define MAX_SIZE 100
#define BAUD_RATE 9600
int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	c4 56       	subi	r28, 0x64	; 100
  8c:	d1 09       	sbc	r29, r1
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
	USART_Init(BAUD_RATE);
  98:	60 e8       	ldi	r22, 0x80	; 128
  9a:	75 e2       	ldi	r23, 0x25	; 37
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 75 00 	call	0xea	; 0xea <USART_Init>
	uint8 str[MAX_SIZE] = "" ;
  a4:	1a 82       	std	Y+2, r1	; 0x02
  a6:	19 82       	std	Y+1, r1	; 0x01
  a8:	fe 01       	movw	r30, r28
  aa:	33 96       	adiw	r30, 0x03	; 3
  ac:	82 e6       	ldi	r24, 0x62	; 98
  ae:	df 01       	movw	r26, r30
  b0:	1d 92       	st	X+, r1
  b2:	8a 95       	dec	r24
  b4:	e9 f7       	brne	.-6      	; 0xb0 <main+0x2e>
	while(1)
	{
		USART_SendString((uint8*)"INPUT: ");
  b6:	80 e6       	ldi	r24, 0x60	; 96
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 a1 00 	call	0x142	; 0x142 <USART_SendString>
		USART_ReceiveString(str);
  be:	ce 01       	movw	r24, r28
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	0e 94 ae 00 	call	0x15c	; 0x15c <USART_ReceiveString>
		USART_SendByte('\r');
  c6:	8d e0       	ldi	r24, 0x0D	; 13
  c8:	0e 94 99 00 	call	0x132	; 0x132 <USART_SendByte>
		
		USART_SendString((uint8*)"ECHO : ");
  cc:	88 e6       	ldi	r24, 0x68	; 104
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 a1 00 	call	0x142	; 0x142 <USART_SendString>
		USART_SendString(str);
  d4:	ce 01       	movw	r24, r28
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	0e 94 a1 00 	call	0x142	; 0x142 <USART_SendString>
		USART_SendByte('\r');
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	0e 94 99 00 	call	0x132	; 0x132 <USART_SendByte>
		USART_SendByte('\r');
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	0e 94 99 00 	call	0x132	; 0x132 <USART_SendByte>
  e8:	e6 cf       	rjmp	.-52     	; 0xb6 <main+0x34>

000000ea <USART_Init>:
void USART_Init(uint32 baud_rate)
{
	/* *************** ********** USCRA Description ***********************
	*	U2X = 1 for double transmission speed 
	***********************************************************************/
	UCSRA |= (1<<U2X);
  ea:	2b b1       	in	r18, 0x0b	; 11
  ec:	22 60       	ori	r18, 0x02	; 2
  ee:	2b b9       	out	0x0b, r18	; 11
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB |= (1<<RXEN) | (1<<TXEN);
  f0:	2a b1       	in	r18, 0x0a	; 10
  f2:	28 61       	ori	r18, 0x18	; 24
  f4:	2a b9       	out	0x0a, r18	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
  f6:	20 b5       	in	r18, 0x20	; 32
  f8:	26 68       	ori	r18, 0x86	; 134
  fa:	20 bd       	out	0x20, r18	; 32
	
	/* Calculate the UBRR register value */
	uint16 ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
  fc:	dc 01       	movw	r26, r24
  fe:	cb 01       	movw	r24, r22
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	aa 1f       	adc	r26, r26
 106:	bb 1f       	adc	r27, r27
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	aa 1f       	adc	r26, r26
 10e:	bb 1f       	adc	r27, r27
 110:	9c 01       	movw	r18, r24
 112:	ad 01       	movw	r20, r26
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	44 1f       	adc	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	60 e4       	ldi	r22, 0x40	; 64
 11e:	72 e4       	ldi	r23, 0x42	; 66
 120:	8f e0       	ldi	r24, 0x0F	; 15
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 cf 00 	call	0x19e	; 0x19e <__udivmodsi4>
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	31 09       	sbc	r19, r1
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8; // hihger 8-bits
 12c:	30 bd       	out	0x20, r19	; 32
	UBRRL = ubrr_value; // lower 8-bits
 12e:	29 b9       	out	0x09, r18	; 9
 130:	08 95       	ret

00000132 <USART_SendByte>:
*	Input args: the character that the user wants to send 
*/
void USART_SendByte(uint8 data)
{
	/* Waits for the data register to be empty */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
 132:	5d 9b       	sbis	0x0b, 5	; 11
 134:	fe cf       	rjmp	.-4      	; 0x132 <USART_SendByte>
	UDR = data;
 136:	8c b9       	out	0x0c, r24	; 12
 138:	08 95       	ret

0000013a <USART_ReceiveByte>:
*	Description: Receives a character (BYTE) from another USART device
*/
uint8 USART_ReceiveByte()
{
	/* Waits until the receive is completed */
	while(BIT_IS_CLEAR(UCSRA,RXC));
 13a:	5f 9b       	sbis	0x0b, 7	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <USART_ReceiveByte>
	return UDR;
 13e:	8c b1       	in	r24, 0x0c	; 12
}
 140:	08 95       	ret

00000142 <USART_SendString>:
/*
*	Description: sends a string to another USART device
*	Input args: the reference of the string that the user wants to send
*/
void USART_SendString(uint8 *str)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
	while(*str != '\0')
 148:	03 c0       	rjmp	.+6      	; 0x150 <USART_SendString+0xe>
	{
		USART_SendByte(*str);
 14a:	0e 94 99 00 	call	0x132	; 0x132 <USART_SendByte>
		str++;
 14e:	21 96       	adiw	r28, 0x01	; 1
*	Description: sends a string to another USART device
*	Input args: the reference of the string that the user wants to send
*/
void USART_SendString(uint8 *str)
{
	while(*str != '\0')
 150:	88 81       	ld	r24, Y
 152:	81 11       	cpse	r24, r1
 154:	fa cf       	rjmp	.-12     	; 0x14a <USART_SendString+0x8>
	{
		USART_SendByte(*str);
		str++;
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <USART_ReceiveString>:
/*
*	Description: Receives a string from another USART device
*	Input args: the reference of the string that the user wants to save the received data into
*/
void USART_ReceiveString(uint8 *str)
{
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	8c 01       	movw	r16, r24
	uint8 i = 0;
	str[i] = USART_ReceiveByte();
 168:	0e 94 9d 00 	call	0x13a	; 0x13a <USART_ReceiveByte>
 16c:	f8 01       	movw	r30, r16
 16e:	80 83       	st	Z, r24
*	Description: Receives a string from another USART device
*	Input args: the reference of the string that the user wants to save the received data into
*/
void USART_ReceiveString(uint8 *str)
{
	uint8 i = 0;
 170:	c0 e0       	ldi	r28, 0x00	; 0
	str[i] = USART_ReceiveByte();
	/* '\r' new line character */
	while(str[i] != '\r') 
 172:	08 c0       	rjmp	.+16     	; 0x184 <USART_ReceiveString+0x28>
	{
		i++;
 174:	cf 5f       	subi	r28, 0xFF	; 255
		str[i] = USART_ReceiveByte();
 176:	78 01       	movw	r14, r16
 178:	ec 0e       	add	r14, r28
 17a:	f1 1c       	adc	r15, r1
 17c:	0e 94 9d 00 	call	0x13a	; 0x13a <USART_ReceiveByte>
 180:	f7 01       	movw	r30, r14
 182:	80 83       	st	Z, r24
void USART_ReceiveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = USART_ReceiveByte();
	/* '\r' new line character */
	while(str[i] != '\r') 
 184:	f8 01       	movw	r30, r16
 186:	ec 0f       	add	r30, r28
 188:	f1 1d       	adc	r31, r1
 18a:	80 81       	ld	r24, Z
 18c:	8d 30       	cpi	r24, 0x0D	; 13
 18e:	91 f7       	brne	.-28     	; 0x174 <USART_ReceiveString+0x18>
	{
		i++;
		str[i] = USART_ReceiveByte();
	}
	str[i] = '\0';
 190:	10 82       	st	Z, r1
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	08 95       	ret

0000019e <__udivmodsi4>:
 19e:	a1 e2       	ldi	r26, 0x21	; 33
 1a0:	1a 2e       	mov	r1, r26
 1a2:	aa 1b       	sub	r26, r26
 1a4:	bb 1b       	sub	r27, r27
 1a6:	fd 01       	movw	r30, r26
 1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <__udivmodsi4_ep>

000001aa <__udivmodsi4_loop>:
 1aa:	aa 1f       	adc	r26, r26
 1ac:	bb 1f       	adc	r27, r27
 1ae:	ee 1f       	adc	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	a2 17       	cp	r26, r18
 1b4:	b3 07       	cpc	r27, r19
 1b6:	e4 07       	cpc	r30, r20
 1b8:	f5 07       	cpc	r31, r21
 1ba:	20 f0       	brcs	.+8      	; 0x1c4 <__udivmodsi4_ep>
 1bc:	a2 1b       	sub	r26, r18
 1be:	b3 0b       	sbc	r27, r19
 1c0:	e4 0b       	sbc	r30, r20
 1c2:	f5 0b       	sbc	r31, r21

000001c4 <__udivmodsi4_ep>:
 1c4:	66 1f       	adc	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	88 1f       	adc	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	1a 94       	dec	r1
 1ce:	69 f7       	brne	.-38     	; 0x1aa <__udivmodsi4_loop>
 1d0:	60 95       	com	r22
 1d2:	70 95       	com	r23
 1d4:	80 95       	com	r24
 1d6:	90 95       	com	r25
 1d8:	9b 01       	movw	r18, r22
 1da:	ac 01       	movw	r20, r24
 1dc:	bd 01       	movw	r22, r26
 1de:	cf 01       	movw	r24, r30
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
