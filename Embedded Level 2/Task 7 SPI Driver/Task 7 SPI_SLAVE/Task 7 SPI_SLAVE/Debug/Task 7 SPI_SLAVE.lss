
Task 7 SPI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000206  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c23  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000845  00000000  00000000  00000fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d4  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00001ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048e  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000529  00000000  00000000  000024a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000029cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  64:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <app_init>:
 */ 
#include "app.h"
void app_init(void)
{
	/* Initialize the SPI driver as Slave */
	SPI_initSlave();
  6c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_initSlave>
	
	DIO_setupPortDirection(PORTC_ID,PORT_OUTPUT); /* All PORTC pins are o/p pins */
  70:	6f ef       	ldi	r22, 0xFF	; 255
  72:	82 e0       	ldi	r24, 0x02	; 2
  74:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_setupPortDirection>
	DIO_writePort(PORTC_ID,0x00); /* Turn OFF all LEDS */
  78:	60 e0       	ldi	r22, 0x00	; 0
  7a:	82 e0       	ldi	r24, 0x02	; 2
  7c:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_writePort>
  80:	08 95       	ret

00000082 <DIO_setupPinDirection>:
			break;
		}
	}

	return pin_value;
}
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setupPinDirection+0x6>
  86:	6f c0       	rjmp	.+222    	; 0x166 <DIO_setupPinDirection+0xe4>
  88:	84 30       	cpi	r24, 0x04	; 4
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setupPinDirection+0xc>
  8c:	6c c0       	rjmp	.+216    	; 0x166 <DIO_setupPinDirection+0xe4>
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	01 f1       	breq	.+64     	; 0xd2 <DIO_setupPinDirection+0x50>
  92:	30 f0       	brcs	.+12     	; 0xa0 <DIO_setupPinDirection+0x1e>
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	b1 f1       	breq	.+108    	; 0x104 <DIO_setupPinDirection+0x82>
  98:	83 30       	cpi	r24, 0x03	; 3
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_setupPinDirection+0x1c>
  9c:	4c c0       	rjmp	.+152    	; 0x136 <DIO_setupPinDirection+0xb4>
  9e:	08 95       	ret
  a0:	41 30       	cpi	r20, 0x01	; 1
  a2:	59 f4       	brne	.+22     	; 0xba <DIO_setupPinDirection+0x38>
  a4:	2a b3       	in	r18, 0x1a	; 26
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_setupPinDirection+0x2e>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_setupPinDirection+0x2a>
  b4:	82 2b       	or	r24, r18
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	08 95       	ret
  ba:	2a b3       	in	r18, 0x1a	; 26
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_setupPinDirection+0x44>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_setupPinDirection+0x40>
  ca:	80 95       	com	r24
  cc:	82 23       	and	r24, r18
  ce:	8a bb       	out	0x1a, r24	; 26
  d0:	08 95       	ret
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	59 f4       	brne	.+22     	; 0xec <DIO_setupPinDirection+0x6a>
  d6:	27 b3       	in	r18, 0x17	; 23
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_setupPinDirection+0x60>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_setupPinDirection+0x5c>
  e6:	82 2b       	or	r24, r18
  e8:	87 bb       	out	0x17, r24	; 23
  ea:	08 95       	ret
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setupPinDirection+0x76>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setupPinDirection+0x72>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
 102:	08 95       	ret
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	59 f4       	brne	.+22     	; 0x11e <DIO_setupPinDirection+0x9c>
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_setupPinDirection+0x92>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_setupPinDirection+0x8e>
 118:	82 2b       	or	r24, r18
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	08 95       	ret
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setupPinDirection+0xa8>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setupPinDirection+0xa4>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	59 f4       	brne	.+22     	; 0x150 <DIO_setupPinDirection+0xce>
 13a:	21 b3       	in	r18, 0x11	; 17
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_setupPinDirection+0xc4>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_setupPinDirection+0xc0>
 14a:	82 2b       	or	r24, r18
 14c:	81 bb       	out	0x11, r24	; 17
 14e:	08 95       	ret
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setupPinDirection+0xda>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setupPinDirection+0xd6>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret

00000168 <DIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 168:	84 30       	cpi	r24, 0x04	; 4
 16a:	78 f4       	brcc	.+30     	; 0x18a <DIO_setupPortDirection+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	41 f0       	breq	.+16     	; 0x180 <DIO_setupPortDirection+0x18>
 170:	28 f0       	brcs	.+10     	; 0x17c <DIO_setupPortDirection+0x14>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	39 f0       	breq	.+14     	; 0x184 <DIO_setupPortDirection+0x1c>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	39 f0       	breq	.+14     	; 0x188 <DIO_setupPortDirection+0x20>
 17a:	08 95       	ret
		{
		case PORTA_ID:
			DDRA = direction;
 17c:	6a bb       	out	0x1a, r22	; 26
			break;
 17e:	08 95       	ret
		case PORTB_ID:
			DDRB = direction;
 180:	67 bb       	out	0x17, r22	; 23
			break;
 182:	08 95       	ret
		case PORTC_ID:
			DDRC = direction;
 184:	64 bb       	out	0x14, r22	; 20
			break;
 186:	08 95       	ret
		case PORTD_ID:
			DDRD = direction;
 188:	61 bb       	out	0x11, r22	; 17
 18a:	08 95       	ret

0000018c <DIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	78 f4       	brcc	.+30     	; 0x1ae <DIO_writePort+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	41 f0       	breq	.+16     	; 0x1a4 <DIO_writePort+0x18>
 194:	28 f0       	brcs	.+10     	; 0x1a0 <DIO_writePort+0x14>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	39 f0       	breq	.+14     	; 0x1a8 <DIO_writePort+0x1c>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	39 f0       	breq	.+14     	; 0x1ac <DIO_writePort+0x20>
 19e:	08 95       	ret
		{
		case PORTA_ID:
			PORTA = value;
 1a0:	6b bb       	out	0x1b, r22	; 27
			break;
 1a2:	08 95       	ret
		case PORTB_ID:
			PORTB = value;
 1a4:	68 bb       	out	0x18, r22	; 24
			break;
 1a6:	08 95       	ret
		case PORTC_ID:
			PORTC = value;
 1a8:	65 bb       	out	0x15, r22	; 21
			break;
 1aa:	08 95       	ret
		case PORTD_ID:
			PORTD = value;
 1ac:	62 bb       	out	0x12, r22	; 18
 1ae:	08 95       	ret

000001b0 <main>:
#include "app.h"

int main(void)
{

	app_init();
 1b0:	0e 94 36 00 	call	0x6c	; 0x6c <app_init>
	uint8 recieved_data = ' ';
	
	recieved_data = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <SPI_sendReceiveByte>
	DIO_writePort(PORTC_ID,recieved_data);
 1ba:	68 2f       	mov	r22, r24
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_writePort>
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x12>

000001c4 <SPI_initSlave>:
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	DIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	64 e0       	ldi	r22, 0x04	; 4
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	65 e0       	ldi	r22, 0x05	; 5
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	66 e0       	ldi	r22, 0x06	; 6
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	67 e0       	ldi	r22, 0x07	; 7
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
 1ec:	80 e4       	ldi	r24, 0x40	; 64
 1ee:	8d b9       	out	0x0d, r24	; 13

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
 1f0:	8e b1       	in	r24, 0x0e	; 14
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	8e b9       	out	0x0e, r24	; 14
 1f6:	08 95       	ret

000001f8 <SPI_sendReceiveByte>:
	/*	Initiate the communication and send data by SPI */
	/*	
	*	In case of receiving data 
	*	Since writing to SPDR generates SCK for transmission, write dummy data in the SPDR register
	*/
	SPDR = data;
 1f8:	8f b9       	out	0x0f, r24	; 15

	/*	Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF));
 1fa:	77 9b       	sbis	0x0e, 7	; 14
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <SPI_sendReceiveByte+0x2>

	return SPDR;
 1fe:	8f b1       	in	r24, 0x0f	; 15
}
 200:	08 95       	ret

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
