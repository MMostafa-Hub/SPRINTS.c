
Task 7 SPI _ MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b66  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b7  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067e  00000000  00000000  0000164d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00001ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047d  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ea  00000000  00000000  00002295  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000277f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <app_init>:
#include "app.h"
void app_init()
{
	
	/* Initialize the SPI driver as Master */
	SPI_initMaster();
  6c:	0e 94 b2 00 	call	0x164	; 0x164 <SPI_initMaster>
  70:	08 95       	ret

00000072 <DIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_setupPinDirection+0x6>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_setupPinDirection+0xe4>
  78:	84 30       	cpi	r24, 0x04	; 4
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_setupPinDirection+0xc>
  7c:	6c c0       	rjmp	.+216    	; 0x156 <DIO_setupPinDirection+0xe4>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	01 f1       	breq	.+64     	; 0xc2 <DIO_setupPinDirection+0x50>
  82:	30 f0       	brcs	.+12     	; 0x90 <DIO_setupPinDirection+0x1e>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	b1 f1       	breq	.+108    	; 0xf4 <DIO_setupPinDirection+0x82>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_setupPinDirection+0x1c>
  8c:	4c c0       	rjmp	.+152    	; 0x126 <DIO_setupPinDirection+0xb4>
  8e:	08 95       	ret
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	59 f4       	brne	.+22     	; 0xaa <DIO_setupPinDirection+0x38>
			{
				SET_BIT(DDRA,pin_num);
  94:	2a b3       	in	r18, 0x1a	; 26
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_setupPinDirection+0x2e>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_setupPinDirection+0x2a>
  a4:	82 2b       	or	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setupPinDirection+0x44>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setupPinDirection+0x40>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	59 f4       	brne	.+22     	; 0xdc <DIO_setupPinDirection+0x6a>
			{
				SET_BIT(DDRB,pin_num);
  c6:	27 b3       	in	r18, 0x17	; 23
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_setupPinDirection+0x60>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_setupPinDirection+0x5c>
  d6:	82 2b       	or	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setupPinDirection+0x76>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setupPinDirection+0x72>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_setupPinDirection+0x9c>
			{
				SET_BIT(DDRC,pin_num);
  f8:	24 b3       	in	r18, 0x14	; 20
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_setupPinDirection+0x92>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_setupPinDirection+0x8e>
 108:	82 2b       	or	r24, r18
 10a:	84 bb       	out	0x14, r24	; 20
 10c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setupPinDirection+0xa8>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setupPinDirection+0xa4>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	84 bb       	out	0x14, r24	; 20
 124:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_setupPinDirection+0xce>
			{
				SET_BIT(DDRD,pin_num);
 12a:	21 b3       	in	r18, 0x11	; 17
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_setupPinDirection+0xc4>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_setupPinDirection+0xc0>
 13a:	82 2b       	or	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setupPinDirection+0xda>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setupPinDirection+0xd6>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <main>:

#include "app.h"

int main(void)
{
	app_init();
 158:	0e 94 36 00 	call	0x6c	; 0x6c <app_init>
	
	/* Send a Byte to MC2 */
	SPI_sendReceiveByte('B');
 15c:	82 e4       	ldi	r24, 0x42	; 66
 15e:	0e 94 cc 00 	call	0x198	; 0x198 <SPI_sendReceiveByte>
 162:	ff cf       	rjmp	.-2      	; 0x162 <main+0xa>

00000164 <SPI_initMaster>:
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	64 e0       	ldi	r22, 0x04	; 4
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 39 00 	call	0x72	; 0x72 <DIO_setupPinDirection>
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	65 e0       	ldi	r22, 0x05	; 5
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 39 00 	call	0x72	; 0x72 <DIO_setupPinDirection>
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	66 e0       	ldi	r22, 0x06	; 6
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 39 00 	call	0x72	; 0x72 <DIO_setupPinDirection>
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	67 e0       	ldi	r22, 0x07	; 7
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 39 00 	call	0x72	; 0x72 <DIO_setupPinDirection>
 18c:	80 e5       	ldi	r24, 0x50	; 80
 18e:	8d b9       	out	0x0d, r24	; 13
 190:	8e b1       	in	r24, 0x0e	; 14
 192:	8e 7f       	andi	r24, 0xFE	; 254
 194:	8e b9       	out	0x0e, r24	; 14
 196:	08 95       	ret

00000198 <SPI_sendReceiveByte>:
	/*	Initiate the communication and send data by SPI */
	/*	
	*	In case of receiving data 
	*	Since writing to SPDR generates SCK for transmission, write dummy data in the SPDR register
	*/
	SPDR = data;
 198:	8f b9       	out	0x0f, r24	; 15

	/*	Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF));
 19a:	77 9b       	sbis	0x0e, 7	; 14
 19c:	fe cf       	rjmp	.-4      	; 0x19a <SPI_sendReceiveByte+0x2>

	return SPDR;
 19e:	8f b1       	in	r24, 0x0f	; 15
}
 1a0:	08 95       	ret

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
