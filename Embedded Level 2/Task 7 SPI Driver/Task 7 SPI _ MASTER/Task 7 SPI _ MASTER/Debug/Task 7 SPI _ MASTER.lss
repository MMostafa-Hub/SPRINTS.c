
Task 7 SPI _ MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000204  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e4  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000767  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000512  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000278  00000000  00000000  00001f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002203  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  7a:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <app_init>:
#include <avr/io.h>
#include "SPI/spi.h"
#include "USART/usart.h"
void app_init(void)
{
	USART_Init(9600);
  82:	60 e8       	ldi	r22, 0x80	; 128
  84:	75 e2       	ldi	r23, 0x25	; 37
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 84 00 	call	0x108	; 0x108 <USART_Init>
	SPI_InitMaster();
  8e:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_InitMaster>
  92:	08 95       	ret

00000094 <main>:
}
int main(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	c4 56       	subi	r28, 0x64	; 100
  9e:	d1 09       	sbc	r29, r1
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	app_init();
  aa:	0e 94 41 00 	call	0x82	; 0x82 <app_init>
	uint8 c[100];
	while (1)
	{
		USART_SendString((uint8*)"MASTER:\r");
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 b0 00 	call	0x160	; 0x160 <USART_SendString>
		
		/* FROM TERMINAL */
		USART_ReceiveString(c);
  b6:	ce 01       	movw	r24, r28
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	0e 94 bd 00 	call	0x17a	; 0x17a <USART_ReceiveString>
		/* TO SLAVE */
		SPI_SendString(c);
  be:	ce 01       	movw	r24, r28
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	0e 94 77 00 	call	0xee	; 0xee <SPI_SendString>
		
		/* ECHOOOOO */
		USART_SendString(c);
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	0e 94 b0 00 	call	0x160	; 0x160 <USART_SendString>
		USART_SendString((uint8*)"\r");
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 b0 00 	call	0x160	; 0x160 <USART_SendString>
  d6:	eb cf       	rjmp	.-42     	; 0xae <main+0x1a>

000000d8 <SPI_InitMaster>:

uint8 SPI_ReceiveByte()
{
	while(BIT_IS_CLEAR(SPSR,SPIF));
	return SPDR;
}
  d8:	87 b3       	in	r24, 0x17	; 23
  da:	80 6b       	ori	r24, 0xB0	; 176
  dc:	87 bb       	out	0x17, r24	; 23
  de:	8d b1       	in	r24, 0x0d	; 13
  e0:	80 65       	ori	r24, 0x50	; 80
  e2:	8d b9       	out	0x0d, r24	; 13
  e4:	08 95       	ret

000000e6 <SPI_SendByte>:
  e6:	8f b9       	out	0x0f, r24	; 15
  e8:	77 9b       	sbis	0x0e, 7	; 14
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <SPI_SendByte+0x2>
  ec:	08 95       	ret

000000ee <SPI_SendString>:

void SPI_SendString(uint8 *str)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	while(*str)
  f4:	03 c0       	rjmp	.+6      	; 0xfc <SPI_SendString+0xe>
	{
		SPI_SendByte(*str);
  f6:	0e 94 73 00 	call	0xe6	; 0xe6 <SPI_SendByte>
		str++;
  fa:	21 96       	adiw	r28, 0x01	; 1
	return SPDR;
}

void SPI_SendString(uint8 *str)
{
	while(*str)
  fc:	88 81       	ld	r24, Y
  fe:	81 11       	cpse	r24, r1
 100:	fa cf       	rjmp	.-12     	; 0xf6 <SPI_SendString+0x8>
	{
		SPI_SendByte(*str);
		str++;
	}
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <USART_Init>:
#include "usart.h"

void USART_Init(uint32 baud_rate)
{
	/* U2X = 1 for double transmission speed */
	UCSRA |= (1<<U2X);
 108:	2b b1       	in	r18, 0x0b	; 11
 10a:	22 60       	ori	r18, 0x02	; 2
 10c:	2b b9       	out	0x0b, r18	; 11
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB |= (1<<RXEN) | (1<<TXEN);
 10e:	2a b1       	in	r18, 0x0a	; 10
 110:	28 61       	ori	r18, 0x18	; 24
 112:	2a b9       	out	0x0a, r18	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
 114:	20 b5       	in	r18, 0x20	; 32
 116:	26 68       	ori	r18, 0x86	; 134
 118:	20 bd       	out	0x20, r18	; 32
	
	/* Calculate the UBRR register value */
	uint16 ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
 11a:	dc 01       	movw	r26, r24
 11c:	cb 01       	movw	r24, r22
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	aa 1f       	adc	r26, r26
 124:	bb 1f       	adc	r27, r27
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	aa 1f       	adc	r26, r26
 12c:	bb 1f       	adc	r27, r27
 12e:	9c 01       	movw	r18, r24
 130:	ad 01       	movw	r20, r26
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	44 1f       	adc	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	60 e4       	ldi	r22, 0x40	; 64
 13c:	72 e4       	ldi	r23, 0x42	; 66
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 de 00 	call	0x1bc	; 0x1bc <__udivmodsi4>
 146:	21 50       	subi	r18, 0x01	; 1
 148:	31 09       	sbc	r19, r1
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
 14a:	30 bd       	out	0x20, r19	; 32
	UBRRL = ubrr_value;
 14c:	29 b9       	out	0x09, r18	; 9
 14e:	08 95       	ret

00000150 <USART_SendByte>:
*	Description: sends a character(BYTE) to another USART device
*/
void USART_SendByte(uint8 data)
{
	/* Waits for the data register to be empty */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
 150:	5d 9b       	sbis	0x0b, 5	; 11
 152:	fe cf       	rjmp	.-4      	; 0x150 <USART_SendByte>
	UDR = data;
 154:	8c b9       	out	0x0c, r24	; 12
 156:	08 95       	ret

00000158 <USART_ReceiveByte>:
*	Description: Receives a character (BYTE) from another USART device
*/
uint8 USART_ReceiveByte()
{
	/* Waits until the receive is completed */
	while(BIT_IS_CLEAR(UCSRA,RXC));
 158:	5f 9b       	sbis	0x0b, 7	; 11
 15a:	fe cf       	rjmp	.-4      	; 0x158 <USART_ReceiveByte>
	return UDR;
 15c:	8c b1       	in	r24, 0x0c	; 12
}
 15e:	08 95       	ret

00000160 <USART_SendString>:

/*
*	Description: sends a string to another USART device
*/
void USART_SendString(uint8 *str)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
	while(*str != '\0')
 166:	03 c0       	rjmp	.+6      	; 0x16e <USART_SendString+0xe>
	{
		USART_SendByte(*str);
 168:	0e 94 a8 00 	call	0x150	; 0x150 <USART_SendByte>
		str++;
 16c:	21 96       	adiw	r28, 0x01	; 1
/*
*	Description: sends a string to another USART device
*/
void USART_SendString(uint8 *str)
{
	while(*str != '\0')
 16e:	88 81       	ld	r24, Y
 170:	81 11       	cpse	r24, r1
 172:	fa cf       	rjmp	.-12     	; 0x168 <USART_SendString+0x8>
	{
		USART_SendByte(*str);
		str++;
	}
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <USART_ReceiveString>:

/*
*	Description: sends a string to another USART device
*/
void USART_ReceiveString(uint8 *str)
{
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	8c 01       	movw	r16, r24
	uint8 i = 0;
	str[i] = USART_ReceiveByte();
 186:	0e 94 ac 00 	call	0x158	; 0x158 <USART_ReceiveByte>
 18a:	f8 01       	movw	r30, r16
 18c:	80 83       	st	Z, r24
/*
*	Description: sends a string to another USART device
*/
void USART_ReceiveString(uint8 *str)
{
	uint8 i = 0;
 18e:	c0 e0       	ldi	r28, 0x00	; 0
	str[i] = USART_ReceiveByte();
	while(str[i] != '#')
 190:	08 c0       	rjmp	.+16     	; 0x1a2 <USART_ReceiveString+0x28>
	{
		i++;
 192:	cf 5f       	subi	r28, 0xFF	; 255
		str[i] = USART_ReceiveByte();
 194:	78 01       	movw	r14, r16
 196:	ec 0e       	add	r14, r28
 198:	f1 1c       	adc	r15, r1
 19a:	0e 94 ac 00 	call	0x158	; 0x158 <USART_ReceiveByte>
 19e:	f7 01       	movw	r30, r14
 1a0:	80 83       	st	Z, r24
*/
void USART_ReceiveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = USART_ReceiveByte();
	while(str[i] != '#')
 1a2:	f8 01       	movw	r30, r16
 1a4:	ec 0f       	add	r30, r28
 1a6:	f1 1d       	adc	r31, r1
 1a8:	80 81       	ld	r24, Z
 1aa:	83 32       	cpi	r24, 0x23	; 35
 1ac:	91 f7       	brne	.-28     	; 0x192 <USART_ReceiveString+0x18>
	{
		i++;
		str[i] = USART_ReceiveByte();
	}
	str[i] = '\0';
 1ae:	10 82       	st	Z, r1
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	08 95       	ret

000001bc <__udivmodsi4>:
 1bc:	a1 e2       	ldi	r26, 0x21	; 33
 1be:	1a 2e       	mov	r1, r26
 1c0:	aa 1b       	sub	r26, r26
 1c2:	bb 1b       	sub	r27, r27
 1c4:	fd 01       	movw	r30, r26
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <__udivmodsi4_ep>

000001c8 <__udivmodsi4_loop>:
 1c8:	aa 1f       	adc	r26, r26
 1ca:	bb 1f       	adc	r27, r27
 1cc:	ee 1f       	adc	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	e4 07       	cpc	r30, r20
 1d6:	f5 07       	cpc	r31, r21
 1d8:	20 f0       	brcs	.+8      	; 0x1e2 <__udivmodsi4_ep>
 1da:	a2 1b       	sub	r26, r18
 1dc:	b3 0b       	sbc	r27, r19
 1de:	e4 0b       	sbc	r30, r20
 1e0:	f5 0b       	sbc	r31, r21

000001e2 <__udivmodsi4_ep>:
 1e2:	66 1f       	adc	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	88 1f       	adc	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	1a 94       	dec	r1
 1ec:	69 f7       	brne	.-38     	; 0x1c8 <__udivmodsi4_loop>
 1ee:	60 95       	com	r22
 1f0:	70 95       	com	r23
 1f2:	80 95       	com	r24
 1f4:	90 95       	com	r25
 1f6:	9b 01       	movw	r18, r22
 1f8:	ac 01       	movw	r20, r24
 1fa:	bd 01       	movw	r22, r26
 1fc:	cf 01       	movw	r24, r30
 1fe:	08 95       	ret

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
