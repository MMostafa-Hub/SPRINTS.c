
Task 7.5 SPI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000302  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000302  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e5e  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000989  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000095d  00000000  00000000  00001cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  00002638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a3  00000000  00000000  00002824  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000674  00000000  00000000  00002dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000343b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  7a:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <app_init>:
 */ 
#include "app.h"
void app_init(void)
{
	/* Initializing USART */
	USART_Init(9600);
  82:	60 e8       	ldi	r22, 0x80	; 128
  84:	75 e2       	ldi	r23, 0x25	; 37
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 28 01 	call	0x250	; 0x250 <USART_Init>
	/* Initialize the SPI driver as Slave */
	SPI_initSlave();
  8e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SPI_initSlave>
  92:	08 95       	ret

00000094 <DIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
  94:	68 30       	cpi	r22, 0x08	; 8
  96:	08 f0       	brcs	.+2      	; 0x9a <DIO_setupPinDirection+0x6>
  98:	6f c0       	rjmp	.+222    	; 0x178 <DIO_setupPinDirection+0xe4>
  9a:	84 30       	cpi	r24, 0x04	; 4
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_setupPinDirection+0xc>
  9e:	6c c0       	rjmp	.+216    	; 0x178 <DIO_setupPinDirection+0xe4>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	01 f1       	breq	.+64     	; 0xe4 <DIO_setupPinDirection+0x50>
  a4:	30 f0       	brcs	.+12     	; 0xb2 <DIO_setupPinDirection+0x1e>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	b1 f1       	breq	.+108    	; 0x116 <DIO_setupPinDirection+0x82>
  aa:	83 30       	cpi	r24, 0x03	; 3
  ac:	09 f4       	brne	.+2      	; 0xb0 <DIO_setupPinDirection+0x1c>
  ae:	4c c0       	rjmp	.+152    	; 0x148 <DIO_setupPinDirection+0xb4>
  b0:	08 95       	ret
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
  b2:	41 30       	cpi	r20, 0x01	; 1
  b4:	59 f4       	brne	.+22     	; 0xcc <DIO_setupPinDirection+0x38>
			{
				SET_BIT(DDRA,pin_num);
  b6:	2a b3       	in	r18, 0x1a	; 26
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_setupPinDirection+0x2e>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_setupPinDirection+0x2a>
  c6:	82 2b       	or	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
  cc:	2a b3       	in	r18, 0x1a	; 26
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_setupPinDirection+0x44>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_setupPinDirection+0x40>
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	8a bb       	out	0x1a, r24	; 26
  e2:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
  e4:	41 30       	cpi	r20, 0x01	; 1
  e6:	59 f4       	brne	.+22     	; 0xfe <DIO_setupPinDirection+0x6a>
			{
				SET_BIT(DDRB,pin_num);
  e8:	27 b3       	in	r18, 0x17	; 23
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_setupPinDirection+0x60>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_setupPinDirection+0x5c>
  f8:	82 2b       	or	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
  fe:	27 b3       	in	r18, 0x17	; 23
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_setupPinDirection+0x76>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_setupPinDirection+0x72>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	87 bb       	out	0x17, r24	; 23
 114:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 116:	41 30       	cpi	r20, 0x01	; 1
 118:	59 f4       	brne	.+22     	; 0x130 <DIO_setupPinDirection+0x9c>
			{
				SET_BIT(DDRC,pin_num);
 11a:	24 b3       	in	r18, 0x14	; 20
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_setupPinDirection+0x92>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_setupPinDirection+0x8e>
 12a:	82 2b       	or	r24, r18
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 130:	24 b3       	in	r18, 0x14	; 20
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_setupPinDirection+0xa8>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_setupPinDirection+0xa4>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	84 bb       	out	0x14, r24	; 20
 146:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	59 f4       	brne	.+22     	; 0x162 <DIO_setupPinDirection+0xce>
			{
				SET_BIT(DDRD,pin_num);
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_setupPinDirection+0xc4>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_setupPinDirection+0xc0>
 15c:	82 2b       	or	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_setupPinDirection+0xda>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_setupPinDirection+0xd6>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	81 bb       	out	0x11, r24	; 17
 178:	08 95       	ret

0000017a <main>:
 */ 
#include "app.h"

#define MAX_SIZE 255
int main(void)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	d1 09       	sbc	r29, r1
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
	app_init();
 190:	0e 94 41 00 	call	0x82	; 0x82 <app_init>
	
	uint8 str[255];

	USART_SendString((uint8*)"SLAVE\r");
 194:	80 e6       	ldi	r24, 0x60	; 96
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 50 01 	call	0x2a0	; 0x2a0 <USART_SendString>
	
    while(1)
    {
		/* Receive String from MC1 */
		SPI_receiveString(str);
 19c:	8e 01       	movw	r16, r28
 19e:	0f 5f       	subi	r16, 0xFF	; 255
 1a0:	1f 4f       	sbci	r17, 0xFF	; 255
 1a2:	c8 01       	movw	r24, r16
 1a4:	0e 94 05 01 	call	0x20a	; 0x20a <SPI_receiveString>
			
		/* Sending string form MC1 to terminal */
		USART_SendString(str);
 1a8:	c8 01       	movw	r24, r16
 1aa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <USART_SendString>
		USART_SendByte('\r');
 1ae:	8d e0       	ldi	r24, 0x0D	; 13
 1b0:	0e 94 4c 01 	call	0x298	; 0x298 <USART_SendByte>
		
		memset(str,'\0',255);
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	f8 01       	movw	r30, r16
 1b8:	11 92       	st	Z+, r1
 1ba:	8a 95       	dec	r24
 1bc:	e9 f7       	brne	.-6      	; 0x1b8 <main+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	87 ea       	ldi	r24, 0xA7	; 167
 1c0:	91 e6       	ldi	r25, 0x61	; 97
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x48>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x4e>
 1c8:	00 00       	nop
 1ca:	e8 cf       	rjmp	.-48     	; 0x19c <main+0x22>

000001cc <SPI_initSlave>:
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	64 e0       	ldi	r22, 0x04	; 4
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_setupPinDirection>
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	65 e0       	ldi	r22, 0x05	; 5
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_setupPinDirection>
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	66 e0       	ldi	r22, 0x06	; 6
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_setupPinDirection>
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	67 e0       	ldi	r22, 0x07	; 7
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_setupPinDirection>
 1f4:	80 e4       	ldi	r24, 0x40	; 64
 1f6:	8d b9       	out	0x0d, r24	; 13
 1f8:	8e b1       	in	r24, 0x0e	; 14
 1fa:	8e 7f       	andi	r24, 0xFE	; 254
 1fc:	8e b9       	out	0x0e, r24	; 14
 1fe:	08 95       	ret

00000200 <SPI_sendReceiveByte>:
 200:	8f b9       	out	0x0f, r24	; 15
 202:	77 9b       	sbis	0x0e, 7	; 14
 204:	fe cf       	rjmp	.-4      	; 0x202 <SPI_sendReceiveByte+0x2>
 206:	8f b1       	in	r24, 0x0f	; 15
 208:	08 95       	ret

0000020a <SPI_receiveString>:

/*
 * Description : Receive the required string until the '\r' symbol through SPI from the other SPI device
 */
void SPI_receiveString(uint8 *str)
{
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	8c 01       	movw	r16, r24
	uint8 i = 0;

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	0e 94 00 01 	call	0x200	; 0x200 <SPI_sendReceiveByte>
 21c:	f8 01       	movw	r30, r16
 21e:	80 83       	st	Z, r24
/*
 * Description : Receive the required string until the '\r' symbol through SPI from the other SPI device
 */
void SPI_receiveString(uint8 *str)
{
	uint8 i = 0;
 220:	c0 e0       	ldi	r28, 0x00	; 0

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '\r' ENTER is pressed */
	while(str[i] != '\r')
 222:	09 c0       	rjmp	.+18     	; 0x236 <SPI_receiveString+0x2c>
	{
		i++;
 224:	cf 5f       	subi	r28, 0xFF	; 255
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
 226:	78 01       	movw	r14, r16
 228:	ec 0e       	add	r14, r28
 22a:	f1 1c       	adc	r15, r1
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	0e 94 00 01 	call	0x200	; 0x200 <SPI_sendReceiveByte>
 232:	f7 01       	movw	r30, r14
 234:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '\r' ENTER is pressed */
	while(str[i] != '\r')
 236:	f8 01       	movw	r30, r16
 238:	ec 0f       	add	r30, r28
 23a:	f1 1d       	adc	r31, r1
 23c:	80 81       	ld	r24, Z
 23e:	8d 30       	cpi	r24, 0x0D	; 13
 240:	89 f7       	brne	.-30     	; 0x224 <SPI_receiveString+0x1a>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '\r', replace the 'r' with '\0' */
	str[i] = '\0';
 242:	10 82       	st	Z, r1
}
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	08 95       	ret

00000250 <USART_Init>:
uint8 USART_ReceiveByte()
{
	/* Waits until the receive is completed */
	while(BIT_IS_CLEAR(UCSRA,RXC));
	return UDR;
}
 250:	2b b1       	in	r18, 0x0b	; 11
 252:	22 60       	ori	r18, 0x02	; 2
 254:	2b b9       	out	0x0b, r18	; 11
 256:	2a b1       	in	r18, 0x0a	; 10
 258:	28 61       	ori	r18, 0x18	; 24
 25a:	2a b9       	out	0x0a, r18	; 10
 25c:	20 b5       	in	r18, 0x20	; 32
 25e:	26 68       	ori	r18, 0x86	; 134
 260:	20 bd       	out	0x20, r18	; 32
 262:	dc 01       	movw	r26, r24
 264:	cb 01       	movw	r24, r22
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	aa 1f       	adc	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	aa 1f       	adc	r26, r26
 274:	bb 1f       	adc	r27, r27
 276:	9c 01       	movw	r18, r24
 278:	ad 01       	movw	r20, r26
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	44 1f       	adc	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	60 e4       	ldi	r22, 0x40	; 64
 284:	72 e4       	ldi	r23, 0x42	; 66
 286:	8f e0       	ldi	r24, 0x0F	; 15
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__udivmodsi4>
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	31 09       	sbc	r19, r1
 292:	30 bd       	out	0x20, r19	; 32
 294:	29 b9       	out	0x09, r18	; 9
 296:	08 95       	ret

00000298 <USART_SendByte>:
 298:	5d 9b       	sbis	0x0b, 5	; 11
 29a:	fe cf       	rjmp	.-4      	; 0x298 <USART_SendByte>
 29c:	8c b9       	out	0x0c, r24	; 12
 29e:	08 95       	ret

000002a0 <USART_SendString>:

/*
*	Description: sends a string to another USART device
*/
void USART_SendString(uint8 *str)
{
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	while(*str != '\0')
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <USART_SendString+0xe>
	{
		USART_SendByte(*str);
 2a8:	0e 94 4c 01 	call	0x298	; 0x298 <USART_SendByte>
		str++;
 2ac:	21 96       	adiw	r28, 0x01	; 1
/*
*	Description: sends a string to another USART device
*/
void USART_SendString(uint8 *str)
{
	while(*str != '\0')
 2ae:	88 81       	ld	r24, Y
 2b0:	81 11       	cpse	r24, r1
 2b2:	fa cf       	rjmp	.-12     	; 0x2a8 <USART_SendString+0x8>
	{
		USART_SendByte(*str);
		str++;
	}
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <__udivmodsi4>:
 2ba:	a1 e2       	ldi	r26, 0x21	; 33
 2bc:	1a 2e       	mov	r1, r26
 2be:	aa 1b       	sub	r26, r26
 2c0:	bb 1b       	sub	r27, r27
 2c2:	fd 01       	movw	r30, r26
 2c4:	0d c0       	rjmp	.+26     	; 0x2e0 <__udivmodsi4_ep>

000002c6 <__udivmodsi4_loop>:
 2c6:	aa 1f       	adc	r26, r26
 2c8:	bb 1f       	adc	r27, r27
 2ca:	ee 1f       	adc	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	a2 17       	cp	r26, r18
 2d0:	b3 07       	cpc	r27, r19
 2d2:	e4 07       	cpc	r30, r20
 2d4:	f5 07       	cpc	r31, r21
 2d6:	20 f0       	brcs	.+8      	; 0x2e0 <__udivmodsi4_ep>
 2d8:	a2 1b       	sub	r26, r18
 2da:	b3 0b       	sbc	r27, r19
 2dc:	e4 0b       	sbc	r30, r20
 2de:	f5 0b       	sbc	r31, r21

000002e0 <__udivmodsi4_ep>:
 2e0:	66 1f       	adc	r22, r22
 2e2:	77 1f       	adc	r23, r23
 2e4:	88 1f       	adc	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	1a 94       	dec	r1
 2ea:	69 f7       	brne	.-38     	; 0x2c6 <__udivmodsi4_loop>
 2ec:	60 95       	com	r22
 2ee:	70 95       	com	r23
 2f0:	80 95       	com	r24
 2f2:	90 95       	com	r25
 2f4:	9b 01       	movw	r18, r22
 2f6:	ac 01       	movw	r20, r24
 2f8:	bd 01       	movw	r22, r26
 2fa:	cf 01       	movw	r24, r30
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
