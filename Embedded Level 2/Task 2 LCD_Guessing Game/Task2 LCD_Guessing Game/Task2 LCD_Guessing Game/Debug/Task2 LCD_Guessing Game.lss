
Task2 LCD_Guessing Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  000009c0  00000a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000b2  008000b2  00000aa6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aa6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b0  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b60  00000000  00000000  00002324  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bce  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00003a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058a  00000000  00000000  00003cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007da  00000000  00000000  0000427a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004a54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3b       	cpi	r26, 0xB3	; 179
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a3 01 	call	0x346	; 0x346 <main>
  8a:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
#include "Led_Driver/led.h"
#include "Timer_Driver/timer.h"

void app_init(void)
{
	lcd_init();
  92:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_init>
	button_init(&PORTB_Data,&PORTB_Dir,btn);
  96:	42 e0       	ldi	r20, 0x02	; 2
  98:	67 e3       	ldi	r22, 0x37	; 55
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	88 e3       	ldi	r24, 0x38	; 56
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <button_init>
	
	/* the two leds are used for debugging */
	led_init(&PORTA_Data,&PORTA_Dir,red_led);
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	6a e3       	ldi	r22, 0x3A	; 58
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	8b e3       	ldi	r24, 0x3B	; 59
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 9b 01 	call	0x336	; 0x336 <led_init>
	led_init(&PORTA_Data,&PORTA_Dir,yellow_led);
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	6a e3       	ldi	r22, 0x3A	; 58
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	8b e3       	ldi	r24, 0x3B	; 59
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 9b 01 	call	0x336	; 0x336 <led_init>
  c0:	08 95       	ret

000000c2 <render_main_screen>:
}


void render_main_screen(void)
{
	Lcd_Set_Cursor(1,0);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Lcd_Set_Cursor>
	lcd_write_string("Please Guess");
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_string>
	Lcd_Set_Cursor(2,0);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Lcd_Set_Cursor>
	lcd_write_string("an Integer:");
  da:	8d e6       	ldi	r24, 0x6D	; 109
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_string>
  e2:	08 95       	ret

000000e4 <render_win_screen>:
}
void render_win_screen(char* rand_number)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
	Lcd_Set_Cursor(1,4); // to make the sentence centered
  f2:	64 e0       	ldi	r22, 0x04	; 4
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Lcd_Set_Cursor>
	lcd_write_string("YOU WON");
  fa:	89 e7       	ldi	r24, 0x79	; 121
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 10a:	81 e8       	ldi	r24, 0x81	; 129
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_string>
	lcd_write_string(rand_number);
 112:	ce 01       	movw	r24, r28
 114:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_string>
	timer_delay(2000);
 118:	80 ed       	ldi	r24, 0xD0	; 208
 11a:	97 e0       	ldi	r25, 0x07	; 7
 11c:	0e 94 00 02 	call	0x400	; 0x400 <timer_delay>
	lcd_cmd(0x01);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <render_loss_screen>:
void render_loss_screen(char* rand_number)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
	Lcd_Set_Cursor(1,4);// to make the sentence centered
 13c:	64 e0       	ldi	r22, 0x04	; 4
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Lcd_Set_Cursor>
	lcd_write_string("YOU LOST");
 144:	8a e8       	ldi	r24, 0x8A	; 138
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 154:	81 e8       	ldi	r24, 0x81	; 129
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_string>
	lcd_write_string(rand_number);
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_string>
	timer_delay(2000);
 162:	80 ed       	ldi	r24, 0xD0	; 208
 164:	97 e0       	ldi	r25, 0x07	; 7
 166:	0e 94 00 02 	call	0x400	; 0x400 <timer_delay>
	lcd_cmd(0x01);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <render_range_invalid_screen>:
void render_range_invalid_screen()
{
	lcd_cmd(0x01);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
	Lcd_Set_Cursor(1,0);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Lcd_Set_Cursor>
	lcd_write_string("The Valid Range");
 188:	83 e9       	ldi	r24, 0x93	; 147
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Lcd_Set_Cursor>
	lcd_write_string("from 1 -> 15:");
 198:	83 ea       	ldi	r24, 0xA3	; 163
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_write_string>
	timer_delay(2000);
 1a0:	80 ed       	ldi	r24, 0xD0	; 208
 1a2:	97 e0       	ldi	r25, 0x07	; 7
 1a4:	0e 94 00 02 	call	0x400	; 0x400 <timer_delay>
	lcd_cmd(0x01);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
 1b0:	08 95       	ret

000001b2 <button_init>:
#include "../DIO_Driver/dio.h"
#include "../Led_Driver/led.h"
#include "../Timer_Driver/timer.h"

void button_init(vuint8_t* PORT_, vuint8_t* DDR_, uint8_t bitNumber)
{
 1b2:	24 2f       	mov	r18, r20
	DIO_init(PORT_,DDR_,INPUT,bitNumber);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_init>
 1ba:	08 95       	ret

000001bc <button_pressed>:
}

uint8_t button_pressed(vuint8_t* PIN_, uint8_t bitNumber)
{
	return DIO_read(PIN_,bitNumber);
 1bc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_read>
 1c0:	08 95       	ret

000001c2 <DIO_init>:


void DIO_init(vuint8_t* PORT_, vuint8_t* DDR_, uint8_t dircetion, uint8_t bitNumber)
{
	
	if(dircetion == INPUT)
 1c2:	41 11       	cpse	r20, r1
 1c4:	0d c0       	rjmp	.+26     	; 0x1e0 <DIO_init+0x1e>
	{
		*DDR_ &= ~(1 << bitNumber);
 1c6:	fb 01       	movw	r30, r22
 1c8:	30 81       	ld	r19, Z
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_init+0x12>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	2a 95       	dec	r18
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_init+0xe>
 1d8:	80 95       	com	r24
 1da:	83 23       	and	r24, r19
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret
	}
	else
	{
		*DDR_ |= (1 << bitNumber);
 1e0:	fb 01       	movw	r30, r22
 1e2:	30 81       	ld	r19, Z
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_init+0x2c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	2a 95       	dec	r18
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_init+0x28>
 1f2:	83 2b       	or	r24, r19
 1f4:	80 83       	st	Z, r24
 1f6:	08 95       	ret

000001f8 <DIO_read>:
	}
}
uint8_t DIO_read (vuint8_t* PIN_, uint8_t bitNumber)
{
	return ((*PIN_ & (1 << bitNumber)) == (1 << bitNumber));
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 81       	ld	r18, Z
 1fc:	41 e0       	ldi	r20, 0x01	; 1
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_read+0xe>
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_read+0xa>
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	24 23       	and	r18, r20
 20e:	35 23       	and	r19, r21
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	42 17       	cp	r20, r18
 214:	53 07       	cpc	r21, r19
 216:	09 f0       	breq	.+2      	; 0x21a <DIO_read+0x22>
 218:	80 e0       	ldi	r24, 0x00	; 0
}
 21a:	08 95       	ret

0000021c <DIO_write>:
void DIO_write(vuint8_t* PORT_, uint8_t bitNumber, uint8_t value)
{
	if(value != 0)
 21c:	44 23       	and	r20, r20
 21e:	61 f0       	breq	.+24     	; 0x238 <DIO_write+0x1c>
	{
		*PORT_ |= (1<<bitNumber);
 220:	fc 01       	movw	r30, r24
 222:	40 81       	ld	r20, Z
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_write+0x12>
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_write+0xe>
 232:	24 2b       	or	r18, r20
 234:	20 83       	st	Z, r18
 236:	08 95       	ret
	}
	else
	{
		*PORT_ &= ~(1<<bitNumber);
 238:	fc 01       	movw	r30, r24
 23a:	40 81       	ld	r20, Z
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0x2a>
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0x26>
 24a:	20 95       	com	r18
 24c:	24 23       	and	r18, r20
 24e:	20 83       	st	Z, r18
 250:	08 95       	ret

00000252 <lcd_cmd>:
#include "../macros.h"

void lcd_cmd(int data)
{
	
	lcd_control	&= ~(1 << RS);
 252:	95 b3       	in	r25, 0x15	; 21
 254:	9e 7f       	andi	r25, 0xFE	; 254
 256:	95 bb       	out	0x15, r25	; 21
	lcd_data = data;
 258:	82 bb       	out	0x12, r24	; 18
	lcd_control |= (1 << EN);
 25a:	85 b3       	in	r24, 0x15	; 21
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 00 02 	call	0x400	; 0x400 <timer_delay>
	lcd_control &= ~(1 << EN);
 268:	85 b3       	in	r24, 0x15	; 21
 26a:	8b 7f       	andi	r24, 0xFB	; 251
 26c:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 00 02 	call	0x400	; 0x400 <timer_delay>
 276:	08 95       	ret

00000278 <lcd_init>:

}

void lcd_init(void)
{
	DDRD = 0xf0;
 278:	80 ef       	ldi	r24, 0xF0	; 240
 27a:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x07;
 27c:	87 e0       	ldi	r24, 0x07	; 7
 27e:	84 bb       	out	0x14, r24	; 20

	lcd_control	&= ~(1 << RS);
 280:	85 b3       	in	r24, 0x15	; 21
 282:	8e 7f       	andi	r24, 0xFE	; 254
 284:	85 bb       	out	0x15, r24	; 21
	lcd_control &= ~(1 << RW);
 286:	85 b3       	in	r24, 0x15	; 21
 288:	8d 7f       	andi	r24, 0xFD	; 253
 28a:	85 bb       	out	0x15, r24	; 21
	lcd_control &= ~(1 << EN);
 28c:	85 b3       	in	r24, 0x15	; 21
 28e:	8b 7f       	andi	r24, 0xFB	; 251
 290:	85 bb       	out	0x15, r24	; 21



	lcd_cmd(0x38);    //function set 8-bit, 2-line display , 5x8 dots
 292:	88 e3       	ldi	r24, 0x38	; 56
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
	lcd_cmd(0x0c);    //display on,cursor off,blink off
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
	lcd_cmd(0x01);    //clear display
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
	lcd_cmd(0x06);    //entry mode, set increment
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
 2b2:	08 95       	ret

000002b4 <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 1)
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	39 f4       	brne	.+14     	; 0x2c6 <Lcd_Set_Cursor+0x12>
	lcd_cmd(0x80 + b);
 2b8:	86 2f       	mov	r24, r22
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	80 58       	subi	r24, 0x80	; 128
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
 2c4:	08 95       	ret
	else if(a == 2)
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	31 f4       	brne	.+12     	; 0x2d6 <Lcd_Set_Cursor+0x22>
	lcd_cmd(0xC0 + b);
 2ca:	86 2f       	mov	r24, r22
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	80 54       	subi	r24, 0x40	; 64
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
 2d6:	08 95       	ret

000002d8 <lcd_write_char>:
}

void lcd_write_char(int data)
{
	
	lcd_control	|= (1 << RS);
 2d8:	95 b3       	in	r25, 0x15	; 21
 2da:	91 60       	ori	r25, 0x01	; 1
 2dc:	95 bb       	out	0x15, r25	; 21
	lcd_data = data;
 2de:	82 bb       	out	0x12, r24	; 18
	lcd_control |= (1 << EN);
 2e0:	85 b3       	in	r24, 0x15	; 21
 2e2:	84 60       	ori	r24, 0x04	; 4
 2e4:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 00 02 	call	0x400	; 0x400 <timer_delay>
	lcd_control &= ~(1 << EN);
 2ee:	85 b3       	in	r24, 0x15	; 21
 2f0:	8b 7f       	andi	r24, 0xFB	; 251
 2f2:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 00 02 	call	0x400	; 0x400 <timer_delay>
 2fc:	08 95       	ret

000002fe <lcd_write_string>:
}


void lcd_write_string(char* str)
{
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	8c 01       	movw	r16, r24
	for(int i = 0 ; str[i] != '\0' ; i++)
 308:	c0 e0       	ldi	r28, 0x00	; 0
 30a:	d0 e0       	ldi	r29, 0x00	; 0
 30c:	04 c0       	rjmp	.+8      	; 0x316 <lcd_write_string+0x18>
	{
		lcd_write_char(str[i]);
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_char>
}


void lcd_write_string(char* str)
{
	for(int i = 0 ; str[i] != '\0' ; i++)
 314:	21 96       	adiw	r28, 0x01	; 1
 316:	f8 01       	movw	r30, r16
 318:	ec 0f       	add	r30, r28
 31a:	fd 1f       	adc	r31, r29
 31c:	80 81       	ld	r24, Z
 31e:	81 11       	cpse	r24, r1
 320:	f6 cf       	rjmp	.-20     	; 0x30e <lcd_write_string+0x10>
	{
		lcd_write_char(str[i]);
	}
	
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	08 95       	ret

0000032c <lcd_clear>:


void lcd_clear(void)
{
	lcd_cmd(0x01);
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cmd>
 334:	08 95       	ret

00000336 <led_init>:
#include "../Timer_Driver/timer.h"
#include "../Led_Driver/led.h"
#include "../macros.h"

void led_init(vuint8_t* PORT_, vuint8_t* DDR_, int8_t bitNumber)
{
 336:	24 2f       	mov	r18, r20
	DIO_init(PORT_,DDR_,OUTPUT,bitNumber);
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_init>
 33e:	08 95       	ret

00000340 <led_write>:
}

void led_write(vuint8_t* PORT_, int8_t bitNumber, int8_t value)
{
	DIO_write(PORT_,bitNumber,value);
 340:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_write>
 344:	08 95       	ret

00000346 <main>:
#include "macros.h"
#include "app.h"

uint8_t gu8_timeIsOverFlag = 0; // flag is 1 if the user finished entering the data
int main()
{
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	00 d0       	rcall	.+0      	; 0x34c <main+0x6>
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62

	app_init();
 350:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	uint8_t nPresses  = 0, prevButton = 0, currentButton = 0; // counts the number of presses 
 354:	00 e0       	ldi	r16, 0x00	; 0
 356:	f1 2c       	mov	r15, r1
	
	for(uint8_t seed = 0;True;++seed) // every iteration changes the seed of the random number generator
	{

		render_main_screen();
 358:	0e 94 61 00 	call	0xc2	; 0xc2 <render_main_screen>
		if(gu8_timeIsOverFlag) // if the time is up
 35c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 360:	88 23       	and	r24, r24
 362:	01 f1       	breq	.+64     	; 0x3a4 <main+0x5e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 364:	4a e0       	ldi	r20, 0x0A	; 10
 366:	be 01       	movw	r22, r28
 368:	6f 5f       	subi	r22, 0xFF	; 255
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 a9 04 	call	0x952	; 0x952 <__itoa_ncheck>
		{
			uint8_t rand_number = 4; // generates a random number in the range of 1 -> 15
			char s_rand_number[2] ;
			itoa(rand_number,s_rand_number,10); // convert number from int into string and saves it in snumber
			
			lcd_clear(); // clears the screen
 374:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_clear>

			if(nPresses > 15) // if number of presses is more than 15 
 378:	8f e0       	ldi	r24, 0x0F	; 15
 37a:	8f 15       	cp	r24, r15
 37c:	18 f4       	brcc	.+6      	; 0x384 <main+0x3e>
			{
				render_range_invalid_screen(); 
 37e:	0e 94 bc 00 	call	0x178	; 0x178 <render_range_invalid_screen>
 382:	0c c0       	rjmp	.+24     	; 0x39c <main+0x56>
			}
			else if(nPresses == rand_number) // if number of presses equal to the generated random number
 384:	84 e0       	ldi	r24, 0x04	; 4
 386:	f8 12       	cpse	r15, r24
 388:	05 c0       	rjmp	.+10     	; 0x394 <main+0x4e>
			{
				render_win_screen(s_rand_number);
 38a:	ce 01       	movw	r24, r28
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	0e 94 72 00 	call	0xe4	; 0xe4 <render_win_screen>
 392:	04 c0       	rjmp	.+8      	; 0x39c <main+0x56>
			}
			else // if the number is not equal to the generated random number
			{
				render_loss_screen(s_rand_number);
 394:	ce 01       	movw	r24, r28
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	0e 94 97 00 	call	0x12e	; 0x12e <render_loss_screen>
			}
			
			
			gu8_timeIsOverFlag = 0; 
 39c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__data_end>
			nPresses = 0;
 3a0:	f1 2c       	mov	r15, r1
 3a2:	10 c0       	rjmp	.+32     	; 0x3c4 <main+0x7e>
		}
		else // turning off the leds
		{
			led_write(&PORTA_Data,red_led,OFF);
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	8b e3       	ldi	r24, 0x3B	; 59
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 a0 01 	call	0x340	; 0x340 <led_write>
			led_write(&PORTA_Data,yellow_led,OFF);
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	8b e3       	ldi	r24, 0x3B	; 59
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 a0 01 	call	0x340	; 0x340 <led_write>
		}
		

		// if the button got pressed we will increment nPresses, initiate a new delay and turning the red led on
		currentButton =  button_pressed(&PORTB_Pin,btn);
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	86 e3       	ldi	r24, 0x36	; 54
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 de 00 	call	0x1bc	; 0x1bc <button_pressed>
 3d0:	18 2f       	mov	r17, r24
		if(prevButton != currentButton && prevButton) // to prevent long presses
 3d2:	08 17       	cp	r16, r24
 3d4:	99 f0       	breq	.+38     	; 0x3fc <main+0xb6>
 3d6:	00 23       	and	r16, r16
 3d8:	89 f0       	breq	.+34     	; 0x3fc <main+0xb6>
		{
			timer_interr_delay(2000); 
 3da:	80 ed       	ldi	r24, 0xD0	; 208
 3dc:	97 e0       	ldi	r25, 0x07	; 7
 3de:	0e 94 78 02 	call	0x4f0	; 0x4f0 <timer_interr_delay>
			led_write(&PORTA_Data,red_led,ON);
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	8b e3       	ldi	r24, 0x3B	; 59
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 a0 01 	call	0x340	; 0x340 <led_write>
			timer_delay(50); 
 3f2:	82 e3       	ldi	r24, 0x32	; 50
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 00 02 	call	0x400	; 0x400 <timer_delay>
			nPresses++;
 3fa:	f3 94       	inc	r15
		}
		prevButton = currentButton;
 3fc:	01 2f       	mov	r16, r17
	}
 3fe:	ac cf       	rjmp	.-168    	; 0x358 <main+0x12>

00000400 <timer_delay>:
#define preScaler 1.024
#define timeToOverflowOneByte 261.12
#define timeToOverflowTwoByte 67108.864

void timer_delay(uint16_t time)
{
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
	if(time > 0)
 408:	00 97       	sbiw	r24, 0x00	; 0
 40a:	09 f4       	brne	.+2      	; 0x40e <timer_delay+0xe>
 40c:	40 c0       	rjmp	.+128    	; 0x48e <timer_delay+0x8e>
 40e:	8c 01       	movw	r16, r24
	{
		Timer0_control = 0b00000101;	// Timer0, normal mode, /1024 pre-scalar
 410:	85 e0       	ldi	r24, 0x05	; 5
 412:	83 bf       	out	0x33, r24	; 51
		int nIterations = (int)(time / timeToOverflowOneByte); // 1
 414:	b8 01       	movw	r22, r16
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 af 03 	call	0x75e	; 0x75e <__floatunsisf>
 41e:	2c e5       	ldi	r18, 0x5C	; 92
 420:	3f e8       	ldi	r19, 0x8F	; 143
 422:	42 e8       	ldi	r20, 0x82	; 130
 424:	53 e4       	ldi	r21, 0x43	; 67
 426:	0e 94 07 03 	call	0x60e	; 0x60e <__divsf3>
 42a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixsfsi>
 42e:	eb 01       	movw	r28, r22
		int extra = time % (int)((timeToOverflowOneByte)); // 37
 430:	c8 01       	movw	r24, r16
 432:	65 e0       	ldi	r22, 0x05	; 5
 434:	71 e0       	ldi	r23, 0x01	; 1
 436:	0e 94 95 04 	call	0x92a	; 0x92a <__udivmodhi4>
		int extra_TCNT0_initial_value = (int)((timeToOverflowOneByte - extra)/preScaler); // 262.144 - 37 = 225.144
 43a:	bc 01       	movw	r22, r24
 43c:	99 0f       	add	r25, r25
 43e:	88 0b       	sbc	r24, r24
 440:	99 0b       	sbc	r25, r25
 442:	0e 94 b1 03 	call	0x762	; 0x762 <__floatsisf>
 446:	9b 01       	movw	r18, r22
 448:	ac 01       	movw	r20, r24
 44a:	6c e5       	ldi	r22, 0x5C	; 92
 44c:	7f e8       	ldi	r23, 0x8F	; 143
 44e:	82 e8       	ldi	r24, 0x82	; 130
 450:	93 e4       	ldi	r25, 0x43	; 67
 452:	0e 94 9a 02 	call	0x534	; 0x534 <__subsf3>
 456:	2f e6       	ldi	r18, 0x6F	; 111
 458:	32 e1       	ldi	r19, 0x12	; 18
 45a:	43 e8       	ldi	r20, 0x83	; 131
 45c:	5f e3       	ldi	r21, 0x3F	; 63
 45e:	0e 94 07 03 	call	0x60e	; 0x60e <__divsf3>
 462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixsfsi>
		
		
		for(int iterator = 0 ; iterator < nIterations ;++iterator)
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	07 c0       	rjmp	.+14     	; 0x47a <timer_delay+0x7a>
		{
			Timer0_data = 0x00;
 46c:	12 be       	out	0x32, r1	; 50
			while(Timer0_overflow_flag == 0);  // Wait for TOV0 to roll overs
 46e:	08 b6       	in	r0, 0x38	; 56
 470:	00 fe       	sbrs	r0, 0
 472:	fd cf       	rjmp	.-6      	; 0x46e <timer_delay+0x6e>
			Timer_flags = 0x01;	// Clear TOV0 flag
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	28 bf       	out	0x38, r18	; 56
		int nIterations = (int)(time / timeToOverflowOneByte); // 1
		int extra = time % (int)((timeToOverflowOneByte)); // 37
		int extra_TCNT0_initial_value = (int)((timeToOverflowOneByte - extra)/preScaler); // 262.144 - 37 = 225.144
		
		
		for(int iterator = 0 ; iterator < nIterations ;++iterator)
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	8c 17       	cp	r24, r28
 47c:	9d 07       	cpc	r25, r29
 47e:	b4 f3       	brlt	.-20     	; 0x46c <timer_delay+0x6c>
			Timer0_data = 0x00;
			while(Timer0_overflow_flag == 0);  // Wait for TOV0 to roll overs
			Timer_flags = 0x01;	// Clear TOV0 flag
		}
		
		Timer0_data = extra_TCNT0_initial_value; // setting the initial value of TCVTO to be 256 - 37 = 219
 480:	62 bf       	out	0x32, r22	; 50
		while(Timer0_overflow_flag == 0);
 482:	08 b6       	in	r0, 0x38	; 56
 484:	00 fe       	sbrs	r0, 0
 486:	fd cf       	rjmp	.-6      	; 0x482 <timer_delay+0x82>
		Timer_flags = 0x01;  		// Clear TOV0 flag
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	88 bf       	out	0x38, r24	; 56
		Timer0_control = 0x00; // disable timer0
 48c:	13 be       	out	0x33, r1	; 51
		
	}
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	08 95       	ret

00000498 <__vector_9>:


extern uint8_t gu8_timeIsOverFlag;
void __vector_9 (void) __attribute__ ((signal,used)) ;
void __vector_9 (void) // Timer1 ISR // executed if TOV1 is set in TIFR
{
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	2f 93       	push	r18
 4a4:	3f 93       	push	r19
 4a6:	4f 93       	push	r20
 4a8:	5f 93       	push	r21
 4aa:	6f 93       	push	r22
 4ac:	7f 93       	push	r23
 4ae:	8f 93       	push	r24
 4b0:	9f 93       	push	r25
 4b2:	af 93       	push	r26
 4b4:	bf 93       	push	r27
 4b6:	ef 93       	push	r30
 4b8:	ff 93       	push	r31
	gu8_timeIsOverFlag = 1;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
	led_write(&PORTA_Data,yellow_led,ON);
 4c0:	41 e0       	ldi	r20, 0x01	; 1
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	8b e3       	ldi	r24, 0x3B	; 59
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 a0 01 	call	0x340	; 0x340 <led_write>
	cli();
 4cc:	f8 94       	cli
}
 4ce:	ff 91       	pop	r31
 4d0:	ef 91       	pop	r30
 4d2:	bf 91       	pop	r27
 4d4:	af 91       	pop	r26
 4d6:	9f 91       	pop	r25
 4d8:	8f 91       	pop	r24
 4da:	7f 91       	pop	r23
 4dc:	6f 91       	pop	r22
 4de:	5f 91       	pop	r21
 4e0:	4f 91       	pop	r20
 4e2:	3f 91       	pop	r19
 4e4:	2f 91       	pop	r18
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <timer_interr_delay>:

void timer_interr_delay(int time) // Timer 1
{
 4f0:	bc 01       	movw	r22, r24
	Timer1_control_regA = 0x00;
 4f2:	1f bc       	out	0x2f, r1	; 47
	Timer1_control_regB = 0b00000101;  // Timer mode with 1024 prescler
 4f4:	85 e0       	ldi	r24, 0x05	; 5
 4f6:	8e bd       	out	0x2e, r24	; 46
	TCNT1 =  floor(CyclesToOverFlowTwoBytes - time/preScaler);  // combines TCNT1H and TCNT1L
 4f8:	07 2e       	mov	r0, r23
 4fa:	00 0c       	add	r0, r0
 4fc:	88 0b       	sbc	r24, r24
 4fe:	99 0b       	sbc	r25, r25
 500:	0e 94 b1 03 	call	0x762	; 0x762 <__floatsisf>
 504:	2f e6       	ldi	r18, 0x6F	; 111
 506:	32 e1       	ldi	r19, 0x12	; 18
 508:	43 e8       	ldi	r20, 0x83	; 131
 50a:	5f e3       	ldi	r21, 0x3F	; 63
 50c:	0e 94 07 03 	call	0x60e	; 0x60e <__divsf3>
 510:	9b 01       	movw	r18, r22
 512:	ac 01       	movw	r20, r24
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	7f ef       	ldi	r23, 0xFF	; 255
 518:	8f e7       	ldi	r24, 0x7F	; 127
 51a:	97 e4       	ldi	r25, 0x47	; 71
 51c:	0e 94 9a 02 	call	0x534	; 0x534 <__subsf3>
 520:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <floor>
 524:	0e 94 80 03 	call	0x700	; 0x700 <__fixunssfsi>
 528:	7d bd       	out	0x2d, r23	; 45
 52a:	6c bd       	out	0x2c, r22	; 44
	Timer1_interr_mask = 0x04 ;   // Enable timer1 overflow interrupt(TOIE1)
 52c:	84 e0       	ldi	r24, 0x04	; 4
 52e:	89 bf       	out	0x39, r24	; 57
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
 530:	78 94       	sei
 532:	08 95       	ret

00000534 <__subsf3>:
 534:	50 58       	subi	r21, 0x80	; 128

00000536 <__addsf3>:
 536:	bb 27       	eor	r27, r27
 538:	aa 27       	eor	r26, r26
 53a:	0e 94 b2 02 	call	0x564	; 0x564 <__addsf3x>
 53e:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_round>
 542:	0e 94 35 04 	call	0x86a	; 0x86a <__fp_pscA>
 546:	38 f0       	brcs	.+14     	; 0x556 <__addsf3+0x20>
 548:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_pscB>
 54c:	20 f0       	brcs	.+8      	; 0x556 <__addsf3+0x20>
 54e:	39 f4       	brne	.+14     	; 0x55e <__addsf3+0x28>
 550:	9f 3f       	cpi	r25, 0xFF	; 255
 552:	19 f4       	brne	.+6      	; 0x55a <__addsf3+0x24>
 554:	26 f4       	brtc	.+8      	; 0x55e <__addsf3+0x28>
 556:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_nan>
 55a:	0e f4       	brtc	.+2      	; 0x55e <__addsf3+0x28>
 55c:	e0 95       	com	r30
 55e:	e7 fb       	bst	r30, 7
 560:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>

00000564 <__addsf3x>:
 564:	e9 2f       	mov	r30, r25
 566:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_split3>
 56a:	58 f3       	brcs	.-42     	; 0x542 <__addsf3+0xc>
 56c:	ba 17       	cp	r27, r26
 56e:	62 07       	cpc	r22, r18
 570:	73 07       	cpc	r23, r19
 572:	84 07       	cpc	r24, r20
 574:	95 07       	cpc	r25, r21
 576:	20 f0       	brcs	.+8      	; 0x580 <__addsf3x+0x1c>
 578:	79 f4       	brne	.+30     	; 0x598 <__addsf3x+0x34>
 57a:	a6 f5       	brtc	.+104    	; 0x5e4 <__addsf3x+0x80>
 57c:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_zero>
 580:	0e f4       	brtc	.+2      	; 0x584 <__addsf3x+0x20>
 582:	e0 95       	com	r30
 584:	0b 2e       	mov	r0, r27
 586:	ba 2f       	mov	r27, r26
 588:	a0 2d       	mov	r26, r0
 58a:	0b 01       	movw	r0, r22
 58c:	b9 01       	movw	r22, r18
 58e:	90 01       	movw	r18, r0
 590:	0c 01       	movw	r0, r24
 592:	ca 01       	movw	r24, r20
 594:	a0 01       	movw	r20, r0
 596:	11 24       	eor	r1, r1
 598:	ff 27       	eor	r31, r31
 59a:	59 1b       	sub	r21, r25
 59c:	99 f0       	breq	.+38     	; 0x5c4 <__addsf3x+0x60>
 59e:	59 3f       	cpi	r21, 0xF9	; 249
 5a0:	50 f4       	brcc	.+20     	; 0x5b6 <__addsf3x+0x52>
 5a2:	50 3e       	cpi	r21, 0xE0	; 224
 5a4:	68 f1       	brcs	.+90     	; 0x600 <__addsf3x+0x9c>
 5a6:	1a 16       	cp	r1, r26
 5a8:	f0 40       	sbci	r31, 0x00	; 0
 5aa:	a2 2f       	mov	r26, r18
 5ac:	23 2f       	mov	r18, r19
 5ae:	34 2f       	mov	r19, r20
 5b0:	44 27       	eor	r20, r20
 5b2:	58 5f       	subi	r21, 0xF8	; 248
 5b4:	f3 cf       	rjmp	.-26     	; 0x59c <__addsf3x+0x38>
 5b6:	46 95       	lsr	r20
 5b8:	37 95       	ror	r19
 5ba:	27 95       	ror	r18
 5bc:	a7 95       	ror	r26
 5be:	f0 40       	sbci	r31, 0x00	; 0
 5c0:	53 95       	inc	r21
 5c2:	c9 f7       	brne	.-14     	; 0x5b6 <__addsf3x+0x52>
 5c4:	7e f4       	brtc	.+30     	; 0x5e4 <__addsf3x+0x80>
 5c6:	1f 16       	cp	r1, r31
 5c8:	ba 0b       	sbc	r27, r26
 5ca:	62 0b       	sbc	r22, r18
 5cc:	73 0b       	sbc	r23, r19
 5ce:	84 0b       	sbc	r24, r20
 5d0:	ba f0       	brmi	.+46     	; 0x600 <__addsf3x+0x9c>
 5d2:	91 50       	subi	r25, 0x01	; 1
 5d4:	a1 f0       	breq	.+40     	; 0x5fe <__addsf3x+0x9a>
 5d6:	ff 0f       	add	r31, r31
 5d8:	bb 1f       	adc	r27, r27
 5da:	66 1f       	adc	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	c2 f7       	brpl	.-16     	; 0x5d2 <__addsf3x+0x6e>
 5e2:	0e c0       	rjmp	.+28     	; 0x600 <__addsf3x+0x9c>
 5e4:	ba 0f       	add	r27, r26
 5e6:	62 1f       	adc	r22, r18
 5e8:	73 1f       	adc	r23, r19
 5ea:	84 1f       	adc	r24, r20
 5ec:	48 f4       	brcc	.+18     	; 0x600 <__addsf3x+0x9c>
 5ee:	87 95       	ror	r24
 5f0:	77 95       	ror	r23
 5f2:	67 95       	ror	r22
 5f4:	b7 95       	ror	r27
 5f6:	f7 95       	ror	r31
 5f8:	9e 3f       	cpi	r25, 0xFE	; 254
 5fa:	08 f0       	brcs	.+2      	; 0x5fe <__addsf3x+0x9a>
 5fc:	b0 cf       	rjmp	.-160    	; 0x55e <__addsf3+0x28>
 5fe:	93 95       	inc	r25
 600:	88 0f       	add	r24, r24
 602:	08 f0       	brcs	.+2      	; 0x606 <__addsf3x+0xa2>
 604:	99 27       	eor	r25, r25
 606:	ee 0f       	add	r30, r30
 608:	97 95       	ror	r25
 60a:	87 95       	ror	r24
 60c:	08 95       	ret

0000060e <__divsf3>:
 60e:	0e 94 1b 03 	call	0x636	; 0x636 <__divsf3x>
 612:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_round>
 616:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_pscB>
 61a:	58 f0       	brcs	.+22     	; 0x632 <__divsf3+0x24>
 61c:	0e 94 35 04 	call	0x86a	; 0x86a <__fp_pscA>
 620:	40 f0       	brcs	.+16     	; 0x632 <__divsf3+0x24>
 622:	29 f4       	brne	.+10     	; 0x62e <__divsf3+0x20>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	29 f0       	breq	.+10     	; 0x632 <__divsf3+0x24>
 628:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>
 62c:	51 11       	cpse	r21, r1
 62e:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_szero>
 632:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_nan>

00000636 <__divsf3x>:
 636:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_split3>
 63a:	68 f3       	brcs	.-38     	; 0x616 <__divsf3+0x8>

0000063c <__divsf3_pse>:
 63c:	99 23       	and	r25, r25
 63e:	b1 f3       	breq	.-20     	; 0x62c <__divsf3+0x1e>
 640:	55 23       	and	r21, r21
 642:	91 f3       	breq	.-28     	; 0x628 <__divsf3+0x1a>
 644:	95 1b       	sub	r25, r21
 646:	55 0b       	sbc	r21, r21
 648:	bb 27       	eor	r27, r27
 64a:	aa 27       	eor	r26, r26
 64c:	62 17       	cp	r22, r18
 64e:	73 07       	cpc	r23, r19
 650:	84 07       	cpc	r24, r20
 652:	38 f0       	brcs	.+14     	; 0x662 <__divsf3_pse+0x26>
 654:	9f 5f       	subi	r25, 0xFF	; 255
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	22 0f       	add	r18, r18
 65a:	33 1f       	adc	r19, r19
 65c:	44 1f       	adc	r20, r20
 65e:	aa 1f       	adc	r26, r26
 660:	a9 f3       	breq	.-22     	; 0x64c <__divsf3_pse+0x10>
 662:	35 d0       	rcall	.+106    	; 0x6ce <__divsf3_pse+0x92>
 664:	0e 2e       	mov	r0, r30
 666:	3a f0       	brmi	.+14     	; 0x676 <__divsf3_pse+0x3a>
 668:	e0 e8       	ldi	r30, 0x80	; 128
 66a:	32 d0       	rcall	.+100    	; 0x6d0 <__divsf3_pse+0x94>
 66c:	91 50       	subi	r25, 0x01	; 1
 66e:	50 40       	sbci	r21, 0x00	; 0
 670:	e6 95       	lsr	r30
 672:	00 1c       	adc	r0, r0
 674:	ca f7       	brpl	.-14     	; 0x668 <__divsf3_pse+0x2c>
 676:	2b d0       	rcall	.+86     	; 0x6ce <__divsf3_pse+0x92>
 678:	fe 2f       	mov	r31, r30
 67a:	29 d0       	rcall	.+82     	; 0x6ce <__divsf3_pse+0x92>
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	bb 1f       	adc	r27, r27
 684:	26 17       	cp	r18, r22
 686:	37 07       	cpc	r19, r23
 688:	48 07       	cpc	r20, r24
 68a:	ab 07       	cpc	r26, r27
 68c:	b0 e8       	ldi	r27, 0x80	; 128
 68e:	09 f0       	breq	.+2      	; 0x692 <__divsf3_pse+0x56>
 690:	bb 0b       	sbc	r27, r27
 692:	80 2d       	mov	r24, r0
 694:	bf 01       	movw	r22, r30
 696:	ff 27       	eor	r31, r31
 698:	93 58       	subi	r25, 0x83	; 131
 69a:	5f 4f       	sbci	r21, 0xFF	; 255
 69c:	3a f0       	brmi	.+14     	; 0x6ac <__divsf3_pse+0x70>
 69e:	9e 3f       	cpi	r25, 0xFE	; 254
 6a0:	51 05       	cpc	r21, r1
 6a2:	78 f0       	brcs	.+30     	; 0x6c2 <__divsf3_pse+0x86>
 6a4:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>
 6a8:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_szero>
 6ac:	5f 3f       	cpi	r21, 0xFF	; 255
 6ae:	e4 f3       	brlt	.-8      	; 0x6a8 <__divsf3_pse+0x6c>
 6b0:	98 3e       	cpi	r25, 0xE8	; 232
 6b2:	d4 f3       	brlt	.-12     	; 0x6a8 <__divsf3_pse+0x6c>
 6b4:	86 95       	lsr	r24
 6b6:	77 95       	ror	r23
 6b8:	67 95       	ror	r22
 6ba:	b7 95       	ror	r27
 6bc:	f7 95       	ror	r31
 6be:	9f 5f       	subi	r25, 0xFF	; 255
 6c0:	c9 f7       	brne	.-14     	; 0x6b4 <__divsf3_pse+0x78>
 6c2:	88 0f       	add	r24, r24
 6c4:	91 1d       	adc	r25, r1
 6c6:	96 95       	lsr	r25
 6c8:	87 95       	ror	r24
 6ca:	97 f9       	bld	r25, 7
 6cc:	08 95       	ret
 6ce:	e1 e0       	ldi	r30, 0x01	; 1
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	bb 1f       	adc	r27, r27
 6d8:	62 17       	cp	r22, r18
 6da:	73 07       	cpc	r23, r19
 6dc:	84 07       	cpc	r24, r20
 6de:	ba 07       	cpc	r27, r26
 6e0:	20 f0       	brcs	.+8      	; 0x6ea <__divsf3_pse+0xae>
 6e2:	62 1b       	sub	r22, r18
 6e4:	73 0b       	sbc	r23, r19
 6e6:	84 0b       	sbc	r24, r20
 6e8:	ba 0b       	sbc	r27, r26
 6ea:	ee 1f       	adc	r30, r30
 6ec:	88 f7       	brcc	.-30     	; 0x6d0 <__divsf3_pse+0x94>
 6ee:	e0 95       	com	r30
 6f0:	08 95       	ret

000006f2 <__fixsfsi>:
 6f2:	0e 94 80 03 	call	0x700	; 0x700 <__fixunssfsi>
 6f6:	68 94       	set
 6f8:	b1 11       	cpse	r27, r1
 6fa:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_szero>
 6fe:	08 95       	ret

00000700 <__fixunssfsi>:
 700:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_splitA>
 704:	88 f0       	brcs	.+34     	; 0x728 <__fixunssfsi+0x28>
 706:	9f 57       	subi	r25, 0x7F	; 127
 708:	98 f0       	brcs	.+38     	; 0x730 <__fixunssfsi+0x30>
 70a:	b9 2f       	mov	r27, r25
 70c:	99 27       	eor	r25, r25
 70e:	b7 51       	subi	r27, 0x17	; 23
 710:	b0 f0       	brcs	.+44     	; 0x73e <__fixunssfsi+0x3e>
 712:	e1 f0       	breq	.+56     	; 0x74c <__fixunssfsi+0x4c>
 714:	66 0f       	add	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	1a f0       	brmi	.+6      	; 0x724 <__fixunssfsi+0x24>
 71e:	ba 95       	dec	r27
 720:	c9 f7       	brne	.-14     	; 0x714 <__fixunssfsi+0x14>
 722:	14 c0       	rjmp	.+40     	; 0x74c <__fixunssfsi+0x4c>
 724:	b1 30       	cpi	r27, 0x01	; 1
 726:	91 f0       	breq	.+36     	; 0x74c <__fixunssfsi+0x4c>
 728:	0e 94 8e 04 	call	0x91c	; 0x91c <__fp_zero>
 72c:	b1 e0       	ldi	r27, 0x01	; 1
 72e:	08 95       	ret
 730:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_zero>
 734:	67 2f       	mov	r22, r23
 736:	78 2f       	mov	r23, r24
 738:	88 27       	eor	r24, r24
 73a:	b8 5f       	subi	r27, 0xF8	; 248
 73c:	39 f0       	breq	.+14     	; 0x74c <__fixunssfsi+0x4c>
 73e:	b9 3f       	cpi	r27, 0xF9	; 249
 740:	cc f3       	brlt	.-14     	; 0x734 <__fixunssfsi+0x34>
 742:	86 95       	lsr	r24
 744:	77 95       	ror	r23
 746:	67 95       	ror	r22
 748:	b3 95       	inc	r27
 74a:	d9 f7       	brne	.-10     	; 0x742 <__fixunssfsi+0x42>
 74c:	3e f4       	brtc	.+14     	; 0x75c <__fixunssfsi+0x5c>
 74e:	90 95       	com	r25
 750:	80 95       	com	r24
 752:	70 95       	com	r23
 754:	61 95       	neg	r22
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	8f 4f       	sbci	r24, 0xFF	; 255
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	08 95       	ret

0000075e <__floatunsisf>:
 75e:	e8 94       	clt
 760:	09 c0       	rjmp	.+18     	; 0x774 <__floatsisf+0x12>

00000762 <__floatsisf>:
 762:	97 fb       	bst	r25, 7
 764:	3e f4       	brtc	.+14     	; 0x774 <__floatsisf+0x12>
 766:	90 95       	com	r25
 768:	80 95       	com	r24
 76a:	70 95       	com	r23
 76c:	61 95       	neg	r22
 76e:	7f 4f       	sbci	r23, 0xFF	; 255
 770:	8f 4f       	sbci	r24, 0xFF	; 255
 772:	9f 4f       	sbci	r25, 0xFF	; 255
 774:	99 23       	and	r25, r25
 776:	a9 f0       	breq	.+42     	; 0x7a2 <__floatsisf+0x40>
 778:	f9 2f       	mov	r31, r25
 77a:	96 e9       	ldi	r25, 0x96	; 150
 77c:	bb 27       	eor	r27, r27
 77e:	93 95       	inc	r25
 780:	f6 95       	lsr	r31
 782:	87 95       	ror	r24
 784:	77 95       	ror	r23
 786:	67 95       	ror	r22
 788:	b7 95       	ror	r27
 78a:	f1 11       	cpse	r31, r1
 78c:	f8 cf       	rjmp	.-16     	; 0x77e <__floatsisf+0x1c>
 78e:	fa f4       	brpl	.+62     	; 0x7ce <__floatsisf+0x6c>
 790:	bb 0f       	add	r27, r27
 792:	11 f4       	brne	.+4      	; 0x798 <__floatsisf+0x36>
 794:	60 ff       	sbrs	r22, 0
 796:	1b c0       	rjmp	.+54     	; 0x7ce <__floatsisf+0x6c>
 798:	6f 5f       	subi	r22, 0xFF	; 255
 79a:	7f 4f       	sbci	r23, 0xFF	; 255
 79c:	8f 4f       	sbci	r24, 0xFF	; 255
 79e:	9f 4f       	sbci	r25, 0xFF	; 255
 7a0:	16 c0       	rjmp	.+44     	; 0x7ce <__floatsisf+0x6c>
 7a2:	88 23       	and	r24, r24
 7a4:	11 f0       	breq	.+4      	; 0x7aa <__floatsisf+0x48>
 7a6:	96 e9       	ldi	r25, 0x96	; 150
 7a8:	11 c0       	rjmp	.+34     	; 0x7cc <__floatsisf+0x6a>
 7aa:	77 23       	and	r23, r23
 7ac:	21 f0       	breq	.+8      	; 0x7b6 <__floatsisf+0x54>
 7ae:	9e e8       	ldi	r25, 0x8E	; 142
 7b0:	87 2f       	mov	r24, r23
 7b2:	76 2f       	mov	r23, r22
 7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <__floatsisf+0x5e>
 7b6:	66 23       	and	r22, r22
 7b8:	71 f0       	breq	.+28     	; 0x7d6 <__floatsisf+0x74>
 7ba:	96 e8       	ldi	r25, 0x86	; 134
 7bc:	86 2f       	mov	r24, r22
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	2a f0       	brmi	.+10     	; 0x7ce <__floatsisf+0x6c>
 7c4:	9a 95       	dec	r25
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	da f7       	brpl	.-10     	; 0x7c4 <__floatsisf+0x62>
 7ce:	88 0f       	add	r24, r24
 7d0:	96 95       	lsr	r25
 7d2:	87 95       	ror	r24
 7d4:	97 f9       	bld	r25, 7
 7d6:	08 95       	ret

000007d8 <floor>:
 7d8:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fp_trunc>
 7dc:	90 f0       	brcs	.+36     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7de:	9f 37       	cpi	r25, 0x7F	; 127
 7e0:	48 f4       	brcc	.+18     	; 0x7f4 <floor+0x1c>
 7e2:	91 11       	cpse	r25, r1
 7e4:	16 f0       	brts	.+4      	; 0x7ea <floor+0x12>
 7e6:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_szero>
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	80 e8       	ldi	r24, 0x80	; 128
 7f0:	9f eb       	ldi	r25, 0xBF	; 191
 7f2:	08 95       	ret
 7f4:	26 f4       	brtc	.+8      	; 0x7fe <floor+0x26>
 7f6:	1b 16       	cp	r1, r27
 7f8:	61 1d       	adc	r22, r1
 7fa:	71 1d       	adc	r23, r1
 7fc:	81 1d       	adc	r24, r1
 7fe:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_mintl>
 802:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_mpack>

00000806 <__fp_inf>:
 806:	97 f9       	bld	r25, 7
 808:	9f 67       	ori	r25, 0x7F	; 127
 80a:	80 e8       	ldi	r24, 0x80	; 128
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	08 95       	ret

00000812 <__fp_mintl>:
 812:	88 23       	and	r24, r24
 814:	71 f4       	brne	.+28     	; 0x832 <__fp_mintl+0x20>
 816:	77 23       	and	r23, r23
 818:	21 f0       	breq	.+8      	; 0x822 <__fp_mintl+0x10>
 81a:	98 50       	subi	r25, 0x08	; 8
 81c:	87 2b       	or	r24, r23
 81e:	76 2f       	mov	r23, r22
 820:	07 c0       	rjmp	.+14     	; 0x830 <__fp_mintl+0x1e>
 822:	66 23       	and	r22, r22
 824:	11 f4       	brne	.+4      	; 0x82a <__fp_mintl+0x18>
 826:	99 27       	eor	r25, r25
 828:	0d c0       	rjmp	.+26     	; 0x844 <__fp_mintl+0x32>
 82a:	90 51       	subi	r25, 0x10	; 16
 82c:	86 2b       	or	r24, r22
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	2a f0       	brmi	.+10     	; 0x83e <__fp_mintl+0x2c>
 834:	9a 95       	dec	r25
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	da f7       	brpl	.-10     	; 0x834 <__fp_mintl+0x22>
 83e:	88 0f       	add	r24, r24
 840:	96 95       	lsr	r25
 842:	87 95       	ror	r24
 844:	97 f9       	bld	r25, 7
 846:	08 95       	ret

00000848 <__fp_mpack>:
 848:	9f 3f       	cpi	r25, 0xFF	; 255
 84a:	31 f0       	breq	.+12     	; 0x858 <__fp_mpack_finite+0xc>

0000084c <__fp_mpack_finite>:
 84c:	91 50       	subi	r25, 0x01	; 1
 84e:	20 f4       	brcc	.+8      	; 0x858 <__fp_mpack_finite+0xc>
 850:	87 95       	ror	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	88 0f       	add	r24, r24
 85a:	91 1d       	adc	r25, r1
 85c:	96 95       	lsr	r25
 85e:	87 95       	ror	r24
 860:	97 f9       	bld	r25, 7
 862:	08 95       	ret

00000864 <__fp_nan>:
 864:	9f ef       	ldi	r25, 0xFF	; 255
 866:	80 ec       	ldi	r24, 0xC0	; 192
 868:	08 95       	ret

0000086a <__fp_pscA>:
 86a:	00 24       	eor	r0, r0
 86c:	0a 94       	dec	r0
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	18 06       	cpc	r1, r24
 874:	09 06       	cpc	r0, r25
 876:	08 95       	ret

00000878 <__fp_pscB>:
 878:	00 24       	eor	r0, r0
 87a:	0a 94       	dec	r0
 87c:	12 16       	cp	r1, r18
 87e:	13 06       	cpc	r1, r19
 880:	14 06       	cpc	r1, r20
 882:	05 06       	cpc	r0, r21
 884:	08 95       	ret

00000886 <__fp_round>:
 886:	09 2e       	mov	r0, r25
 888:	03 94       	inc	r0
 88a:	00 0c       	add	r0, r0
 88c:	11 f4       	brne	.+4      	; 0x892 <__fp_round+0xc>
 88e:	88 23       	and	r24, r24
 890:	52 f0       	brmi	.+20     	; 0x8a6 <__fp_round+0x20>
 892:	bb 0f       	add	r27, r27
 894:	40 f4       	brcc	.+16     	; 0x8a6 <__fp_round+0x20>
 896:	bf 2b       	or	r27, r31
 898:	11 f4       	brne	.+4      	; 0x89e <__fp_round+0x18>
 89a:	60 ff       	sbrs	r22, 0
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <__fp_round+0x20>
 89e:	6f 5f       	subi	r22, 0xFF	; 255
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	8f 4f       	sbci	r24, 0xFF	; 255
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	08 95       	ret

000008a8 <__fp_split3>:
 8a8:	57 fd       	sbrc	r21, 7
 8aa:	90 58       	subi	r25, 0x80	; 128
 8ac:	44 0f       	add	r20, r20
 8ae:	55 1f       	adc	r21, r21
 8b0:	59 f0       	breq	.+22     	; 0x8c8 <__fp_splitA+0x10>
 8b2:	5f 3f       	cpi	r21, 0xFF	; 255
 8b4:	71 f0       	breq	.+28     	; 0x8d2 <__fp_splitA+0x1a>
 8b6:	47 95       	ror	r20

000008b8 <__fp_splitA>:
 8b8:	88 0f       	add	r24, r24
 8ba:	97 fb       	bst	r25, 7
 8bc:	99 1f       	adc	r25, r25
 8be:	61 f0       	breq	.+24     	; 0x8d8 <__fp_splitA+0x20>
 8c0:	9f 3f       	cpi	r25, 0xFF	; 255
 8c2:	79 f0       	breq	.+30     	; 0x8e2 <__fp_splitA+0x2a>
 8c4:	87 95       	ror	r24
 8c6:	08 95       	ret
 8c8:	12 16       	cp	r1, r18
 8ca:	13 06       	cpc	r1, r19
 8cc:	14 06       	cpc	r1, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	f2 cf       	rjmp	.-28     	; 0x8b6 <__fp_split3+0xe>
 8d2:	46 95       	lsr	r20
 8d4:	f1 df       	rcall	.-30     	; 0x8b8 <__fp_splitA>
 8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <__fp_splitA+0x30>
 8d8:	16 16       	cp	r1, r22
 8da:	17 06       	cpc	r1, r23
 8dc:	18 06       	cpc	r1, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	f1 cf       	rjmp	.-30     	; 0x8c4 <__fp_splitA+0xc>
 8e2:	86 95       	lsr	r24
 8e4:	71 05       	cpc	r23, r1
 8e6:	61 05       	cpc	r22, r1
 8e8:	08 94       	sec
 8ea:	08 95       	ret

000008ec <__fp_trunc>:
 8ec:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_splitA>
 8f0:	a0 f0       	brcs	.+40     	; 0x91a <__fp_trunc+0x2e>
 8f2:	be e7       	ldi	r27, 0x7E	; 126
 8f4:	b9 17       	cp	r27, r25
 8f6:	88 f4       	brcc	.+34     	; 0x91a <__fp_trunc+0x2e>
 8f8:	bb 27       	eor	r27, r27
 8fa:	9f 38       	cpi	r25, 0x8F	; 143
 8fc:	60 f4       	brcc	.+24     	; 0x916 <__fp_trunc+0x2a>
 8fe:	16 16       	cp	r1, r22
 900:	b1 1d       	adc	r27, r1
 902:	67 2f       	mov	r22, r23
 904:	78 2f       	mov	r23, r24
 906:	88 27       	eor	r24, r24
 908:	98 5f       	subi	r25, 0xF8	; 248
 90a:	f7 cf       	rjmp	.-18     	; 0x8fa <__fp_trunc+0xe>
 90c:	86 95       	lsr	r24
 90e:	77 95       	ror	r23
 910:	67 95       	ror	r22
 912:	b1 1d       	adc	r27, r1
 914:	93 95       	inc	r25
 916:	96 39       	cpi	r25, 0x96	; 150
 918:	c8 f3       	brcs	.-14     	; 0x90c <__fp_trunc+0x20>
 91a:	08 95       	ret

0000091c <__fp_zero>:
 91c:	e8 94       	clt

0000091e <__fp_szero>:
 91e:	bb 27       	eor	r27, r27
 920:	66 27       	eor	r22, r22
 922:	77 27       	eor	r23, r23
 924:	cb 01       	movw	r24, r22
 926:	97 f9       	bld	r25, 7
 928:	08 95       	ret

0000092a <__udivmodhi4>:
 92a:	aa 1b       	sub	r26, r26
 92c:	bb 1b       	sub	r27, r27
 92e:	51 e1       	ldi	r21, 0x11	; 17
 930:	07 c0       	rjmp	.+14     	; 0x940 <__udivmodhi4_ep>

00000932 <__udivmodhi4_loop>:
 932:	aa 1f       	adc	r26, r26
 934:	bb 1f       	adc	r27, r27
 936:	a6 17       	cp	r26, r22
 938:	b7 07       	cpc	r27, r23
 93a:	10 f0       	brcs	.+4      	; 0x940 <__udivmodhi4_ep>
 93c:	a6 1b       	sub	r26, r22
 93e:	b7 0b       	sbc	r27, r23

00000940 <__udivmodhi4_ep>:
 940:	88 1f       	adc	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	5a 95       	dec	r21
 946:	a9 f7       	brne	.-22     	; 0x932 <__udivmodhi4_loop>
 948:	80 95       	com	r24
 94a:	90 95       	com	r25
 94c:	bc 01       	movw	r22, r24
 94e:	cd 01       	movw	r24, r26
 950:	08 95       	ret

00000952 <__itoa_ncheck>:
 952:	bb 27       	eor	r27, r27
 954:	4a 30       	cpi	r20, 0x0A	; 10
 956:	31 f4       	brne	.+12     	; 0x964 <__itoa_ncheck+0x12>
 958:	99 23       	and	r25, r25
 95a:	22 f4       	brpl	.+8      	; 0x964 <__itoa_ncheck+0x12>
 95c:	bd e2       	ldi	r27, 0x2D	; 45
 95e:	90 95       	com	r25
 960:	81 95       	neg	r24
 962:	9f 4f       	sbci	r25, 0xFF	; 255
 964:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__utoa_common>

00000968 <__utoa_ncheck>:
 968:	bb 27       	eor	r27, r27

0000096a <__utoa_common>:
 96a:	fb 01       	movw	r30, r22
 96c:	55 27       	eor	r21, r21
 96e:	aa 27       	eor	r26, r26
 970:	88 0f       	add	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	aa 1f       	adc	r26, r26
 976:	a4 17       	cp	r26, r20
 978:	10 f0       	brcs	.+4      	; 0x97e <__utoa_common+0x14>
 97a:	a4 1b       	sub	r26, r20
 97c:	83 95       	inc	r24
 97e:	50 51       	subi	r21, 0x10	; 16
 980:	b9 f7       	brne	.-18     	; 0x970 <__utoa_common+0x6>
 982:	a0 5d       	subi	r26, 0xD0	; 208
 984:	aa 33       	cpi	r26, 0x3A	; 58
 986:	08 f0       	brcs	.+2      	; 0x98a <__utoa_common+0x20>
 988:	a9 5d       	subi	r26, 0xD9	; 217
 98a:	a1 93       	st	Z+, r26
 98c:	00 97       	sbiw	r24, 0x00	; 0
 98e:	79 f7       	brne	.-34     	; 0x96e <__utoa_common+0x4>
 990:	b1 11       	cpse	r27, r1
 992:	b1 93       	st	Z+, r27
 994:	11 92       	st	Z+, r1
 996:	cb 01       	movw	r24, r22
 998:	0c 94 ce 04 	jmp	0x99c	; 0x99c <strrev>

0000099c <strrev>:
 99c:	dc 01       	movw	r26, r24
 99e:	fc 01       	movw	r30, r24
 9a0:	67 2f       	mov	r22, r23
 9a2:	71 91       	ld	r23, Z+
 9a4:	77 23       	and	r23, r23
 9a6:	e1 f7       	brne	.-8      	; 0x9a0 <strrev+0x4>
 9a8:	32 97       	sbiw	r30, 0x02	; 2
 9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <strrev+0x18>
 9ac:	7c 91       	ld	r23, X
 9ae:	6d 93       	st	X+, r22
 9b0:	70 83       	st	Z, r23
 9b2:	62 91       	ld	r22, -Z
 9b4:	ae 17       	cp	r26, r30
 9b6:	bf 07       	cpc	r27, r31
 9b8:	c8 f3       	brcs	.-14     	; 0x9ac <strrev+0x10>
 9ba:	08 95       	ret

000009bc <_exit>:
 9bc:	f8 94       	cli

000009be <__stop_program>:
 9be:	ff cf       	rjmp	.-2      	; 0x9be <__stop_program>
