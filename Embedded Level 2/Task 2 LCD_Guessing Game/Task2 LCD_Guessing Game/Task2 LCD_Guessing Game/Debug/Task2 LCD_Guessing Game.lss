
Task2 LCD_Guessing Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00000c4e  00000ce2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000b6  008000b6  00000d38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001242  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000739  00000000  00000000  000020b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000768  00000000  00000000  000027ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000500  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000074d  00000000  00000000  00003674  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003dc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3b       	cpi	r26, 0xB6	; 182
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 eb       	ldi	r26, 0xB6	; 182
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3b       	cpi	r26, 0xB9	; 185
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 48 02 	call	0x490	; 0x490 <main>
  8a:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:


void DIO_init(vuint8_t* PORT_, vuint8_t* DDR_, uint8_t dircetion, uint8_t bitNumber)
{
	
	if(dircetion == INPUT)
  92:	41 11       	cpse	r20, r1
  94:	0d c0       	rjmp	.+26     	; 0xb0 <DIO_init+0x1e>
	{
		*DDR_ &= ~(1 << bitNumber);
  96:	fb 01       	movw	r30, r22
  98:	30 81       	ld	r19, Z
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_init+0x12>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	2a 95       	dec	r18
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_init+0xe>
  a8:	80 95       	com	r24
  aa:	83 23       	and	r24, r19
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret
	}
	else
	{	
		*DDR_ |= (1 << bitNumber);
  b0:	fb 01       	movw	r30, r22
  b2:	30 81       	ld	r19, Z
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_init+0x2c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	2a 95       	dec	r18
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_init+0x28>
  c2:	83 2b       	or	r24, r19
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <DIO_read>:
	}
}
uint8_t DIO_read (vuint8_t* PIN_, uint8_t bitNumber)
{
	return ((*PIN_ & (1 << bitNumber)) == (1 << bitNumber));	
  c8:	fc 01       	movw	r30, r24
  ca:	20 81       	ld	r18, Z
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_read+0xe>
  d2:	44 0f       	add	r20, r20
  d4:	55 1f       	adc	r21, r21
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_read+0xa>
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	24 23       	and	r18, r20
  de:	35 23       	and	r19, r21
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	42 17       	cp	r20, r18
  e4:	53 07       	cpc	r21, r19
  e6:	09 f0       	breq	.+2      	; 0xea <DIO_read+0x22>
  e8:	80 e0       	ldi	r24, 0x00	; 0
}
  ea:	08 95       	ret

000000ec <DIO_write>:
void DIO_write(vuint8_t* PORT_, uint8_t bitNumber, uint8_t value)
{
	if(value != 0)
  ec:	44 23       	and	r20, r20
  ee:	61 f0       	breq	.+24     	; 0x108 <DIO_write+0x1c>
	{
		*PORT_ |= (1<<bitNumber);
  f0:	fc 01       	movw	r30, r24
  f2:	40 81       	ld	r20, Z
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_write+0x12>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_write+0xe>
 102:	24 2b       	or	r18, r20
 104:	20 83       	st	Z, r18
 106:	08 95       	ret
	}
	else
	{
		*PORT_ &= ~(1<<bitNumber);
 108:	fc 01       	movw	r30, r24
 10a:	40 81       	ld	r20, Z
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_write+0x2a>
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_write+0x26>
 11a:	20 95       	com	r18
 11c:	24 23       	and	r18, r20
 11e:	20 83       	st	Z, r18
 120:	08 95       	ret

00000122 <_delay_ms>:
#define CyclesToOverFlowNormal 256 // 2^8
#define CyclesToOverFlowInterr 65536 // 2^16
#define duck 1

void _delay_ms(int time)
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
	if(time > 0){
 12a:	18 16       	cp	r1, r24
 12c:	19 06       	cpc	r1, r25
 12e:	0c f0       	brlt	.+2      	; 0x132 <_delay_ms+0x10>
 130:	3f c0       	rjmp	.+126    	; 0x1b0 <_delay_ms+0x8e>
 132:	8c 01       	movw	r16, r24
		
		double timeToOverflow = CyclesToOverFlowNormal * duck; // 262.144
		int nIterations = (int)(time / timeToOverflow); // 1
 134:	bc 01       	movw	r22, r24
 136:	99 0f       	add	r25, r25
 138:	88 0b       	sbc	r24, r24
 13a:	99 0b       	sbc	r25, r25
 13c:	0e 94 cf 03 	call	0x79e	; 0x79e <__floatsisf>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 e8       	ldi	r20, 0x80	; 128
 146:	5b e3       	ldi	r21, 0x3B	; 59
 148:	0e 94 9c 04 	call	0x938	; 0x938 <__mulsf3>
 14c:	0e 94 97 03 	call	0x72e	; 0x72e <__fixsfsi>
 150:	eb 01       	movw	r28, r22
		int extra = time % (int)((timeToOverflow)); // 37
 152:	b8 01       	movw	r22, r16
 154:	70 78       	andi	r23, 0x80	; 128
 156:	77 23       	and	r23, r23
 158:	2c f4       	brge	.+10     	; 0x164 <_delay_ms+0x42>
 15a:	61 50       	subi	r22, 0x01	; 1
 15c:	71 09       	sbc	r23, r1
 15e:	7f 6f       	ori	r23, 0xFF	; 255
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
		int extra_TCNT0_initial_value = (int)((timeToOverflow - extra)/duck); // 262.144 - 37 = 225.144
 164:	07 2e       	mov	r0, r23
 166:	00 0c       	add	r0, r0
 168:	88 0b       	sbc	r24, r24
 16a:	99 0b       	sbc	r25, r25
 16c:	0e 94 cf 03 	call	0x79e	; 0x79e <__floatsisf>
 170:	9b 01       	movw	r18, r22
 172:	ac 01       	movw	r20, r24
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	93 e4       	ldi	r25, 0x43	; 67
 17c:	0e 94 a1 02 	call	0x542	; 0x542 <__subsf3>
 180:	0e 94 97 03 	call	0x72e	; 0x72e <__fixsfsi>
		
		Timer0_control = 0b00000101;	// Timer0, normal mode, /1024 pre-scalar
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	83 bf       	out	0x33, r24	; 51
		for(int iterator = 0 ; iterator < nIterations ;iterator++)
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	07 c0       	rjmp	.+14     	; 0x19c <_delay_ms+0x7a>
		{
			Timer0_data = 0x00;
 18e:	12 be       	out	0x32, r1	; 50
			while(Timer0_overflow_flag == 0);  // Wait for TOV0 to roll overs
 190:	08 b6       	in	r0, 0x38	; 56
 192:	00 fe       	sbrs	r0, 0
 194:	fd cf       	rjmp	.-6      	; 0x190 <_delay_ms+0x6e>
			Timer0_flags = 0x01;	// Clear TOV0 flag
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	28 bf       	out	0x38, r18	; 56
		int nIterations = (int)(time / timeToOverflow); // 1
		int extra = time % (int)((timeToOverflow)); // 37
		int extra_TCNT0_initial_value = (int)((timeToOverflow - extra)/duck); // 262.144 - 37 = 225.144
		
		Timer0_control = 0b00000101;	// Timer0, normal mode, /1024 pre-scalar
		for(int iterator = 0 ; iterator < nIterations ;iterator++)
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	8c 17       	cp	r24, r28
 19e:	9d 07       	cpc	r25, r29
 1a0:	b4 f3       	brlt	.-20     	; 0x18e <_delay_ms+0x6c>
			Timer0_data = 0x00;
			while(Timer0_overflow_flag == 0);  // Wait for TOV0 to roll overs
			Timer0_flags = 0x01;	// Clear TOV0 flag
		}
		
		Timer0_data = extra_TCNT0_initial_value; // setting the initial value of TCVTO to be 256 - 37 = 219
 1a2:	62 bf       	out	0x32, r22	; 50
		while(Timer0_overflow_flag == 0);
 1a4:	08 b6       	in	r0, 0x38	; 56
 1a6:	00 fe       	sbrs	r0, 0
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <_delay_ms+0x82>
		Timer0_flags = 0x01;  		// Clear TOV0 flag
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	88 bf       	out	0x38, r24	; 56
		Timer0_control = 0x00; // disable timer0
 1ae:	13 be       	out	0x33, r1	; 51
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <lcd_cmd>:

#include "../macros.h"
void lcd_cmd(int data)
{
	
	lcd_control	&= ~(1 << RS);
 1ba:	95 b3       	in	r25, 0x15	; 21
 1bc:	9e 7f       	andi	r25, 0xFE	; 254
 1be:	95 bb       	out	0x15, r25	; 21
	lcd_data = data;
 1c0:	82 bb       	out	0x12, r24	; 18
	lcd_control |= (1 << EN);
 1c2:	85 b3       	in	r24, 0x15	; 21
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 91 00 	call	0x122	; 0x122 <_delay_ms>
	lcd_control &= ~(1 << EN);
 1d0:	85 b3       	in	r24, 0x15	; 21
 1d2:	8b 7f       	andi	r24, 0xFB	; 251
 1d4:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 91 00 	call	0x122	; 0x122 <_delay_ms>
 1de:	08 95       	ret

000001e0 <Lcd_Set_Cursor>:
}


void Lcd_Set_Cursor(char a, char b)
{
	if(a == 1)
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	39 f4       	brne	.+14     	; 0x1f2 <Lcd_Set_Cursor+0x12>
	lcd_cmd(0x80 + b);
 1e4:	86 2f       	mov	r24, r22
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	80 58       	subi	r24, 0x80	; 128
 1ea:	9f 4f       	sbci	r25, 0xFF	; 255
 1ec:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
 1f0:	08 95       	ret
	else if(a == 2)
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	31 f4       	brne	.+12     	; 0x202 <Lcd_Set_Cursor+0x22>
	lcd_cmd(0xC0 + b);
 1f6:	86 2f       	mov	r24, r22
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	80 54       	subi	r24, 0x40	; 64
 1fc:	9f 4f       	sbci	r25, 0xFF	; 255
 1fe:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
 202:	08 95       	ret

00000204 <lcd_init>:
	return 	(uint8_t)rand() % 10;
}

void lcd_init(void)
{
	DDRD = 0xf0;
 204:	80 ef       	ldi	r24, 0xF0	; 240
 206:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x07;
 208:	87 e0       	ldi	r24, 0x07	; 7
 20a:	84 bb       	out	0x14, r24	; 20

	lcd_control	&= ~(1 << RS);
 20c:	85 b3       	in	r24, 0x15	; 21
 20e:	8e 7f       	andi	r24, 0xFE	; 254
 210:	85 bb       	out	0x15, r24	; 21
	lcd_control &= ~(1 << RW);
 212:	85 b3       	in	r24, 0x15	; 21
 214:	8d 7f       	andi	r24, 0xFD	; 253
 216:	85 bb       	out	0x15, r24	; 21
	lcd_control &= ~(1 << EN);
 218:	85 b3       	in	r24, 0x15	; 21
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	85 bb       	out	0x15, r24	; 21



	lcd_cmd(0x38);    //function set 8-bit, 2-line display , 5x8 dots
 21e:	88 e3       	ldi	r24, 0x38	; 56
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
	lcd_cmd(0x0c);    //display on,cursor off,blink off
 226:	8c e0       	ldi	r24, 0x0C	; 12
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
	lcd_cmd(0x01);    //clear display
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
	lcd_cmd(0x06);    //entry mode, set increment
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
 23e:	08 95       	ret

00000240 <lcd_write_char>:
}

void lcd_write_char(int data)
{
	
	lcd_control	|= (1 << RS);
 240:	95 b3       	in	r25, 0x15	; 21
 242:	91 60       	ori	r25, 0x01	; 1
 244:	95 bb       	out	0x15, r25	; 21
	lcd_data = data;
 246:	82 bb       	out	0x12, r24	; 18
	lcd_control |= (1 << EN);
 248:	85 b3       	in	r24, 0x15	; 21
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 91 00 	call	0x122	; 0x122 <_delay_ms>
	lcd_control &= ~(1 << EN);
 256:	85 b3       	in	r24, 0x15	; 21
 258:	8b 7f       	andi	r24, 0xFB	; 251
 25a:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1);
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 91 00 	call	0x122	; 0x122 <_delay_ms>
 264:	08 95       	ret

00000266 <lcd_write_string>:
}


void lcd_write_string(char* str)
{
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	8c 01       	movw	r16, r24
	for(int i = 0 ; str[i] != '\0' ; i++)
 270:	c0 e0       	ldi	r28, 0x00	; 0
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	04 c0       	rjmp	.+8      	; 0x27e <lcd_write_string+0x18>
	{
		lcd_write_char(str[i]);
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 20 01 	call	0x240	; 0x240 <lcd_write_char>
}


void lcd_write_string(char* str)
{
	for(int i = 0 ; str[i] != '\0' ; i++)
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	f8 01       	movw	r30, r16
 280:	ec 0f       	add	r30, r28
 282:	fd 1f       	adc	r31, r29
 284:	80 81       	ld	r24, Z
 286:	81 11       	cpse	r24, r1
 288:	f6 cf       	rjmp	.-20     	; 0x276 <lcd_write_string+0x10>
	{
		lcd_write_char(str[i]);
	}
	
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <timer_init_interr>:
	led_write(&PORTA_Data,PORTA1,ON);
	cli();
}
void timer_init_interr(int time) // Timer 1
{
	delayTime = ceil(CyclesToOverFlowInterr - time/1.024);
 294:	bc 01       	movw	r22, r24
 296:	99 0f       	add	r25, r25
 298:	88 0b       	sbc	r24, r24
 29a:	99 0b       	sbc	r25, r25
 29c:	0e 94 cf 03 	call	0x79e	; 0x79e <__floatsisf>
 2a0:	2f e6       	ldi	r18, 0x6F	; 111
 2a2:	32 e1       	ldi	r19, 0x12	; 18
 2a4:	43 e8       	ldi	r20, 0x83	; 131
 2a6:	5f e3       	ldi	r21, 0x3F	; 63
 2a8:	0e 94 25 03 	call	0x64a	; 0x64a <__divsf3>
 2ac:	9b 01       	movw	r18, r22
 2ae:	ac 01       	movw	r20, r24
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	80 e8       	ldi	r24, 0x80	; 128
 2b6:	97 e4       	ldi	r25, 0x47	; 71
 2b8:	0e 94 a1 02 	call	0x542	; 0x542 <__subsf3>
 2bc:	0e 94 0e 03 	call	0x61c	; 0x61c <ceil>
 2c0:	0e 94 97 03 	call	0x72e	; 0x72e <__fixsfsi>
 2c4:	70 93 b8 00 	sts	0x00B8, r23	; 0x8000b8 <delayTime+0x1>
 2c8:	60 93 b7 00 	sts	0x00B7, r22	; 0x8000b7 <delayTime>
	TCNT1 =  delayTime;  // combines TCNT1H and TCNT1L
 2cc:	7d bd       	out	0x2d, r23	; 45
 2ce:	6c bd       	out	0x2c, r22	; 44
	
	Timer1_control_regA = 0x00;
 2d0:	1f bc       	out	0x2f, r1	; 47
	Timer1_control_regB = 0b00000101;  // Timer mode with 1024 prescler
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	8e bd       	out	0x2e, r24	; 46
	Timer1_interr_mask = 0x04 ;   // Enable timer1 overflow interrupt(TOIE1)
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	89 bf       	out	0x39, r24	; 57
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
 2da:	78 94       	sei
 2dc:	08 95       	ret

000002de <led_init>:
#include "../Timer_Driver/timer.h"
#include "../Led_Driver/led.h"
#include "../macros.h"

void led_init(vuint8_t* PORT_, vuint8_t* DDR_, int8_t bitNumber)
{
 2de:	24 2f       	mov	r18, r20
	DIO_init(PORT_,DDR_,OUTPUT,bitNumber);
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
 2e6:	08 95       	ret

000002e8 <led_write>:
}

void led_write(vuint8_t* PORT_, int8_t bitNumber, int8_t value)
{
	DIO_write(PORT_,bitNumber,value);
 2e8:	0e 94 76 00 	call	0xec	; 0xec <DIO_write>
 2ec:	08 95       	ret

000002ee <__vector_9>:


int delayTime ; //global
void __vector_9 (void) __attribute__ ((signal,used)) ;
void __vector_9 (void) // Timer1 ISR // executed if TOV1 is set in TIFR
{
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	4f 93       	push	r20
 2fe:	5f 93       	push	r21
 300:	6f 93       	push	r22
 302:	7f 93       	push	r23
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
	timeIsOver = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__data_end>
	led_write(&PORTA_Data,PORTA1,ON);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	8b e3       	ldi	r24, 0x3B	; 59
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 74 01 	call	0x2e8	; 0x2e8 <led_write>
	cli();
 326:	f8 94       	cli
}
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	bf 91       	pop	r27
 32e:	af 91       	pop	r26
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	7f 91       	pop	r23
 336:	6f 91       	pop	r22
 338:	5f 91       	pop	r21
 33a:	4f 91       	pop	r20
 33c:	3f 91       	pop	r19
 33e:	2f 91       	pop	r18
 340:	0f 90       	pop	r0
 342:	0f be       	out	0x3f, r0	; 63
 344:	0f 90       	pop	r0
 346:	1f 90       	pop	r1
 348:	18 95       	reti

0000034a <button_init>:
#include "../DIO_Driver/dio.h"
#include "../Led_Driver/led.h"
#include "../Timer_Driver/timer.h"

void button_init(vuint8_t* PORT_, vuint8_t* DDR_, uint8_t bitNumber)
{
 34a:	24 2f       	mov	r18, r20
	DIO_init(PORT_,DDR_,INPUT,bitNumber);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
 352:	08 95       	ret

00000354 <button_pressed>:
}

uint8_t button_pressed(vuint8_t* PIN_, uint8_t bitNumber)
{
	return DIO_read(PIN_,bitNumber);
 354:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_read>
}
 358:	08 95       	ret

0000035a <app_init>:
#include "Button_Driver/button.h"
#include "Led_Driver/led.h"
#include "Timer_Driver/timer.h"
void app_init(void)
{
	lcd_init();
 35a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_init>
	button_init(&PORTB_Data,&PORTB_Dir,2);
 35e:	42 e0       	ldi	r20, 0x02	; 2
 360:	67 e3       	ldi	r22, 0x37	; 55
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	88 e3       	ldi	r24, 0x38	; 56
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 a5 01 	call	0x34a	; 0x34a <button_init>
	led_init(&PORTA_Data,&PORTA_Dir,0);
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	6a e3       	ldi	r22, 0x3A	; 58
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	8b e3       	ldi	r24, 0x3B	; 59
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 6f 01 	call	0x2de	; 0x2de <led_init>
	led_init(&PORTA_Data,&PORTA_Dir,1);
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	6a e3       	ldi	r22, 0x3A	; 58
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	8b e3       	ldi	r24, 0x3B	; 59
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 6f 01 	call	0x2de	; 0x2de <led_init>
 388:	08 95       	ret

0000038a <render_main_screen>:
}


void render_main_screen(void)
{
	Lcd_Set_Cursor(1,0);
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd_Set_Cursor>
	lcd_write_string("Please Guess");
 392:	84 e6       	ldi	r24, 0x64	; 100
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 33 01 	call	0x266	; 0x266 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd_Set_Cursor>
	lcd_write_string("an Integer:");
 3a2:	81 e7       	ldi	r24, 0x71	; 113
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_write_string>
 3aa:	08 95       	ret

000003ac <render_win_screen>:
}
void render_win_screen(char* number)
{
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
	Lcd_Set_Cursor(1,4);
 3ba:	64 e0       	ldi	r22, 0x04	; 4
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd_Set_Cursor>
	lcd_write_string("YOU WON");
 3c2:	8d e7       	ldi	r24, 0x7D	; 125
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 3d2:	85 e8       	ldi	r24, 0x85	; 133
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_write_string>
	lcd_write_string(number);
 3da:	ce 01       	movw	r24, r28
 3dc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_write_string>
	_delay_ms(2000);
 3e0:	80 ed       	ldi	r24, 0xD0	; 208
 3e2:	97 e0       	ldi	r25, 0x07	; 7
 3e4:	0e 94 91 00 	call	0x122	; 0x122 <_delay_ms>
	lcd_cmd(0x01);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <render_loss_screen>:
void render_loss_screen(char* number)
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
	Lcd_Set_Cursor(1,4);
 404:	64 e0       	ldi	r22, 0x04	; 4
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd_Set_Cursor>
	lcd_write_string("YOU LOST");
 40c:	8e e8       	ldi	r24, 0x8E	; 142
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 33 01 	call	0x266	; 0x266 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 41c:	85 e8       	ldi	r24, 0x85	; 133
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 33 01 	call	0x266	; 0x266 <lcd_write_string>
	lcd_write_string(number);
 424:	ce 01       	movw	r24, r28
 426:	0e 94 33 01 	call	0x266	; 0x266 <lcd_write_string>
	_delay_ms(2000);
 42a:	80 ed       	ldi	r24, 0xD0	; 208
 42c:	97 e0       	ldi	r25, 0x07	; 7
 42e:	0e 94 91 00 	call	0x122	; 0x122 <_delay_ms>
	lcd_cmd(0x01);
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <render_range_invalid_screen>:
void render_range_invalid_screen()
{
	lcd_cmd(0x01);
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
	Lcd_Set_Cursor(1,0);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd_Set_Cursor>
	lcd_write_string("The Valid Range");
 450:	87 e9       	ldi	r24, 0x97	; 151
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 33 01 	call	0x266	; 0x266 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd_Set_Cursor>
	lcd_write_string("from 1 -> 15:");
 460:	87 ea       	ldi	r24, 0xA7	; 167
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 33 01 	call	0x266	; 0x266 <lcd_write_string>
	_delay_ms(2000);
 468:	80 ed       	ldi	r24, 0xD0	; 208
 46a:	97 e0       	ldi	r25, 0x07	; 7
 46c:	0e 94 91 00 	call	0x122	; 0x122 <_delay_ms>
	lcd_cmd(0x01);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>
 478:	08 95       	ret

0000047a <rand_int>:
}
uint8_t rand_int(uint8_t seed)
{
	srand(seed);
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 82 05 	call	0xb04	; 0xb04 <srand>
	return (rand()%14+1); // random number between 1 and 15 inclusive
 480:	0e 94 7d 05 	call	0xafa	; 0xafa <rand>
 484:	6e e0       	ldi	r22, 0x0E	; 14
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	0e 94 09 05 	call	0xa12	; 0xa12 <__divmodhi4>
}
 48c:	8f 5f       	subi	r24, 0xFF	; 255
 48e:	08 95       	ret

00000490 <main>:
#include "macros.h"
#include "app.h"


int main()
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	00 d0       	rcall	.+0      	; 0x496 <main+0x6>
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62

	app_init();
 49a:	0e 94 ad 01 	call	0x35a	; 0x35a <app_init>
	uint8_t nPresses  = 0;

	for(int seed = 0;1;seed++)
 49e:	00 e0       	ldi	r16, 0x00	; 0
 4a0:	10 e0       	ldi	r17, 0x00	; 0

int main()
{

	app_init();
	uint8_t nPresses  = 0;
 4a2:	f1 2c       	mov	r15, r1

	for(int seed = 0;1;seed++)
	{

		render_main_screen();
 4a4:	0e 94 c5 01 	call	0x38a	; 0x38a <render_main_screen>
		if(timeIsOver)
 4a8:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end>
 4ac:	88 23       	and	r24, r24
 4ae:	21 f1       	breq	.+72     	; 0x4f8 <main+0x68>
		{
			uint8_t number = rand_int(seed);
 4b0:	80 2f       	mov	r24, r16
 4b2:	0e 94 3d 02 	call	0x47a	; 0x47a <rand_int>
 4b6:	e8 2e       	mov	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4b8:	4a e0       	ldi	r20, 0x0A	; 10
 4ba:	be 01       	movw	r22, r28
 4bc:	6f 5f       	subi	r22, 0xFF	; 255
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__itoa_ncheck>
			char snumber[2] ;
			itoa(number,snumber,10);
			
			lcd_cmd(0x01);
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_cmd>

			if(nPresses > 15)
 4ce:	8f e0       	ldi	r24, 0x0F	; 15
 4d0:	8f 15       	cp	r24, r15
 4d2:	18 f4       	brcc	.+6      	; 0x4da <main+0x4a>
			{
				render_range_invalid_screen();
 4d4:	0e 94 20 02 	call	0x440	; 0x440 <render_range_invalid_screen>
 4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <main+0x60>
			}
			else if(nPresses == number)
 4da:	fe 10       	cpse	r15, r14
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <main+0x58>
			{
				render_win_screen(snumber);
 4de:	ce 01       	movw	r24, r28
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <render_win_screen>
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <main+0x60>
			}
			else
			{
				render_loss_screen(snumber);
 4e8:	ce 01       	movw	r24, r28
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <render_loss_screen>
			}
			timeIsOver = 0;
 4f0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__data_end>
			nPresses = 0;
 4f4:	f1 2c       	mov	r15, r1
 4f6:	0c c0       	rjmp	.+24     	; 0x510 <main+0x80>
		}
		else
		{
			led_write(&PORTA_Data,red_led,OFF);
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	8b e3       	ldi	r24, 0x3B	; 59
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 74 01 	call	0x2e8	; 0x2e8 <led_write>
			led_write(&PORTA_Data,yellow_led,OFF);
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	8b e3       	ldi	r24, 0x3B	; 59
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <led_write>
		}
		
		if(button_pressed(&PORTB_Pin,2))
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	86 e3       	ldi	r24, 0x36	; 54
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 aa 01 	call	0x354	; 0x354 <button_pressed>
 51a:	88 23       	and	r24, r24
 51c:	79 f0       	breq	.+30     	; 0x53c <main+0xac>
		{
			timer_init_interr(2000);
 51e:	80 ed       	ldi	r24, 0xD0	; 208
 520:	97 e0       	ldi	r25, 0x07	; 7
 522:	0e 94 4a 01 	call	0x294	; 0x294 <timer_init_interr>
			led_write(&PORTA_Data,PORTA0,ON);
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	8b e3       	ldi	r24, 0x3B	; 59
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <led_write>
			_delay_ms(50);
 532:	82 e3       	ldi	r24, 0x32	; 50
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 91 00 	call	0x122	; 0x122 <_delay_ms>
			nPresses++;
 53a:	f3 94       	inc	r15
{

	app_init();
	uint8_t nPresses  = 0;

	for(int seed = 0;1;seed++)
 53c:	0f 5f       	subi	r16, 0xFF	; 255
 53e:	1f 4f       	sbci	r17, 0xFF	; 255
			led_write(&PORTA_Data,PORTA0,ON);
			_delay_ms(50);
			nPresses++;
		}
		
	}
 540:	b1 cf       	rjmp	.-158    	; 0x4a4 <main+0x14>

00000542 <__subsf3>:
 542:	50 58       	subi	r21, 0x80	; 128

00000544 <__addsf3>:
 544:	bb 27       	eor	r27, r27
 546:	aa 27       	eor	r26, r26
 548:	0e 94 b9 02 	call	0x572	; 0x572 <__addsf3x>
 54c:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_round>
 550:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_pscA>
 554:	38 f0       	brcs	.+14     	; 0x564 <__addsf3+0x20>
 556:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscB>
 55a:	20 f0       	brcs	.+8      	; 0x564 <__addsf3+0x20>
 55c:	39 f4       	brne	.+14     	; 0x56c <__addsf3+0x28>
 55e:	9f 3f       	cpi	r25, 0xFF	; 255
 560:	19 f4       	brne	.+6      	; 0x568 <__addsf3+0x24>
 562:	26 f4       	brtc	.+8      	; 0x56c <__addsf3+0x28>
 564:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_nan>
 568:	0e f4       	brtc	.+2      	; 0x56c <__addsf3+0x28>
 56a:	e0 95       	com	r30
 56c:	e7 fb       	bst	r30, 7
 56e:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>

00000572 <__addsf3x>:
 572:	e9 2f       	mov	r30, r25
 574:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fp_split3>
 578:	58 f3       	brcs	.-42     	; 0x550 <__addsf3+0xc>
 57a:	ba 17       	cp	r27, r26
 57c:	62 07       	cpc	r22, r18
 57e:	73 07       	cpc	r23, r19
 580:	84 07       	cpc	r24, r20
 582:	95 07       	cpc	r25, r21
 584:	20 f0       	brcs	.+8      	; 0x58e <__addsf3x+0x1c>
 586:	79 f4       	brne	.+30     	; 0x5a6 <__addsf3x+0x34>
 588:	a6 f5       	brtc	.+104    	; 0x5f2 <__addsf3x+0x80>
 58a:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_zero>
 58e:	0e f4       	brtc	.+2      	; 0x592 <__addsf3x+0x20>
 590:	e0 95       	com	r30
 592:	0b 2e       	mov	r0, r27
 594:	ba 2f       	mov	r27, r26
 596:	a0 2d       	mov	r26, r0
 598:	0b 01       	movw	r0, r22
 59a:	b9 01       	movw	r22, r18
 59c:	90 01       	movw	r18, r0
 59e:	0c 01       	movw	r0, r24
 5a0:	ca 01       	movw	r24, r20
 5a2:	a0 01       	movw	r20, r0
 5a4:	11 24       	eor	r1, r1
 5a6:	ff 27       	eor	r31, r31
 5a8:	59 1b       	sub	r21, r25
 5aa:	99 f0       	breq	.+38     	; 0x5d2 <__addsf3x+0x60>
 5ac:	59 3f       	cpi	r21, 0xF9	; 249
 5ae:	50 f4       	brcc	.+20     	; 0x5c4 <__addsf3x+0x52>
 5b0:	50 3e       	cpi	r21, 0xE0	; 224
 5b2:	68 f1       	brcs	.+90     	; 0x60e <__addsf3x+0x9c>
 5b4:	1a 16       	cp	r1, r26
 5b6:	f0 40       	sbci	r31, 0x00	; 0
 5b8:	a2 2f       	mov	r26, r18
 5ba:	23 2f       	mov	r18, r19
 5bc:	34 2f       	mov	r19, r20
 5be:	44 27       	eor	r20, r20
 5c0:	58 5f       	subi	r21, 0xF8	; 248
 5c2:	f3 cf       	rjmp	.-26     	; 0x5aa <__addsf3x+0x38>
 5c4:	46 95       	lsr	r20
 5c6:	37 95       	ror	r19
 5c8:	27 95       	ror	r18
 5ca:	a7 95       	ror	r26
 5cc:	f0 40       	sbci	r31, 0x00	; 0
 5ce:	53 95       	inc	r21
 5d0:	c9 f7       	brne	.-14     	; 0x5c4 <__addsf3x+0x52>
 5d2:	7e f4       	brtc	.+30     	; 0x5f2 <__addsf3x+0x80>
 5d4:	1f 16       	cp	r1, r31
 5d6:	ba 0b       	sbc	r27, r26
 5d8:	62 0b       	sbc	r22, r18
 5da:	73 0b       	sbc	r23, r19
 5dc:	84 0b       	sbc	r24, r20
 5de:	ba f0       	brmi	.+46     	; 0x60e <__addsf3x+0x9c>
 5e0:	91 50       	subi	r25, 0x01	; 1
 5e2:	a1 f0       	breq	.+40     	; 0x60c <__addsf3x+0x9a>
 5e4:	ff 0f       	add	r31, r31
 5e6:	bb 1f       	adc	r27, r27
 5e8:	66 1f       	adc	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	88 1f       	adc	r24, r24
 5ee:	c2 f7       	brpl	.-16     	; 0x5e0 <__addsf3x+0x6e>
 5f0:	0e c0       	rjmp	.+28     	; 0x60e <__addsf3x+0x9c>
 5f2:	ba 0f       	add	r27, r26
 5f4:	62 1f       	adc	r22, r18
 5f6:	73 1f       	adc	r23, r19
 5f8:	84 1f       	adc	r24, r20
 5fa:	48 f4       	brcc	.+18     	; 0x60e <__addsf3x+0x9c>
 5fc:	87 95       	ror	r24
 5fe:	77 95       	ror	r23
 600:	67 95       	ror	r22
 602:	b7 95       	ror	r27
 604:	f7 95       	ror	r31
 606:	9e 3f       	cpi	r25, 0xFE	; 254
 608:	08 f0       	brcs	.+2      	; 0x60c <__addsf3x+0x9a>
 60a:	b0 cf       	rjmp	.-160    	; 0x56c <__addsf3+0x28>
 60c:	93 95       	inc	r25
 60e:	88 0f       	add	r24, r24
 610:	08 f0       	brcs	.+2      	; 0x614 <__addsf3x+0xa2>
 612:	99 27       	eor	r25, r25
 614:	ee 0f       	add	r30, r30
 616:	97 95       	ror	r25
 618:	87 95       	ror	r24
 61a:	08 95       	ret

0000061c <ceil>:
 61c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fp_trunc>
 620:	90 f0       	brcs	.+36     	; 0x646 <ceil+0x2a>
 622:	9f 37       	cpi	r25, 0x7F	; 127
 624:	48 f4       	brcc	.+18     	; 0x638 <ceil+0x1c>
 626:	91 11       	cpse	r25, r1
 628:	16 f4       	brtc	.+4      	; 0x62e <ceil+0x12>
 62a:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	80 e8       	ldi	r24, 0x80	; 128
 634:	9f e3       	ldi	r25, 0x3F	; 63
 636:	08 95       	ret
 638:	26 f0       	brts	.+8      	; 0x642 <ceil+0x26>
 63a:	1b 16       	cp	r1, r27
 63c:	61 1d       	adc	r22, r1
 63e:	71 1d       	adc	r23, r1
 640:	81 1d       	adc	r24, r1
 642:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_mintl>
 646:	0c 94 2b 04 	jmp	0x856	; 0x856 <__fp_mpack>

0000064a <__divsf3>:
 64a:	0e 94 39 03 	call	0x672	; 0x672 <__divsf3x>
 64e:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_round>
 652:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscB>
 656:	58 f0       	brcs	.+22     	; 0x66e <__divsf3+0x24>
 658:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_pscA>
 65c:	40 f0       	brcs	.+16     	; 0x66e <__divsf3+0x24>
 65e:	29 f4       	brne	.+10     	; 0x66a <__divsf3+0x20>
 660:	5f 3f       	cpi	r21, 0xFF	; 255
 662:	29 f0       	breq	.+10     	; 0x66e <__divsf3+0x24>
 664:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 668:	51 11       	cpse	r21, r1
 66a:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>
 66e:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_nan>

00000672 <__divsf3x>:
 672:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fp_split3>
 676:	68 f3       	brcs	.-38     	; 0x652 <__divsf3+0x8>

00000678 <__divsf3_pse>:
 678:	99 23       	and	r25, r25
 67a:	b1 f3       	breq	.-20     	; 0x668 <__divsf3+0x1e>
 67c:	55 23       	and	r21, r21
 67e:	91 f3       	breq	.-28     	; 0x664 <__divsf3+0x1a>
 680:	95 1b       	sub	r25, r21
 682:	55 0b       	sbc	r21, r21
 684:	bb 27       	eor	r27, r27
 686:	aa 27       	eor	r26, r26
 688:	62 17       	cp	r22, r18
 68a:	73 07       	cpc	r23, r19
 68c:	84 07       	cpc	r24, r20
 68e:	38 f0       	brcs	.+14     	; 0x69e <__divsf3_pse+0x26>
 690:	9f 5f       	subi	r25, 0xFF	; 255
 692:	5f 4f       	sbci	r21, 0xFF	; 255
 694:	22 0f       	add	r18, r18
 696:	33 1f       	adc	r19, r19
 698:	44 1f       	adc	r20, r20
 69a:	aa 1f       	adc	r26, r26
 69c:	a9 f3       	breq	.-22     	; 0x688 <__divsf3_pse+0x10>
 69e:	35 d0       	rcall	.+106    	; 0x70a <__divsf3_pse+0x92>
 6a0:	0e 2e       	mov	r0, r30
 6a2:	3a f0       	brmi	.+14     	; 0x6b2 <__divsf3_pse+0x3a>
 6a4:	e0 e8       	ldi	r30, 0x80	; 128
 6a6:	32 d0       	rcall	.+100    	; 0x70c <__divsf3_pse+0x94>
 6a8:	91 50       	subi	r25, 0x01	; 1
 6aa:	50 40       	sbci	r21, 0x00	; 0
 6ac:	e6 95       	lsr	r30
 6ae:	00 1c       	adc	r0, r0
 6b0:	ca f7       	brpl	.-14     	; 0x6a4 <__divsf3_pse+0x2c>
 6b2:	2b d0       	rcall	.+86     	; 0x70a <__divsf3_pse+0x92>
 6b4:	fe 2f       	mov	r31, r30
 6b6:	29 d0       	rcall	.+82     	; 0x70a <__divsf3_pse+0x92>
 6b8:	66 0f       	add	r22, r22
 6ba:	77 1f       	adc	r23, r23
 6bc:	88 1f       	adc	r24, r24
 6be:	bb 1f       	adc	r27, r27
 6c0:	26 17       	cp	r18, r22
 6c2:	37 07       	cpc	r19, r23
 6c4:	48 07       	cpc	r20, r24
 6c6:	ab 07       	cpc	r26, r27
 6c8:	b0 e8       	ldi	r27, 0x80	; 128
 6ca:	09 f0       	breq	.+2      	; 0x6ce <__divsf3_pse+0x56>
 6cc:	bb 0b       	sbc	r27, r27
 6ce:	80 2d       	mov	r24, r0
 6d0:	bf 01       	movw	r22, r30
 6d2:	ff 27       	eor	r31, r31
 6d4:	93 58       	subi	r25, 0x83	; 131
 6d6:	5f 4f       	sbci	r21, 0xFF	; 255
 6d8:	3a f0       	brmi	.+14     	; 0x6e8 <__divsf3_pse+0x70>
 6da:	9e 3f       	cpi	r25, 0xFE	; 254
 6dc:	51 05       	cpc	r21, r1
 6de:	78 f0       	brcs	.+30     	; 0x6fe <__divsf3_pse+0x86>
 6e0:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 6e4:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>
 6e8:	5f 3f       	cpi	r21, 0xFF	; 255
 6ea:	e4 f3       	brlt	.-8      	; 0x6e4 <__divsf3_pse+0x6c>
 6ec:	98 3e       	cpi	r25, 0xE8	; 232
 6ee:	d4 f3       	brlt	.-12     	; 0x6e4 <__divsf3_pse+0x6c>
 6f0:	86 95       	lsr	r24
 6f2:	77 95       	ror	r23
 6f4:	67 95       	ror	r22
 6f6:	b7 95       	ror	r27
 6f8:	f7 95       	ror	r31
 6fa:	9f 5f       	subi	r25, 0xFF	; 255
 6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__divsf3_pse+0x78>
 6fe:	88 0f       	add	r24, r24
 700:	91 1d       	adc	r25, r1
 702:	96 95       	lsr	r25
 704:	87 95       	ror	r24
 706:	97 f9       	bld	r25, 7
 708:	08 95       	ret
 70a:	e1 e0       	ldi	r30, 0x01	; 1
 70c:	66 0f       	add	r22, r22
 70e:	77 1f       	adc	r23, r23
 710:	88 1f       	adc	r24, r24
 712:	bb 1f       	adc	r27, r27
 714:	62 17       	cp	r22, r18
 716:	73 07       	cpc	r23, r19
 718:	84 07       	cpc	r24, r20
 71a:	ba 07       	cpc	r27, r26
 71c:	20 f0       	brcs	.+8      	; 0x726 <__divsf3_pse+0xae>
 71e:	62 1b       	sub	r22, r18
 720:	73 0b       	sbc	r23, r19
 722:	84 0b       	sbc	r24, r20
 724:	ba 0b       	sbc	r27, r26
 726:	ee 1f       	adc	r30, r30
 728:	88 f7       	brcc	.-30     	; 0x70c <__divsf3_pse+0x94>
 72a:	e0 95       	com	r30
 72c:	08 95       	ret

0000072e <__fixsfsi>:
 72e:	0e 94 9e 03 	call	0x73c	; 0x73c <__fixunssfsi>
 732:	68 94       	set
 734:	b1 11       	cpse	r27, r1
 736:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>
 73a:	08 95       	ret

0000073c <__fixunssfsi>:
 73c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_splitA>
 740:	88 f0       	brcs	.+34     	; 0x764 <__fixunssfsi+0x28>
 742:	9f 57       	subi	r25, 0x7F	; 127
 744:	98 f0       	brcs	.+38     	; 0x76c <__fixunssfsi+0x30>
 746:	b9 2f       	mov	r27, r25
 748:	99 27       	eor	r25, r25
 74a:	b7 51       	subi	r27, 0x17	; 23
 74c:	b0 f0       	brcs	.+44     	; 0x77a <__fixunssfsi+0x3e>
 74e:	e1 f0       	breq	.+56     	; 0x788 <__fixunssfsi+0x4c>
 750:	66 0f       	add	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	88 1f       	adc	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	1a f0       	brmi	.+6      	; 0x760 <__fixunssfsi+0x24>
 75a:	ba 95       	dec	r27
 75c:	c9 f7       	brne	.-14     	; 0x750 <__fixunssfsi+0x14>
 75e:	14 c0       	rjmp	.+40     	; 0x788 <__fixunssfsi+0x4c>
 760:	b1 30       	cpi	r27, 0x01	; 1
 762:	91 f0       	breq	.+36     	; 0x788 <__fixunssfsi+0x4c>
 764:	0e 94 95 04 	call	0x92a	; 0x92a <__fp_zero>
 768:	b1 e0       	ldi	r27, 0x01	; 1
 76a:	08 95       	ret
 76c:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_zero>
 770:	67 2f       	mov	r22, r23
 772:	78 2f       	mov	r23, r24
 774:	88 27       	eor	r24, r24
 776:	b8 5f       	subi	r27, 0xF8	; 248
 778:	39 f0       	breq	.+14     	; 0x788 <__fixunssfsi+0x4c>
 77a:	b9 3f       	cpi	r27, 0xF9	; 249
 77c:	cc f3       	brlt	.-14     	; 0x770 <__fixunssfsi+0x34>
 77e:	86 95       	lsr	r24
 780:	77 95       	ror	r23
 782:	67 95       	ror	r22
 784:	b3 95       	inc	r27
 786:	d9 f7       	brne	.-10     	; 0x77e <__fixunssfsi+0x42>
 788:	3e f4       	brtc	.+14     	; 0x798 <__fixunssfsi+0x5c>
 78a:	90 95       	com	r25
 78c:	80 95       	com	r24
 78e:	70 95       	com	r23
 790:	61 95       	neg	r22
 792:	7f 4f       	sbci	r23, 0xFF	; 255
 794:	8f 4f       	sbci	r24, 0xFF	; 255
 796:	9f 4f       	sbci	r25, 0xFF	; 255
 798:	08 95       	ret

0000079a <__floatunsisf>:
 79a:	e8 94       	clt
 79c:	09 c0       	rjmp	.+18     	; 0x7b0 <__floatsisf+0x12>

0000079e <__floatsisf>:
 79e:	97 fb       	bst	r25, 7
 7a0:	3e f4       	brtc	.+14     	; 0x7b0 <__floatsisf+0x12>
 7a2:	90 95       	com	r25
 7a4:	80 95       	com	r24
 7a6:	70 95       	com	r23
 7a8:	61 95       	neg	r22
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	99 23       	and	r25, r25
 7b2:	a9 f0       	breq	.+42     	; 0x7de <__floatsisf+0x40>
 7b4:	f9 2f       	mov	r31, r25
 7b6:	96 e9       	ldi	r25, 0x96	; 150
 7b8:	bb 27       	eor	r27, r27
 7ba:	93 95       	inc	r25
 7bc:	f6 95       	lsr	r31
 7be:	87 95       	ror	r24
 7c0:	77 95       	ror	r23
 7c2:	67 95       	ror	r22
 7c4:	b7 95       	ror	r27
 7c6:	f1 11       	cpse	r31, r1
 7c8:	f8 cf       	rjmp	.-16     	; 0x7ba <__floatsisf+0x1c>
 7ca:	fa f4       	brpl	.+62     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7cc:	bb 0f       	add	r27, r27
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <__floatsisf+0x36>
 7d0:	60 ff       	sbrs	r22, 0
 7d2:	1b c0       	rjmp	.+54     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7d4:	6f 5f       	subi	r22, 0xFF	; 255
 7d6:	7f 4f       	sbci	r23, 0xFF	; 255
 7d8:	8f 4f       	sbci	r24, 0xFF	; 255
 7da:	9f 4f       	sbci	r25, 0xFF	; 255
 7dc:	16 c0       	rjmp	.+44     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7de:	88 23       	and	r24, r24
 7e0:	11 f0       	breq	.+4      	; 0x7e6 <__floatsisf+0x48>
 7e2:	96 e9       	ldi	r25, 0x96	; 150
 7e4:	11 c0       	rjmp	.+34     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e6:	77 23       	and	r23, r23
 7e8:	21 f0       	breq	.+8      	; 0x7f2 <__floatsisf+0x54>
 7ea:	9e e8       	ldi	r25, 0x8E	; 142
 7ec:	87 2f       	mov	r24, r23
 7ee:	76 2f       	mov	r23, r22
 7f0:	05 c0       	rjmp	.+10     	; 0x7fc <__floatsisf+0x5e>
 7f2:	66 23       	and	r22, r22
 7f4:	71 f0       	breq	.+28     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7f6:	96 e8       	ldi	r25, 0x86	; 134
 7f8:	86 2f       	mov	r24, r22
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	2a f0       	brmi	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 800:	9a 95       	dec	r25
 802:	66 0f       	add	r22, r22
 804:	77 1f       	adc	r23, r23
 806:	88 1f       	adc	r24, r24
 808:	da f7       	brpl	.-10     	; 0x800 <__DATA_REGION_LENGTH__>
 80a:	88 0f       	add	r24, r24
 80c:	96 95       	lsr	r25
 80e:	87 95       	ror	r24
 810:	97 f9       	bld	r25, 7
 812:	08 95       	ret

00000814 <__fp_inf>:
 814:	97 f9       	bld	r25, 7
 816:	9f 67       	ori	r25, 0x7F	; 127
 818:	80 e8       	ldi	r24, 0x80	; 128
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	08 95       	ret

00000820 <__fp_mintl>:
 820:	88 23       	and	r24, r24
 822:	71 f4       	brne	.+28     	; 0x840 <__fp_mintl+0x20>
 824:	77 23       	and	r23, r23
 826:	21 f0       	breq	.+8      	; 0x830 <__fp_mintl+0x10>
 828:	98 50       	subi	r25, 0x08	; 8
 82a:	87 2b       	or	r24, r23
 82c:	76 2f       	mov	r23, r22
 82e:	07 c0       	rjmp	.+14     	; 0x83e <__fp_mintl+0x1e>
 830:	66 23       	and	r22, r22
 832:	11 f4       	brne	.+4      	; 0x838 <__fp_mintl+0x18>
 834:	99 27       	eor	r25, r25
 836:	0d c0       	rjmp	.+26     	; 0x852 <__fp_mintl+0x32>
 838:	90 51       	subi	r25, 0x10	; 16
 83a:	86 2b       	or	r24, r22
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	60 e0       	ldi	r22, 0x00	; 0
 840:	2a f0       	brmi	.+10     	; 0x84c <__fp_mintl+0x2c>
 842:	9a 95       	dec	r25
 844:	66 0f       	add	r22, r22
 846:	77 1f       	adc	r23, r23
 848:	88 1f       	adc	r24, r24
 84a:	da f7       	brpl	.-10     	; 0x842 <__fp_mintl+0x22>
 84c:	88 0f       	add	r24, r24
 84e:	96 95       	lsr	r25
 850:	87 95       	ror	r24
 852:	97 f9       	bld	r25, 7
 854:	08 95       	ret

00000856 <__fp_mpack>:
 856:	9f 3f       	cpi	r25, 0xFF	; 255
 858:	31 f0       	breq	.+12     	; 0x866 <__stack+0x7>

0000085a <__fp_mpack_finite>:
 85a:	91 50       	subi	r25, 0x01	; 1
 85c:	20 f4       	brcc	.+8      	; 0x866 <__stack+0x7>
 85e:	87 95       	ror	r24
 860:	77 95       	ror	r23
 862:	67 95       	ror	r22
 864:	b7 95       	ror	r27
 866:	88 0f       	add	r24, r24
 868:	91 1d       	adc	r25, r1
 86a:	96 95       	lsr	r25
 86c:	87 95       	ror	r24
 86e:	97 f9       	bld	r25, 7
 870:	08 95       	ret

00000872 <__fp_nan>:
 872:	9f ef       	ldi	r25, 0xFF	; 255
 874:	80 ec       	ldi	r24, 0xC0	; 192
 876:	08 95       	ret

00000878 <__fp_pscA>:
 878:	00 24       	eor	r0, r0
 87a:	0a 94       	dec	r0
 87c:	16 16       	cp	r1, r22
 87e:	17 06       	cpc	r1, r23
 880:	18 06       	cpc	r1, r24
 882:	09 06       	cpc	r0, r25
 884:	08 95       	ret

00000886 <__fp_pscB>:
 886:	00 24       	eor	r0, r0
 888:	0a 94       	dec	r0
 88a:	12 16       	cp	r1, r18
 88c:	13 06       	cpc	r1, r19
 88e:	14 06       	cpc	r1, r20
 890:	05 06       	cpc	r0, r21
 892:	08 95       	ret

00000894 <__fp_round>:
 894:	09 2e       	mov	r0, r25
 896:	03 94       	inc	r0
 898:	00 0c       	add	r0, r0
 89a:	11 f4       	brne	.+4      	; 0x8a0 <__fp_round+0xc>
 89c:	88 23       	and	r24, r24
 89e:	52 f0       	brmi	.+20     	; 0x8b4 <__fp_round+0x20>
 8a0:	bb 0f       	add	r27, r27
 8a2:	40 f4       	brcc	.+16     	; 0x8b4 <__fp_round+0x20>
 8a4:	bf 2b       	or	r27, r31
 8a6:	11 f4       	brne	.+4      	; 0x8ac <__fp_round+0x18>
 8a8:	60 ff       	sbrs	r22, 0
 8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__fp_round+0x20>
 8ac:	6f 5f       	subi	r22, 0xFF	; 255
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	8f 4f       	sbci	r24, 0xFF	; 255
 8b2:	9f 4f       	sbci	r25, 0xFF	; 255
 8b4:	08 95       	ret

000008b6 <__fp_split3>:
 8b6:	57 fd       	sbrc	r21, 7
 8b8:	90 58       	subi	r25, 0x80	; 128
 8ba:	44 0f       	add	r20, r20
 8bc:	55 1f       	adc	r21, r21
 8be:	59 f0       	breq	.+22     	; 0x8d6 <__fp_splitA+0x10>
 8c0:	5f 3f       	cpi	r21, 0xFF	; 255
 8c2:	71 f0       	breq	.+28     	; 0x8e0 <__fp_splitA+0x1a>
 8c4:	47 95       	ror	r20

000008c6 <__fp_splitA>:
 8c6:	88 0f       	add	r24, r24
 8c8:	97 fb       	bst	r25, 7
 8ca:	99 1f       	adc	r25, r25
 8cc:	61 f0       	breq	.+24     	; 0x8e6 <__fp_splitA+0x20>
 8ce:	9f 3f       	cpi	r25, 0xFF	; 255
 8d0:	79 f0       	breq	.+30     	; 0x8f0 <__fp_splitA+0x2a>
 8d2:	87 95       	ror	r24
 8d4:	08 95       	ret
 8d6:	12 16       	cp	r1, r18
 8d8:	13 06       	cpc	r1, r19
 8da:	14 06       	cpc	r1, r20
 8dc:	55 1f       	adc	r21, r21
 8de:	f2 cf       	rjmp	.-28     	; 0x8c4 <__fp_split3+0xe>
 8e0:	46 95       	lsr	r20
 8e2:	f1 df       	rcall	.-30     	; 0x8c6 <__fp_splitA>
 8e4:	08 c0       	rjmp	.+16     	; 0x8f6 <__fp_splitA+0x30>
 8e6:	16 16       	cp	r1, r22
 8e8:	17 06       	cpc	r1, r23
 8ea:	18 06       	cpc	r1, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	f1 cf       	rjmp	.-30     	; 0x8d2 <__fp_splitA+0xc>
 8f0:	86 95       	lsr	r24
 8f2:	71 05       	cpc	r23, r1
 8f4:	61 05       	cpc	r22, r1
 8f6:	08 94       	sec
 8f8:	08 95       	ret

000008fa <__fp_trunc>:
 8fa:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_splitA>
 8fe:	a0 f0       	brcs	.+40     	; 0x928 <__fp_trunc+0x2e>
 900:	be e7       	ldi	r27, 0x7E	; 126
 902:	b9 17       	cp	r27, r25
 904:	88 f4       	brcc	.+34     	; 0x928 <__fp_trunc+0x2e>
 906:	bb 27       	eor	r27, r27
 908:	9f 38       	cpi	r25, 0x8F	; 143
 90a:	60 f4       	brcc	.+24     	; 0x924 <__fp_trunc+0x2a>
 90c:	16 16       	cp	r1, r22
 90e:	b1 1d       	adc	r27, r1
 910:	67 2f       	mov	r22, r23
 912:	78 2f       	mov	r23, r24
 914:	88 27       	eor	r24, r24
 916:	98 5f       	subi	r25, 0xF8	; 248
 918:	f7 cf       	rjmp	.-18     	; 0x908 <__fp_trunc+0xe>
 91a:	86 95       	lsr	r24
 91c:	77 95       	ror	r23
 91e:	67 95       	ror	r22
 920:	b1 1d       	adc	r27, r1
 922:	93 95       	inc	r25
 924:	96 39       	cpi	r25, 0x96	; 150
 926:	c8 f3       	brcs	.-14     	; 0x91a <__fp_trunc+0x20>
 928:	08 95       	ret

0000092a <__fp_zero>:
 92a:	e8 94       	clt

0000092c <__fp_szero>:
 92c:	bb 27       	eor	r27, r27
 92e:	66 27       	eor	r22, r22
 930:	77 27       	eor	r23, r23
 932:	cb 01       	movw	r24, r22
 934:	97 f9       	bld	r25, 7
 936:	08 95       	ret

00000938 <__mulsf3>:
 938:	0e 94 af 04 	call	0x95e	; 0x95e <__mulsf3x>
 93c:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_round>
 940:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_pscA>
 944:	38 f0       	brcs	.+14     	; 0x954 <__mulsf3+0x1c>
 946:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscB>
 94a:	20 f0       	brcs	.+8      	; 0x954 <__mulsf3+0x1c>
 94c:	95 23       	and	r25, r21
 94e:	11 f0       	breq	.+4      	; 0x954 <__mulsf3+0x1c>
 950:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 954:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_nan>
 958:	11 24       	eor	r1, r1
 95a:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>

0000095e <__mulsf3x>:
 95e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fp_split3>
 962:	70 f3       	brcs	.-36     	; 0x940 <__mulsf3+0x8>

00000964 <__mulsf3_pse>:
 964:	95 9f       	mul	r25, r21
 966:	c1 f3       	breq	.-16     	; 0x958 <__mulsf3+0x20>
 968:	95 0f       	add	r25, r21
 96a:	50 e0       	ldi	r21, 0x00	; 0
 96c:	55 1f       	adc	r21, r21
 96e:	62 9f       	mul	r22, r18
 970:	f0 01       	movw	r30, r0
 972:	72 9f       	mul	r23, r18
 974:	bb 27       	eor	r27, r27
 976:	f0 0d       	add	r31, r0
 978:	b1 1d       	adc	r27, r1
 97a:	63 9f       	mul	r22, r19
 97c:	aa 27       	eor	r26, r26
 97e:	f0 0d       	add	r31, r0
 980:	b1 1d       	adc	r27, r1
 982:	aa 1f       	adc	r26, r26
 984:	64 9f       	mul	r22, r20
 986:	66 27       	eor	r22, r22
 988:	b0 0d       	add	r27, r0
 98a:	a1 1d       	adc	r26, r1
 98c:	66 1f       	adc	r22, r22
 98e:	82 9f       	mul	r24, r18
 990:	22 27       	eor	r18, r18
 992:	b0 0d       	add	r27, r0
 994:	a1 1d       	adc	r26, r1
 996:	62 1f       	adc	r22, r18
 998:	73 9f       	mul	r23, r19
 99a:	b0 0d       	add	r27, r0
 99c:	a1 1d       	adc	r26, r1
 99e:	62 1f       	adc	r22, r18
 9a0:	83 9f       	mul	r24, r19
 9a2:	a0 0d       	add	r26, r0
 9a4:	61 1d       	adc	r22, r1
 9a6:	22 1f       	adc	r18, r18
 9a8:	74 9f       	mul	r23, r20
 9aa:	33 27       	eor	r19, r19
 9ac:	a0 0d       	add	r26, r0
 9ae:	61 1d       	adc	r22, r1
 9b0:	23 1f       	adc	r18, r19
 9b2:	84 9f       	mul	r24, r20
 9b4:	60 0d       	add	r22, r0
 9b6:	21 1d       	adc	r18, r1
 9b8:	82 2f       	mov	r24, r18
 9ba:	76 2f       	mov	r23, r22
 9bc:	6a 2f       	mov	r22, r26
 9be:	11 24       	eor	r1, r1
 9c0:	9f 57       	subi	r25, 0x7F	; 127
 9c2:	50 40       	sbci	r21, 0x00	; 0
 9c4:	9a f0       	brmi	.+38     	; 0x9ec <__mulsf3_pse+0x88>
 9c6:	f1 f0       	breq	.+60     	; 0xa04 <__mulsf3_pse+0xa0>
 9c8:	88 23       	and	r24, r24
 9ca:	4a f0       	brmi	.+18     	; 0x9de <__mulsf3_pse+0x7a>
 9cc:	ee 0f       	add	r30, r30
 9ce:	ff 1f       	adc	r31, r31
 9d0:	bb 1f       	adc	r27, r27
 9d2:	66 1f       	adc	r22, r22
 9d4:	77 1f       	adc	r23, r23
 9d6:	88 1f       	adc	r24, r24
 9d8:	91 50       	subi	r25, 0x01	; 1
 9da:	50 40       	sbci	r21, 0x00	; 0
 9dc:	a9 f7       	brne	.-22     	; 0x9c8 <__mulsf3_pse+0x64>
 9de:	9e 3f       	cpi	r25, 0xFE	; 254
 9e0:	51 05       	cpc	r21, r1
 9e2:	80 f0       	brcs	.+32     	; 0xa04 <__mulsf3_pse+0xa0>
 9e4:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 9e8:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>
 9ec:	5f 3f       	cpi	r21, 0xFF	; 255
 9ee:	e4 f3       	brlt	.-8      	; 0x9e8 <__mulsf3_pse+0x84>
 9f0:	98 3e       	cpi	r25, 0xE8	; 232
 9f2:	d4 f3       	brlt	.-12     	; 0x9e8 <__mulsf3_pse+0x84>
 9f4:	86 95       	lsr	r24
 9f6:	77 95       	ror	r23
 9f8:	67 95       	ror	r22
 9fa:	b7 95       	ror	r27
 9fc:	f7 95       	ror	r31
 9fe:	e7 95       	ror	r30
 a00:	9f 5f       	subi	r25, 0xFF	; 255
 a02:	c1 f7       	brne	.-16     	; 0x9f4 <__mulsf3_pse+0x90>
 a04:	fe 2b       	or	r31, r30
 a06:	88 0f       	add	r24, r24
 a08:	91 1d       	adc	r25, r1
 a0a:	96 95       	lsr	r25
 a0c:	87 95       	ror	r24
 a0e:	97 f9       	bld	r25, 7
 a10:	08 95       	ret

00000a12 <__divmodhi4>:
 a12:	97 fb       	bst	r25, 7
 a14:	07 2e       	mov	r0, r23
 a16:	16 f4       	brtc	.+4      	; 0xa1c <__divmodhi4+0xa>
 a18:	00 94       	com	r0
 a1a:	07 d0       	rcall	.+14     	; 0xa2a <__divmodhi4_neg1>
 a1c:	77 fd       	sbrc	r23, 7
 a1e:	09 d0       	rcall	.+18     	; 0xa32 <__divmodhi4_neg2>
 a20:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__udivmodhi4>
 a24:	07 fc       	sbrc	r0, 7
 a26:	05 d0       	rcall	.+10     	; 0xa32 <__divmodhi4_neg2>
 a28:	3e f4       	brtc	.+14     	; 0xa38 <__divmodhi4_exit>

00000a2a <__divmodhi4_neg1>:
 a2a:	90 95       	com	r25
 a2c:	81 95       	neg	r24
 a2e:	9f 4f       	sbci	r25, 0xFF	; 255
 a30:	08 95       	ret

00000a32 <__divmodhi4_neg2>:
 a32:	70 95       	com	r23
 a34:	61 95       	neg	r22
 a36:	7f 4f       	sbci	r23, 0xFF	; 255

00000a38 <__divmodhi4_exit>:
 a38:	08 95       	ret

00000a3a <__udivmodhi4>:
 a3a:	aa 1b       	sub	r26, r26
 a3c:	bb 1b       	sub	r27, r27
 a3e:	51 e1       	ldi	r21, 0x11	; 17
 a40:	07 c0       	rjmp	.+14     	; 0xa50 <__udivmodhi4_ep>

00000a42 <__udivmodhi4_loop>:
 a42:	aa 1f       	adc	r26, r26
 a44:	bb 1f       	adc	r27, r27
 a46:	a6 17       	cp	r26, r22
 a48:	b7 07       	cpc	r27, r23
 a4a:	10 f0       	brcs	.+4      	; 0xa50 <__udivmodhi4_ep>
 a4c:	a6 1b       	sub	r26, r22
 a4e:	b7 0b       	sbc	r27, r23

00000a50 <__udivmodhi4_ep>:
 a50:	88 1f       	adc	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	5a 95       	dec	r21
 a56:	a9 f7       	brne	.-22     	; 0xa42 <__udivmodhi4_loop>
 a58:	80 95       	com	r24
 a5a:	90 95       	com	r25
 a5c:	bc 01       	movw	r22, r24
 a5e:	cd 01       	movw	r24, r26
 a60:	08 95       	ret

00000a62 <do_rand>:
 a62:	8f 92       	push	r8
 a64:	9f 92       	push	r9
 a66:	af 92       	push	r10
 a68:	bf 92       	push	r11
 a6a:	cf 92       	push	r12
 a6c:	df 92       	push	r13
 a6e:	ef 92       	push	r14
 a70:	ff 92       	push	r15
 a72:	cf 93       	push	r28
 a74:	df 93       	push	r29
 a76:	ec 01       	movw	r28, r24
 a78:	68 81       	ld	r22, Y
 a7a:	79 81       	ldd	r23, Y+1	; 0x01
 a7c:	8a 81       	ldd	r24, Y+2	; 0x02
 a7e:	9b 81       	ldd	r25, Y+3	; 0x03
 a80:	61 15       	cp	r22, r1
 a82:	71 05       	cpc	r23, r1
 a84:	81 05       	cpc	r24, r1
 a86:	91 05       	cpc	r25, r1
 a88:	21 f4       	brne	.+8      	; 0xa92 <do_rand+0x30>
 a8a:	64 e2       	ldi	r22, 0x24	; 36
 a8c:	79 ed       	ldi	r23, 0xD9	; 217
 a8e:	8b e5       	ldi	r24, 0x5B	; 91
 a90:	97 e0       	ldi	r25, 0x07	; 7
 a92:	2d e1       	ldi	r18, 0x1D	; 29
 a94:	33 ef       	ldi	r19, 0xF3	; 243
 a96:	41 e0       	ldi	r20, 0x01	; 1
 a98:	50 e0       	ldi	r21, 0x00	; 0
 a9a:	0e 94 c2 05 	call	0xb84	; 0xb84 <__divmodsi4>
 a9e:	49 01       	movw	r8, r18
 aa0:	5a 01       	movw	r10, r20
 aa2:	9b 01       	movw	r18, r22
 aa4:	ac 01       	movw	r20, r24
 aa6:	a7 ea       	ldi	r26, 0xA7	; 167
 aa8:	b1 e4       	ldi	r27, 0x41	; 65
 aaa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__muluhisi3>
 aae:	6b 01       	movw	r12, r22
 ab0:	7c 01       	movw	r14, r24
 ab2:	ac ee       	ldi	r26, 0xEC	; 236
 ab4:	b4 ef       	ldi	r27, 0xF4	; 244
 ab6:	a5 01       	movw	r20, r10
 ab8:	94 01       	movw	r18, r8
 aba:	0e 94 ef 05 	call	0xbde	; 0xbde <__mulohisi3>
 abe:	dc 01       	movw	r26, r24
 ac0:	cb 01       	movw	r24, r22
 ac2:	8c 0d       	add	r24, r12
 ac4:	9d 1d       	adc	r25, r13
 ac6:	ae 1d       	adc	r26, r14
 ac8:	bf 1d       	adc	r27, r15
 aca:	b7 ff       	sbrs	r27, 7
 acc:	03 c0       	rjmp	.+6      	; 0xad4 <do_rand+0x72>
 ace:	01 97       	sbiw	r24, 0x01	; 1
 ad0:	a1 09       	sbc	r26, r1
 ad2:	b0 48       	sbci	r27, 0x80	; 128
 ad4:	88 83       	st	Y, r24
 ad6:	99 83       	std	Y+1, r25	; 0x01
 ad8:	aa 83       	std	Y+2, r26	; 0x02
 ada:	bb 83       	std	Y+3, r27	; 0x03
 adc:	9f 77       	andi	r25, 0x7F	; 127
 ade:	df 91       	pop	r29
 ae0:	cf 91       	pop	r28
 ae2:	ff 90       	pop	r15
 ae4:	ef 90       	pop	r14
 ae6:	df 90       	pop	r13
 ae8:	cf 90       	pop	r12
 aea:	bf 90       	pop	r11
 aec:	af 90       	pop	r10
 aee:	9f 90       	pop	r9
 af0:	8f 90       	pop	r8
 af2:	08 95       	ret

00000af4 <rand_r>:
 af4:	0e 94 31 05 	call	0xa62	; 0xa62 <do_rand>
 af8:	08 95       	ret

00000afa <rand>:
 afa:	80 e6       	ldi	r24, 0x60	; 96
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 94 31 05 	call	0xa62	; 0xa62 <do_rand>
 b02:	08 95       	ret

00000b04 <srand>:
 b04:	a0 e0       	ldi	r26, 0x00	; 0
 b06:	b0 e0       	ldi	r27, 0x00	; 0
 b08:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 b0c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 b10:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 b14:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 b18:	08 95       	ret

00000b1a <__itoa_ncheck>:
 b1a:	bb 27       	eor	r27, r27
 b1c:	4a 30       	cpi	r20, 0x0A	; 10
 b1e:	31 f4       	brne	.+12     	; 0xb2c <__itoa_ncheck+0x12>
 b20:	99 23       	and	r25, r25
 b22:	22 f4       	brpl	.+8      	; 0xb2c <__itoa_ncheck+0x12>
 b24:	bd e2       	ldi	r27, 0x2D	; 45
 b26:	90 95       	com	r25
 b28:	81 95       	neg	r24
 b2a:	9f 4f       	sbci	r25, 0xFF	; 255
 b2c:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__utoa_common>

00000b30 <__utoa_ncheck>:
 b30:	bb 27       	eor	r27, r27

00000b32 <__utoa_common>:
 b32:	fb 01       	movw	r30, r22
 b34:	55 27       	eor	r21, r21
 b36:	aa 27       	eor	r26, r26
 b38:	88 0f       	add	r24, r24
 b3a:	99 1f       	adc	r25, r25
 b3c:	aa 1f       	adc	r26, r26
 b3e:	a4 17       	cp	r26, r20
 b40:	10 f0       	brcs	.+4      	; 0xb46 <__utoa_common+0x14>
 b42:	a4 1b       	sub	r26, r20
 b44:	83 95       	inc	r24
 b46:	50 51       	subi	r21, 0x10	; 16
 b48:	b9 f7       	brne	.-18     	; 0xb38 <__utoa_common+0x6>
 b4a:	a0 5d       	subi	r26, 0xD0	; 208
 b4c:	aa 33       	cpi	r26, 0x3A	; 58
 b4e:	08 f0       	brcs	.+2      	; 0xb52 <__utoa_common+0x20>
 b50:	a9 5d       	subi	r26, 0xD9	; 217
 b52:	a1 93       	st	Z+, r26
 b54:	00 97       	sbiw	r24, 0x00	; 0
 b56:	79 f7       	brne	.-34     	; 0xb36 <__utoa_common+0x4>
 b58:	b1 11       	cpse	r27, r1
 b5a:	b1 93       	st	Z+, r27
 b5c:	11 92       	st	Z+, r1
 b5e:	cb 01       	movw	r24, r22
 b60:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <strrev>

00000b64 <strrev>:
 b64:	dc 01       	movw	r26, r24
 b66:	fc 01       	movw	r30, r24
 b68:	67 2f       	mov	r22, r23
 b6a:	71 91       	ld	r23, Z+
 b6c:	77 23       	and	r23, r23
 b6e:	e1 f7       	brne	.-8      	; 0xb68 <strrev+0x4>
 b70:	32 97       	sbiw	r30, 0x02	; 2
 b72:	04 c0       	rjmp	.+8      	; 0xb7c <strrev+0x18>
 b74:	7c 91       	ld	r23, X
 b76:	6d 93       	st	X+, r22
 b78:	70 83       	st	Z, r23
 b7a:	62 91       	ld	r22, -Z
 b7c:	ae 17       	cp	r26, r30
 b7e:	bf 07       	cpc	r27, r31
 b80:	c8 f3       	brcs	.-14     	; 0xb74 <strrev+0x10>
 b82:	08 95       	ret

00000b84 <__divmodsi4>:
 b84:	05 2e       	mov	r0, r21
 b86:	97 fb       	bst	r25, 7
 b88:	1e f4       	brtc	.+6      	; 0xb90 <__divmodsi4+0xc>
 b8a:	00 94       	com	r0
 b8c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__negsi2>
 b90:	57 fd       	sbrc	r21, 7
 b92:	07 d0       	rcall	.+14     	; 0xba2 <__divmodsi4_neg2>
 b94:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__udivmodsi4>
 b98:	07 fc       	sbrc	r0, 7
 b9a:	03 d0       	rcall	.+6      	; 0xba2 <__divmodsi4_neg2>
 b9c:	4e f4       	brtc	.+18     	; 0xbb0 <__divmodsi4_exit>
 b9e:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__negsi2>

00000ba2 <__divmodsi4_neg2>:
 ba2:	50 95       	com	r21
 ba4:	40 95       	com	r20
 ba6:	30 95       	com	r19
 ba8:	21 95       	neg	r18
 baa:	3f 4f       	sbci	r19, 0xFF	; 255
 bac:	4f 4f       	sbci	r20, 0xFF	; 255
 bae:	5f 4f       	sbci	r21, 0xFF	; 255

00000bb0 <__divmodsi4_exit>:
 bb0:	08 95       	ret

00000bb2 <__negsi2>:
 bb2:	90 95       	com	r25
 bb4:	80 95       	com	r24
 bb6:	70 95       	com	r23
 bb8:	61 95       	neg	r22
 bba:	7f 4f       	sbci	r23, 0xFF	; 255
 bbc:	8f 4f       	sbci	r24, 0xFF	; 255
 bbe:	9f 4f       	sbci	r25, 0xFF	; 255
 bc0:	08 95       	ret

00000bc2 <__muluhisi3>:
 bc2:	0e 94 16 06 	call	0xc2c	; 0xc2c <__umulhisi3>
 bc6:	a5 9f       	mul	r26, r21
 bc8:	90 0d       	add	r25, r0
 bca:	b4 9f       	mul	r27, r20
 bcc:	90 0d       	add	r25, r0
 bce:	a4 9f       	mul	r26, r20
 bd0:	80 0d       	add	r24, r0
 bd2:	91 1d       	adc	r25, r1
 bd4:	11 24       	eor	r1, r1
 bd6:	08 95       	ret

00000bd8 <__mulshisi3>:
 bd8:	b7 ff       	sbrs	r27, 7
 bda:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__muluhisi3>

00000bde <__mulohisi3>:
 bde:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__muluhisi3>
 be2:	82 1b       	sub	r24, r18
 be4:	93 0b       	sbc	r25, r19
 be6:	08 95       	ret

00000be8 <__udivmodsi4>:
 be8:	a1 e2       	ldi	r26, 0x21	; 33
 bea:	1a 2e       	mov	r1, r26
 bec:	aa 1b       	sub	r26, r26
 bee:	bb 1b       	sub	r27, r27
 bf0:	fd 01       	movw	r30, r26
 bf2:	0d c0       	rjmp	.+26     	; 0xc0e <__udivmodsi4_ep>

00000bf4 <__udivmodsi4_loop>:
 bf4:	aa 1f       	adc	r26, r26
 bf6:	bb 1f       	adc	r27, r27
 bf8:	ee 1f       	adc	r30, r30
 bfa:	ff 1f       	adc	r31, r31
 bfc:	a2 17       	cp	r26, r18
 bfe:	b3 07       	cpc	r27, r19
 c00:	e4 07       	cpc	r30, r20
 c02:	f5 07       	cpc	r31, r21
 c04:	20 f0       	brcs	.+8      	; 0xc0e <__udivmodsi4_ep>
 c06:	a2 1b       	sub	r26, r18
 c08:	b3 0b       	sbc	r27, r19
 c0a:	e4 0b       	sbc	r30, r20
 c0c:	f5 0b       	sbc	r31, r21

00000c0e <__udivmodsi4_ep>:
 c0e:	66 1f       	adc	r22, r22
 c10:	77 1f       	adc	r23, r23
 c12:	88 1f       	adc	r24, r24
 c14:	99 1f       	adc	r25, r25
 c16:	1a 94       	dec	r1
 c18:	69 f7       	brne	.-38     	; 0xbf4 <__udivmodsi4_loop>
 c1a:	60 95       	com	r22
 c1c:	70 95       	com	r23
 c1e:	80 95       	com	r24
 c20:	90 95       	com	r25
 c22:	9b 01       	movw	r18, r22
 c24:	ac 01       	movw	r20, r24
 c26:	bd 01       	movw	r22, r26
 c28:	cf 01       	movw	r24, r30
 c2a:	08 95       	ret

00000c2c <__umulhisi3>:
 c2c:	a2 9f       	mul	r26, r18
 c2e:	b0 01       	movw	r22, r0
 c30:	b3 9f       	mul	r27, r19
 c32:	c0 01       	movw	r24, r0
 c34:	a3 9f       	mul	r26, r19
 c36:	70 0d       	add	r23, r0
 c38:	81 1d       	adc	r24, r1
 c3a:	11 24       	eor	r1, r1
 c3c:	91 1d       	adc	r25, r1
 c3e:	b2 9f       	mul	r27, r18
 c40:	70 0d       	add	r23, r0
 c42:	81 1d       	adc	r24, r1
 c44:	11 24       	eor	r1, r1
 c46:	91 1d       	adc	r25, r1
 c48:	08 95       	ret

00000c4a <_exit>:
 c4a:	f8 94       	cli

00000c4c <__stop_program>:
 c4c:	ff cf       	rjmp	.-2      	; 0xc4c <__stop_program>
