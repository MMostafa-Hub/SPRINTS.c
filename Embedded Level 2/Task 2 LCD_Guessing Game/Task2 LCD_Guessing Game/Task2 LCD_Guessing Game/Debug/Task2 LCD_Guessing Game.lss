
Task2 LCD_Guessing Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00000b76  00000c0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000b6  008000b6  00000c60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ac  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000721  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076f  00000000  00000000  00002669  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000505  00000000  00000000  00002ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079a  00000000  00000000  000034f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3b       	cpi	r26, 0xB6	; 182
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 eb       	ldi	r26, 0xB6	; 182
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3b       	cpi	r26, 0xB7	; 183
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 48 02 	call	0x490	; 0x490 <main>
  8a:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:


void DIO_init(vuint8_t* PORT_, vuint8_t* DDR_, uint8_t dircetion, uint8_t bitNumber)
{
	
	if(dircetion == INPUT)
  92:	41 11       	cpse	r20, r1
  94:	0d c0       	rjmp	.+26     	; 0xb0 <DIO_init+0x1e>
	{
		*DDR_ &= ~(1 << bitNumber);
  96:	fb 01       	movw	r30, r22
  98:	30 81       	ld	r19, Z
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_init+0x12>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	2a 95       	dec	r18
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_init+0xe>
  a8:	80 95       	com	r24
  aa:	83 23       	and	r24, r19
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret
	}
	else
	{	
		*DDR_ |= (1 << bitNumber);
  b0:	fb 01       	movw	r30, r22
  b2:	30 81       	ld	r19, Z
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_init+0x2c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	2a 95       	dec	r18
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_init+0x28>
  c2:	83 2b       	or	r24, r19
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <DIO_read>:
	}
}
uint8_t DIO_read (vuint8_t* PIN_, uint8_t bitNumber)
{
	return ((*PIN_ & (1 << bitNumber)) == (1 << bitNumber));	
  c8:	fc 01       	movw	r30, r24
  ca:	20 81       	ld	r18, Z
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_read+0xe>
  d2:	44 0f       	add	r20, r20
  d4:	55 1f       	adc	r21, r21
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_read+0xa>
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	24 23       	and	r18, r20
  de:	35 23       	and	r19, r21
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	42 17       	cp	r20, r18
  e4:	53 07       	cpc	r21, r19
  e6:	09 f0       	breq	.+2      	; 0xea <DIO_read+0x22>
  e8:	80 e0       	ldi	r24, 0x00	; 0
}
  ea:	08 95       	ret

000000ec <DIO_write>:
void DIO_write(vuint8_t* PORT_, uint8_t bitNumber, uint8_t value)
{
	if(value != 0)
  ec:	44 23       	and	r20, r20
  ee:	61 f0       	breq	.+24     	; 0x108 <DIO_write+0x1c>
	{
		*PORT_ |= (1<<bitNumber);
  f0:	fc 01       	movw	r30, r24
  f2:	40 81       	ld	r20, Z
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_write+0x12>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_write+0xe>
 102:	24 2b       	or	r18, r20
 104:	20 83       	st	Z, r18
 106:	08 95       	ret
	}
	else
	{
		*PORT_ &= ~(1<<bitNumber);
 108:	fc 01       	movw	r30, r24
 10a:	40 81       	ld	r20, Z
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_write+0x2a>
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_write+0x26>
 11a:	20 95       	com	r18
 11c:	24 23       	and	r18, r20
 11e:	20 83       	st	Z, r18
 120:	08 95       	ret

00000122 <led_init>:
#include "../Timer_Driver/timer.h"
#include "../Led_Driver/led.h"
#include "../macros.h"

void led_init(vuint8_t* PORT_, vuint8_t* DDR_, int8_t bitNumber)
{
 122:	24 2f       	mov	r18, r20
	DIO_init(PORT_,DDR_,OUTPUT,bitNumber);
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
 12a:	08 95       	ret

0000012c <led_write>:
}

void led_write(vuint8_t* PORT_, int8_t bitNumber, int8_t value)
{
	DIO_write(PORT_,bitNumber,value);
 12c:	0e 94 76 00 	call	0xec	; 0xec <DIO_write>
 130:	08 95       	ret

00000132 <timer_delay>:
#define preScaler 1.024
#define timeToOverflowOneByte 261.12
#define timeToOverflowTwoByte 67108.864

void timer_delay(uint16_t time)
{
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
	if(time > 0)
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	09 f4       	brne	.+2      	; 0x140 <timer_delay+0xe>
 13e:	40 c0       	rjmp	.+128    	; 0x1c0 <timer_delay+0x8e>
 140:	8c 01       	movw	r16, r24
	{
		Timer0_control = 0b00000101;	// Timer0, normal mode, /1024 pre-scalar
 142:	85 e0       	ldi	r24, 0x05	; 5
 144:	83 bf       	out	0x33, r24	; 51
		int nIterations = (int)(time / timeToOverflowOneByte); // 1
 146:	b8 01       	movw	r22, r16
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 b7 03 	call	0x76e	; 0x76e <__floatunsisf>
 150:	2c e5       	ldi	r18, 0x5C	; 92
 152:	3f e8       	ldi	r19, 0x8F	; 143
 154:	42 e8       	ldi	r20, 0x82	; 130
 156:	53 e4       	ldi	r21, 0x43	; 67
 158:	0e 94 0f 03 	call	0x61e	; 0x61e <__divsf3>
 15c:	0e 94 81 03 	call	0x702	; 0x702 <__fixsfsi>
 160:	eb 01       	movw	r28, r22
		int extra = time % (int)((timeToOverflowOneByte)); // 37
 162:	c8 01       	movw	r24, r16
 164:	65 e0       	ldi	r22, 0x05	; 5
 166:	71 e0       	ldi	r23, 0x01	; 1
 168:	0e 94 9d 04 	call	0x93a	; 0x93a <__udivmodhi4>
		int extra_TCNT0_initial_value = (int)((timeToOverflowOneByte - extra)/preScaler); // 262.144 - 37 = 225.144
 16c:	bc 01       	movw	r22, r24
 16e:	99 0f       	add	r25, r25
 170:	88 0b       	sbc	r24, r24
 172:	99 0b       	sbc	r25, r25
 174:	0e 94 b9 03 	call	0x772	; 0x772 <__floatsisf>
 178:	9b 01       	movw	r18, r22
 17a:	ac 01       	movw	r20, r24
 17c:	6c e5       	ldi	r22, 0x5C	; 92
 17e:	7f e8       	ldi	r23, 0x8F	; 143
 180:	82 e8       	ldi	r24, 0x82	; 130
 182:	93 e4       	ldi	r25, 0x43	; 67
 184:	0e 94 a2 02 	call	0x544	; 0x544 <__subsf3>
 188:	2f e6       	ldi	r18, 0x6F	; 111
 18a:	32 e1       	ldi	r19, 0x12	; 18
 18c:	43 e8       	ldi	r20, 0x83	; 131
 18e:	5f e3       	ldi	r21, 0x3F	; 63
 190:	0e 94 0f 03 	call	0x61e	; 0x61e <__divsf3>
 194:	0e 94 81 03 	call	0x702	; 0x702 <__fixsfsi>
			
			
		for(int iterator = 0 ; iterator < nIterations ;++iterator)
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <timer_delay+0x7a>
		{
			Timer0_data = 0x00;
 19e:	12 be       	out	0x32, r1	; 50
			while(Timer0_overflow_flag == 0);  // Wait for TOV0 to roll overs
 1a0:	08 b6       	in	r0, 0x38	; 56
 1a2:	00 fe       	sbrs	r0, 0
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <timer_delay+0x6e>
			Timer_flags = 0x01;	// Clear TOV0 flag
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	28 bf       	out	0x38, r18	; 56
		int nIterations = (int)(time / timeToOverflowOneByte); // 1
		int extra = time % (int)((timeToOverflowOneByte)); // 37
		int extra_TCNT0_initial_value = (int)((timeToOverflowOneByte - extra)/preScaler); // 262.144 - 37 = 225.144
			
			
		for(int iterator = 0 ; iterator < nIterations ;++iterator)
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	8c 17       	cp	r24, r28
 1ae:	9d 07       	cpc	r25, r29
 1b0:	b4 f3       	brlt	.-20     	; 0x19e <timer_delay+0x6c>
			Timer0_data = 0x00;
			while(Timer0_overflow_flag == 0);  // Wait for TOV0 to roll overs
			Timer_flags = 0x01;	// Clear TOV0 flag
		}
			
		Timer0_data = extra_TCNT0_initial_value; // setting the initial value of TCVTO to be 256 - 37 = 219
 1b2:	62 bf       	out	0x32, r22	; 50
		while(Timer0_overflow_flag == 0);
 1b4:	08 b6       	in	r0, 0x38	; 56
 1b6:	00 fe       	sbrs	r0, 0
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <timer_delay+0x82>
		Timer_flags = 0x01;  		// Clear TOV0 flag
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	88 bf       	out	0x38, r24	; 56
		Timer0_control = 0x00; // disable timer0
 1be:	13 be       	out	0x33, r1	; 51
		
	}
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <__vector_9>:


extern uint8_t gu8_timeIsOverFlag;
void __vector_9 (void) __attribute__ ((signal,used)) ;
void __vector_9 (void) // Timer1 ISR // executed if TOV1 is set in TIFR
{
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	gu8_timeIsOverFlag = 1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__data_end>
	led_write(&PORTA_Data,PORTA1,ON);
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	8b e3       	ldi	r24, 0x3B	; 59
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 96 00 	call	0x12c	; 0x12c <led_write>
	cli();
 1fe:	f8 94       	cli
}
 200:	ff 91       	pop	r31
 202:	ef 91       	pop	r30
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <timer_interr_delay>:

void timer_interr_delay(int time) // Timer 1
{
 222:	bc 01       	movw	r22, r24
	Timer1_control_regA = 0x00;
 224:	1f bc       	out	0x2f, r1	; 47
	Timer1_control_regB = 0b00000101;  // Timer mode with 1024 prescler
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	8e bd       	out	0x2e, r24	; 46
	TCNT1 =  floor(CyclesToOverFlowTwoBytes - time/preScaler);  // combines TCNT1H and TCNT1L
 22a:	07 2e       	mov	r0, r23
 22c:	00 0c       	add	r0, r0
 22e:	88 0b       	sbc	r24, r24
 230:	99 0b       	sbc	r25, r25
 232:	0e 94 b9 03 	call	0x772	; 0x772 <__floatsisf>
 236:	2f e6       	ldi	r18, 0x6F	; 111
 238:	32 e1       	ldi	r19, 0x12	; 18
 23a:	43 e8       	ldi	r20, 0x83	; 131
 23c:	5f e3       	ldi	r21, 0x3F	; 63
 23e:	0e 94 0f 03 	call	0x61e	; 0x61e <__divsf3>
 242:	9b 01       	movw	r18, r22
 244:	ac 01       	movw	r20, r24
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	7f ef       	ldi	r23, 0xFF	; 255
 24a:	8f e7       	ldi	r24, 0x7F	; 127
 24c:	97 e4       	ldi	r25, 0x47	; 71
 24e:	0e 94 a2 02 	call	0x544	; 0x544 <__subsf3>
 252:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <floor>
 256:	0e 94 88 03 	call	0x710	; 0x710 <__fixunssfsi>
 25a:	7d bd       	out	0x2d, r23	; 45
 25c:	6c bd       	out	0x2c, r22	; 44
	Timer1_interr_mask = 0x04 ;   // Enable timer1 overflow interrupt(TOIE1)
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	89 bf       	out	0x39, r24	; 57
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
 262:	78 94       	sei
 264:	08 95       	ret

00000266 <lcd_cmd>:
#include "../macros.h"

void lcd_cmd(int data)
{
	
	lcd_control	&= ~(1 << RS);
 266:	95 b3       	in	r25, 0x15	; 21
 268:	9e 7f       	andi	r25, 0xFE	; 254
 26a:	95 bb       	out	0x15, r25	; 21
	lcd_data = data;
 26c:	82 bb       	out	0x12, r24	; 18
	lcd_control |= (1 << EN);
 26e:	85 b3       	in	r24, 0x15	; 21
 270:	84 60       	ori	r24, 0x04	; 4
 272:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 99 00 	call	0x132	; 0x132 <timer_delay>
	lcd_control &= ~(1 << EN);
 27c:	85 b3       	in	r24, 0x15	; 21
 27e:	8b 7f       	andi	r24, 0xFB	; 251
 280:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 99 00 	call	0x132	; 0x132 <timer_delay>
 28a:	08 95       	ret

0000028c <Lcd_Set_Cursor>:
}


void Lcd_Set_Cursor(char a, char b)
{
	if(a == 1)
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	39 f4       	brne	.+14     	; 0x29e <Lcd_Set_Cursor+0x12>
	lcd_cmd(0x80 + b);
 290:	86 2f       	mov	r24, r22
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	80 58       	subi	r24, 0x80	; 128
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
 29c:	08 95       	ret
	else if(a == 2)
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	31 f4       	brne	.+12     	; 0x2ae <Lcd_Set_Cursor+0x22>
	lcd_cmd(0xC0 + b);
 2a2:	86 2f       	mov	r24, r22
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	80 54       	subi	r24, 0x40	; 64
 2a8:	9f 4f       	sbci	r25, 0xFF	; 255
 2aa:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
 2ae:	08 95       	ret

000002b0 <lcd_write_char>:
}

void lcd_write_char(int data)
{
	
	lcd_control	|= (1 << RS);
 2b0:	95 b3       	in	r25, 0x15	; 21
 2b2:	91 60       	ori	r25, 0x01	; 1
 2b4:	95 bb       	out	0x15, r25	; 21
	lcd_data = data;
 2b6:	82 bb       	out	0x12, r24	; 18
	lcd_control |= (1 << EN);
 2b8:	85 b3       	in	r24, 0x15	; 21
 2ba:	84 60       	ori	r24, 0x04	; 4
 2bc:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 99 00 	call	0x132	; 0x132 <timer_delay>
	lcd_control &= ~(1 << EN);
 2c6:	85 b3       	in	r24, 0x15	; 21
 2c8:	8b 7f       	andi	r24, 0xFB	; 251
 2ca:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 99 00 	call	0x132	; 0x132 <timer_delay>
 2d4:	08 95       	ret

000002d6 <lcd_write_string>:
}


void lcd_write_string(char* str)
{
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	8c 01       	movw	r16, r24
	for(int i = 0 ; str[i] != '\0' ; i++)
 2e0:	c0 e0       	ldi	r28, 0x00	; 0
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
 2e4:	04 c0       	rjmp	.+8      	; 0x2ee <lcd_write_string+0x18>
	{
		lcd_write_char(str[i]);
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_write_char>
}


void lcd_write_string(char* str)
{
	for(int i = 0 ; str[i] != '\0' ; i++)
 2ec:	21 96       	adiw	r28, 0x01	; 1
 2ee:	f8 01       	movw	r30, r16
 2f0:	ec 0f       	add	r30, r28
 2f2:	fd 1f       	adc	r31, r29
 2f4:	80 81       	ld	r24, Z
 2f6:	81 11       	cpse	r24, r1
 2f8:	f6 cf       	rjmp	.-20     	; 0x2e6 <lcd_write_string+0x10>
	{
		lcd_write_char(str[i]);
	}
	
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	08 95       	ret

00000304 <lcd_init>:

void lcd_init(void)
{
	DDRD = 0xf0;
 304:	80 ef       	ldi	r24, 0xF0	; 240
 306:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x07;
 308:	87 e0       	ldi	r24, 0x07	; 7
 30a:	84 bb       	out	0x14, r24	; 20

	lcd_control	&= ~(1 << RS);
 30c:	85 b3       	in	r24, 0x15	; 21
 30e:	8e 7f       	andi	r24, 0xFE	; 254
 310:	85 bb       	out	0x15, r24	; 21
	lcd_control &= ~(1 << RW);
 312:	85 b3       	in	r24, 0x15	; 21
 314:	8d 7f       	andi	r24, 0xFD	; 253
 316:	85 bb       	out	0x15, r24	; 21
	lcd_control &= ~(1 << EN);
 318:	85 b3       	in	r24, 0x15	; 21
 31a:	8b 7f       	andi	r24, 0xFB	; 251
 31c:	85 bb       	out	0x15, r24	; 21



	lcd_cmd(0x38);    //function set 8-bit, 2-line display , 5x8 dots
 31e:	88 e3       	ldi	r24, 0x38	; 56
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	lcd_cmd(0x0c);    //display on,cursor off,blink off
 326:	8c e0       	ldi	r24, 0x0C	; 12
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	lcd_cmd(0x01);    //clear display
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	lcd_cmd(0x06);    //entry mode, set increment
 336:	86 e0       	ldi	r24, 0x06	; 6
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
 33e:	08 95       	ret

00000340 <lcd_clear>:
}

void lcd_clear(void)
{
	lcd_cmd(0x01);
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
 348:	08 95       	ret

0000034a <button_init>:
#include "../DIO_Driver/dio.h"
#include "../Led_Driver/led.h"
#include "../Timer_Driver/timer.h"

void button_init(vuint8_t* PORT_, vuint8_t* DDR_, uint8_t bitNumber)
{
 34a:	24 2f       	mov	r18, r20
	DIO_init(PORT_,DDR_,INPUT,bitNumber);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
 352:	08 95       	ret

00000354 <button_pressed>:
}

uint8_t button_pressed(vuint8_t* PIN_, uint8_t bitNumber)
{
	return DIO_read(PIN_,bitNumber);
 354:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_read>
}
 358:	08 95       	ret

0000035a <app_init>:
#include "Button_Driver/button.h"
#include "Led_Driver/led.h"
#include "Timer_Driver/timer.h"
void app_init(void)
{
	lcd_init();
 35a:	0e 94 82 01 	call	0x304	; 0x304 <lcd_init>
	button_init(&PORTB_Data,&PORTB_Dir,2);
 35e:	42 e0       	ldi	r20, 0x02	; 2
 360:	67 e3       	ldi	r22, 0x37	; 55
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	88 e3       	ldi	r24, 0x38	; 56
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 a5 01 	call	0x34a	; 0x34a <button_init>
	led_init(&PORTA_Data,&PORTA_Dir,0);
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	6a e3       	ldi	r22, 0x3A	; 58
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	8b e3       	ldi	r24, 0x3B	; 59
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 91 00 	call	0x122	; 0x122 <led_init>
	led_init(&PORTA_Data,&PORTA_Dir,1);
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	6a e3       	ldi	r22, 0x3A	; 58
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	8b e3       	ldi	r24, 0x3B	; 59
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 91 00 	call	0x122	; 0x122 <led_init>
 388:	08 95       	ret

0000038a <render_main_screen>:
}


void render_main_screen(void)
{
	Lcd_Set_Cursor(1,0);
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 46 01 	call	0x28c	; 0x28c <Lcd_Set_Cursor>
	lcd_write_string("Please Guess");
 392:	84 e6       	ldi	r24, 0x64	; 100
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	0e 94 46 01 	call	0x28c	; 0x28c <Lcd_Set_Cursor>
	lcd_write_string("an Integer:");
 3a2:	81 e7       	ldi	r24, 0x71	; 113
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_write_string>
 3aa:	08 95       	ret

000003ac <render_win_screen>:
}
void render_win_screen(char* number)
{
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	Lcd_Set_Cursor(1,4);
 3ba:	64 e0       	ldi	r22, 0x04	; 4
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 46 01 	call	0x28c	; 0x28c <Lcd_Set_Cursor>
	lcd_write_string("YOU WON");
 3c2:	8d e7       	ldi	r24, 0x7D	; 125
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 46 01 	call	0x28c	; 0x28c <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 3d2:	85 e8       	ldi	r24, 0x85	; 133
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_write_string>
	lcd_write_string(number);
 3da:	ce 01       	movw	r24, r28
 3dc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_write_string>
	timer_delay(2000);
 3e0:	80 ed       	ldi	r24, 0xD0	; 208
 3e2:	97 e0       	ldi	r25, 0x07	; 7
 3e4:	0e 94 99 00 	call	0x132	; 0x132 <timer_delay>
	lcd_cmd(0x01);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <render_loss_screen>:
void render_loss_screen(char* number)
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	Lcd_Set_Cursor(1,4);
 404:	64 e0       	ldi	r22, 0x04	; 4
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 46 01 	call	0x28c	; 0x28c <Lcd_Set_Cursor>
	lcd_write_string("YOU LOST");
 40c:	8e e8       	ldi	r24, 0x8E	; 142
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 46 01 	call	0x28c	; 0x28c <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 41c:	85 e8       	ldi	r24, 0x85	; 133
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_write_string>
	lcd_write_string(number);
 424:	ce 01       	movw	r24, r28
 426:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_write_string>
	timer_delay(2000);
 42a:	80 ed       	ldi	r24, 0xD0	; 208
 42c:	97 e0       	ldi	r25, 0x07	; 7
 42e:	0e 94 99 00 	call	0x132	; 0x132 <timer_delay>
	lcd_cmd(0x01);
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <render_range_invalid_screen>:
void render_range_invalid_screen()
{
	lcd_cmd(0x01);
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	Lcd_Set_Cursor(1,0);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 46 01 	call	0x28c	; 0x28c <Lcd_Set_Cursor>
	lcd_write_string("The Valid Range");
 450:	87 e9       	ldi	r24, 0x97	; 151
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	0e 94 46 01 	call	0x28c	; 0x28c <Lcd_Set_Cursor>
	lcd_write_string("from 1 -> 15:");
 460:	87 ea       	ldi	r24, 0xA7	; 167
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_write_string>
	timer_delay(2000);
 468:	80 ed       	ldi	r24, 0xD0	; 208
 46a:	97 e0       	ldi	r25, 0x07	; 7
 46c:	0e 94 99 00 	call	0x132	; 0x132 <timer_delay>
	lcd_cmd(0x01);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
 478:	08 95       	ret

0000047a <rand_int>:
}
uint8_t rand_int(uint8_t seed)
{
	srand(seed);
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 16 05 	call	0xa2c	; 0xa2c <srand>
	return (rand()%14+1); // random number between 1 and 15 inclusive
 480:	0e 94 11 05 	call	0xa22	; 0xa22 <rand>
 484:	6e e0       	ldi	r22, 0x0E	; 14
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	0e 94 b1 04 	call	0x962	; 0x962 <__divmodhi4>
}
 48c:	8f 5f       	subi	r24, 0xFF	; 255
 48e:	08 95       	ret

00000490 <main>:
#include "macros.h"
#include "app.h"

uint8_t gu8_timeIsOverFlag = 0;
int main()
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	00 d0       	rcall	.+0      	; 0x496 <main+0x6>
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62

	app_init();
 49a:	0e 94 ad 01 	call	0x35a	; 0x35a <app_init>
	uint8_t nPresses  = 0, prevButton = 0, currentButton = 0; // countsd the number of presses 
	
	for(uint8_t seed = 0;True;++seed) // every iteration chnages the seed of the random number generator
 49e:	f1 2c       	mov	r15, r1
uint8_t gu8_timeIsOverFlag = 0;
int main()
{

	app_init();
	uint8_t nPresses  = 0, prevButton = 0, currentButton = 0; // countsd the number of presses 
 4a0:	00 e0       	ldi	r16, 0x00	; 0
 4a2:	e1 2c       	mov	r14, r1
	
	for(uint8_t seed = 0;True;++seed) // every iteration chnages the seed of the random number generator
	{

		render_main_screen();
 4a4:	0e 94 c5 01 	call	0x38a	; 0x38a <render_main_screen>
		if(gu8_timeIsOverFlag) // if the time is up
 4a8:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end>
 4ac:	88 23       	and	r24, r24
 4ae:	11 f1       	breq	.+68     	; 0x4f4 <main+0x64>
		{
			uint8_t number = rand_int(seed); // generates a random number
 4b0:	8f 2d       	mov	r24, r15
 4b2:	0e 94 3d 02 	call	0x47a	; 0x47a <rand_int>
 4b6:	18 2f       	mov	r17, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4b8:	4a e0       	ldi	r20, 0x0A	; 10
 4ba:	be 01       	movw	r22, r28
 4bc:	6f 5f       	subi	r22, 0xFF	; 255
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 21 05 	call	0xa42	; 0xa42 <__itoa_ncheck>
			char snumber[2] ;
			itoa(number,snumber,10); // convert number from int into string and saves it in snumber
			
			lcd_clear(); // cleares the screen
 4c6:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_clear>

			if(nPresses > 15) // if number of presses is more than 15 
 4ca:	8f e0       	ldi	r24, 0x0F	; 15
 4cc:	8e 15       	cp	r24, r14
 4ce:	18 f4       	brcc	.+6      	; 0x4d6 <main+0x46>
			{
				render_range_invalid_screen(); 
 4d0:	0e 94 20 02 	call	0x440	; 0x440 <render_range_invalid_screen>
 4d4:	0b c0       	rjmp	.+22     	; 0x4ec <main+0x5c>
			}
			else if(nPresses == number) // if number of presses equal to the generated random number
 4d6:	e1 12       	cpse	r14, r17
 4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <main+0x54>
			{
				render_win_screen(snumber);
 4da:	ce 01       	movw	r24, r28
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	0e 94 d6 01 	call	0x3ac	; 0x3ac <render_win_screen>
 4e2:	04 c0       	rjmp	.+8      	; 0x4ec <main+0x5c>
			}
			else // if the number is not equal to the generated random number
			{
				render_loss_screen(snumber);
 4e4:	ce 01       	movw	r24, r28
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <render_loss_screen>
			}
			
			
			gu8_timeIsOverFlag = 0; 
 4ec:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__data_end>
			nPresses = 0;
 4f0:	e1 2c       	mov	r14, r1
 4f2:	0c c0       	rjmp	.+24     	; 0x50c <main+0x7c>
		}
		else // turning off the leds
		{
			led_write(&PORTA_Data,red_led,OFF);
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	8b e3       	ldi	r24, 0x3B	; 59
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 96 00 	call	0x12c	; 0x12c <led_write>
			led_write(&PORTA_Data,yellow_led,OFF);
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	8b e3       	ldi	r24, 0x3B	; 59
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 96 00 	call	0x12c	; 0x12c <led_write>
		}
		

		// if the button got pressed we will increment nPresses, initiate a new delay and turning the red led on
		currentButton =  button_pressed(&PORTB_Pin,2);
 50c:	62 e0       	ldi	r22, 0x02	; 2
 50e:	86 e3       	ldi	r24, 0x36	; 54
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 aa 01 	call	0x354	; 0x354 <button_pressed>
 516:	18 2f       	mov	r17, r24
		if(prevButton != currentButton && prevButton) 
 518:	08 17       	cp	r16, r24
 51a:	89 f0       	breq	.+34     	; 0x53e <main+0xae>
 51c:	00 23       	and	r16, r16
 51e:	79 f0       	breq	.+30     	; 0x53e <main+0xae>
		{
			timer_interr_delay(2000); 
 520:	80 ed       	ldi	r24, 0xD0	; 208
 522:	97 e0       	ldi	r25, 0x07	; 7
 524:	0e 94 11 01 	call	0x222	; 0x222 <timer_interr_delay>
			led_write(&PORTA_Data,PORTA0,ON);
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	8b e3       	ldi	r24, 0x3B	; 59
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 96 00 	call	0x12c	; 0x12c <led_write>
			timer_delay(50); 
 534:	82 e3       	ldi	r24, 0x32	; 50
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 99 00 	call	0x132	; 0x132 <timer_delay>
			nPresses++;
 53c:	e3 94       	inc	r14
{

	app_init();
	uint8_t nPresses  = 0, prevButton = 0, currentButton = 0; // countsd the number of presses 
	
	for(uint8_t seed = 0;True;++seed) // every iteration chnages the seed of the random number generator
 53e:	f3 94       	inc	r15
			timer_interr_delay(2000); 
			led_write(&PORTA_Data,PORTA0,ON);
			timer_delay(50); 
			nPresses++;
		}
		prevButton = currentButton;
 540:	01 2f       	mov	r16, r17
	}
 542:	b0 cf       	rjmp	.-160    	; 0x4a4 <main+0x14>

00000544 <__subsf3>:
 544:	50 58       	subi	r21, 0x80	; 128

00000546 <__addsf3>:
 546:	bb 27       	eor	r27, r27
 548:	aa 27       	eor	r26, r26
 54a:	0e 94 ba 02 	call	0x574	; 0x574 <__addsf3x>
 54e:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_round>
 552:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_pscA>
 556:	38 f0       	brcs	.+14     	; 0x566 <__addsf3+0x20>
 558:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscB>
 55c:	20 f0       	brcs	.+8      	; 0x566 <__addsf3+0x20>
 55e:	39 f4       	brne	.+14     	; 0x56e <__addsf3+0x28>
 560:	9f 3f       	cpi	r25, 0xFF	; 255
 562:	19 f4       	brne	.+6      	; 0x56a <__addsf3+0x24>
 564:	26 f4       	brtc	.+8      	; 0x56e <__addsf3+0x28>
 566:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_nan>
 56a:	0e f4       	brtc	.+2      	; 0x56e <__addsf3+0x28>
 56c:	e0 95       	com	r30
 56e:	e7 fb       	bst	r30, 7
 570:	0c 94 0b 04 	jmp	0x816	; 0x816 <__fp_inf>

00000574 <__addsf3x>:
 574:	e9 2f       	mov	r30, r25
 576:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_split3>
 57a:	58 f3       	brcs	.-42     	; 0x552 <__addsf3+0xc>
 57c:	ba 17       	cp	r27, r26
 57e:	62 07       	cpc	r22, r18
 580:	73 07       	cpc	r23, r19
 582:	84 07       	cpc	r24, r20
 584:	95 07       	cpc	r25, r21
 586:	20 f0       	brcs	.+8      	; 0x590 <__addsf3x+0x1c>
 588:	79 f4       	brne	.+30     	; 0x5a8 <__addsf3x+0x34>
 58a:	a6 f5       	brtc	.+104    	; 0x5f4 <__addsf3x+0x80>
 58c:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_zero>
 590:	0e f4       	brtc	.+2      	; 0x594 <__addsf3x+0x20>
 592:	e0 95       	com	r30
 594:	0b 2e       	mov	r0, r27
 596:	ba 2f       	mov	r27, r26
 598:	a0 2d       	mov	r26, r0
 59a:	0b 01       	movw	r0, r22
 59c:	b9 01       	movw	r22, r18
 59e:	90 01       	movw	r18, r0
 5a0:	0c 01       	movw	r0, r24
 5a2:	ca 01       	movw	r24, r20
 5a4:	a0 01       	movw	r20, r0
 5a6:	11 24       	eor	r1, r1
 5a8:	ff 27       	eor	r31, r31
 5aa:	59 1b       	sub	r21, r25
 5ac:	99 f0       	breq	.+38     	; 0x5d4 <__addsf3x+0x60>
 5ae:	59 3f       	cpi	r21, 0xF9	; 249
 5b0:	50 f4       	brcc	.+20     	; 0x5c6 <__addsf3x+0x52>
 5b2:	50 3e       	cpi	r21, 0xE0	; 224
 5b4:	68 f1       	brcs	.+90     	; 0x610 <__addsf3x+0x9c>
 5b6:	1a 16       	cp	r1, r26
 5b8:	f0 40       	sbci	r31, 0x00	; 0
 5ba:	a2 2f       	mov	r26, r18
 5bc:	23 2f       	mov	r18, r19
 5be:	34 2f       	mov	r19, r20
 5c0:	44 27       	eor	r20, r20
 5c2:	58 5f       	subi	r21, 0xF8	; 248
 5c4:	f3 cf       	rjmp	.-26     	; 0x5ac <__addsf3x+0x38>
 5c6:	46 95       	lsr	r20
 5c8:	37 95       	ror	r19
 5ca:	27 95       	ror	r18
 5cc:	a7 95       	ror	r26
 5ce:	f0 40       	sbci	r31, 0x00	; 0
 5d0:	53 95       	inc	r21
 5d2:	c9 f7       	brne	.-14     	; 0x5c6 <__addsf3x+0x52>
 5d4:	7e f4       	brtc	.+30     	; 0x5f4 <__addsf3x+0x80>
 5d6:	1f 16       	cp	r1, r31
 5d8:	ba 0b       	sbc	r27, r26
 5da:	62 0b       	sbc	r22, r18
 5dc:	73 0b       	sbc	r23, r19
 5de:	84 0b       	sbc	r24, r20
 5e0:	ba f0       	brmi	.+46     	; 0x610 <__addsf3x+0x9c>
 5e2:	91 50       	subi	r25, 0x01	; 1
 5e4:	a1 f0       	breq	.+40     	; 0x60e <__addsf3x+0x9a>
 5e6:	ff 0f       	add	r31, r31
 5e8:	bb 1f       	adc	r27, r27
 5ea:	66 1f       	adc	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	c2 f7       	brpl	.-16     	; 0x5e2 <__addsf3x+0x6e>
 5f2:	0e c0       	rjmp	.+28     	; 0x610 <__addsf3x+0x9c>
 5f4:	ba 0f       	add	r27, r26
 5f6:	62 1f       	adc	r22, r18
 5f8:	73 1f       	adc	r23, r19
 5fa:	84 1f       	adc	r24, r20
 5fc:	48 f4       	brcc	.+18     	; 0x610 <__addsf3x+0x9c>
 5fe:	87 95       	ror	r24
 600:	77 95       	ror	r23
 602:	67 95       	ror	r22
 604:	b7 95       	ror	r27
 606:	f7 95       	ror	r31
 608:	9e 3f       	cpi	r25, 0xFE	; 254
 60a:	08 f0       	brcs	.+2      	; 0x60e <__addsf3x+0x9a>
 60c:	b0 cf       	rjmp	.-160    	; 0x56e <__addsf3+0x28>
 60e:	93 95       	inc	r25
 610:	88 0f       	add	r24, r24
 612:	08 f0       	brcs	.+2      	; 0x616 <__addsf3x+0xa2>
 614:	99 27       	eor	r25, r25
 616:	ee 0f       	add	r30, r30
 618:	97 95       	ror	r25
 61a:	87 95       	ror	r24
 61c:	08 95       	ret

0000061e <__divsf3>:
 61e:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3x>
 622:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_round>
 626:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscB>
 62a:	58 f0       	brcs	.+22     	; 0x642 <__divsf3+0x24>
 62c:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_pscA>
 630:	40 f0       	brcs	.+16     	; 0x642 <__divsf3+0x24>
 632:	29 f4       	brne	.+10     	; 0x63e <__divsf3+0x20>
 634:	5f 3f       	cpi	r21, 0xFF	; 255
 636:	29 f0       	breq	.+10     	; 0x642 <__divsf3+0x24>
 638:	0c 94 0b 04 	jmp	0x816	; 0x816 <__fp_inf>
 63c:	51 11       	cpse	r21, r1
 63e:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_szero>
 642:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_nan>

00000646 <__divsf3x>:
 646:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_split3>
 64a:	68 f3       	brcs	.-38     	; 0x626 <__divsf3+0x8>

0000064c <__divsf3_pse>:
 64c:	99 23       	and	r25, r25
 64e:	b1 f3       	breq	.-20     	; 0x63c <__divsf3+0x1e>
 650:	55 23       	and	r21, r21
 652:	91 f3       	breq	.-28     	; 0x638 <__divsf3+0x1a>
 654:	95 1b       	sub	r25, r21
 656:	55 0b       	sbc	r21, r21
 658:	bb 27       	eor	r27, r27
 65a:	aa 27       	eor	r26, r26
 65c:	62 17       	cp	r22, r18
 65e:	73 07       	cpc	r23, r19
 660:	84 07       	cpc	r24, r20
 662:	38 f0       	brcs	.+14     	; 0x672 <__divsf3_pse+0x26>
 664:	9f 5f       	subi	r25, 0xFF	; 255
 666:	5f 4f       	sbci	r21, 0xFF	; 255
 668:	22 0f       	add	r18, r18
 66a:	33 1f       	adc	r19, r19
 66c:	44 1f       	adc	r20, r20
 66e:	aa 1f       	adc	r26, r26
 670:	a9 f3       	breq	.-22     	; 0x65c <__divsf3_pse+0x10>
 672:	35 d0       	rcall	.+106    	; 0x6de <__divsf3_pse+0x92>
 674:	0e 2e       	mov	r0, r30
 676:	3a f0       	brmi	.+14     	; 0x686 <__divsf3_pse+0x3a>
 678:	e0 e8       	ldi	r30, 0x80	; 128
 67a:	32 d0       	rcall	.+100    	; 0x6e0 <__divsf3_pse+0x94>
 67c:	91 50       	subi	r25, 0x01	; 1
 67e:	50 40       	sbci	r21, 0x00	; 0
 680:	e6 95       	lsr	r30
 682:	00 1c       	adc	r0, r0
 684:	ca f7       	brpl	.-14     	; 0x678 <__divsf3_pse+0x2c>
 686:	2b d0       	rcall	.+86     	; 0x6de <__divsf3_pse+0x92>
 688:	fe 2f       	mov	r31, r30
 68a:	29 d0       	rcall	.+82     	; 0x6de <__divsf3_pse+0x92>
 68c:	66 0f       	add	r22, r22
 68e:	77 1f       	adc	r23, r23
 690:	88 1f       	adc	r24, r24
 692:	bb 1f       	adc	r27, r27
 694:	26 17       	cp	r18, r22
 696:	37 07       	cpc	r19, r23
 698:	48 07       	cpc	r20, r24
 69a:	ab 07       	cpc	r26, r27
 69c:	b0 e8       	ldi	r27, 0x80	; 128
 69e:	09 f0       	breq	.+2      	; 0x6a2 <__divsf3_pse+0x56>
 6a0:	bb 0b       	sbc	r27, r27
 6a2:	80 2d       	mov	r24, r0
 6a4:	bf 01       	movw	r22, r30
 6a6:	ff 27       	eor	r31, r31
 6a8:	93 58       	subi	r25, 0x83	; 131
 6aa:	5f 4f       	sbci	r21, 0xFF	; 255
 6ac:	3a f0       	brmi	.+14     	; 0x6bc <__divsf3_pse+0x70>
 6ae:	9e 3f       	cpi	r25, 0xFE	; 254
 6b0:	51 05       	cpc	r21, r1
 6b2:	78 f0       	brcs	.+30     	; 0x6d2 <__divsf3_pse+0x86>
 6b4:	0c 94 0b 04 	jmp	0x816	; 0x816 <__fp_inf>
 6b8:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_szero>
 6bc:	5f 3f       	cpi	r21, 0xFF	; 255
 6be:	e4 f3       	brlt	.-8      	; 0x6b8 <__divsf3_pse+0x6c>
 6c0:	98 3e       	cpi	r25, 0xE8	; 232
 6c2:	d4 f3       	brlt	.-12     	; 0x6b8 <__divsf3_pse+0x6c>
 6c4:	86 95       	lsr	r24
 6c6:	77 95       	ror	r23
 6c8:	67 95       	ror	r22
 6ca:	b7 95       	ror	r27
 6cc:	f7 95       	ror	r31
 6ce:	9f 5f       	subi	r25, 0xFF	; 255
 6d0:	c9 f7       	brne	.-14     	; 0x6c4 <__divsf3_pse+0x78>
 6d2:	88 0f       	add	r24, r24
 6d4:	91 1d       	adc	r25, r1
 6d6:	96 95       	lsr	r25
 6d8:	87 95       	ror	r24
 6da:	97 f9       	bld	r25, 7
 6dc:	08 95       	ret
 6de:	e1 e0       	ldi	r30, 0x01	; 1
 6e0:	66 0f       	add	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	bb 1f       	adc	r27, r27
 6e8:	62 17       	cp	r22, r18
 6ea:	73 07       	cpc	r23, r19
 6ec:	84 07       	cpc	r24, r20
 6ee:	ba 07       	cpc	r27, r26
 6f0:	20 f0       	brcs	.+8      	; 0x6fa <__divsf3_pse+0xae>
 6f2:	62 1b       	sub	r22, r18
 6f4:	73 0b       	sbc	r23, r19
 6f6:	84 0b       	sbc	r24, r20
 6f8:	ba 0b       	sbc	r27, r26
 6fa:	ee 1f       	adc	r30, r30
 6fc:	88 f7       	brcc	.-30     	; 0x6e0 <__divsf3_pse+0x94>
 6fe:	e0 95       	com	r30
 700:	08 95       	ret

00000702 <__fixsfsi>:
 702:	0e 94 88 03 	call	0x710	; 0x710 <__fixunssfsi>
 706:	68 94       	set
 708:	b1 11       	cpse	r27, r1
 70a:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_szero>
 70e:	08 95       	ret

00000710 <__fixunssfsi>:
 710:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_splitA>
 714:	88 f0       	brcs	.+34     	; 0x738 <__fixunssfsi+0x28>
 716:	9f 57       	subi	r25, 0x7F	; 127
 718:	98 f0       	brcs	.+38     	; 0x740 <__fixunssfsi+0x30>
 71a:	b9 2f       	mov	r27, r25
 71c:	99 27       	eor	r25, r25
 71e:	b7 51       	subi	r27, 0x17	; 23
 720:	b0 f0       	brcs	.+44     	; 0x74e <__fixunssfsi+0x3e>
 722:	e1 f0       	breq	.+56     	; 0x75c <__fixunssfsi+0x4c>
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	1a f0       	brmi	.+6      	; 0x734 <__fixunssfsi+0x24>
 72e:	ba 95       	dec	r27
 730:	c9 f7       	brne	.-14     	; 0x724 <__fixunssfsi+0x14>
 732:	14 c0       	rjmp	.+40     	; 0x75c <__fixunssfsi+0x4c>
 734:	b1 30       	cpi	r27, 0x01	; 1
 736:	91 f0       	breq	.+36     	; 0x75c <__fixunssfsi+0x4c>
 738:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_zero>
 73c:	b1 e0       	ldi	r27, 0x01	; 1
 73e:	08 95       	ret
 740:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_zero>
 744:	67 2f       	mov	r22, r23
 746:	78 2f       	mov	r23, r24
 748:	88 27       	eor	r24, r24
 74a:	b8 5f       	subi	r27, 0xF8	; 248
 74c:	39 f0       	breq	.+14     	; 0x75c <__fixunssfsi+0x4c>
 74e:	b9 3f       	cpi	r27, 0xF9	; 249
 750:	cc f3       	brlt	.-14     	; 0x744 <__fixunssfsi+0x34>
 752:	86 95       	lsr	r24
 754:	77 95       	ror	r23
 756:	67 95       	ror	r22
 758:	b3 95       	inc	r27
 75a:	d9 f7       	brne	.-10     	; 0x752 <__fixunssfsi+0x42>
 75c:	3e f4       	brtc	.+14     	; 0x76c <__fixunssfsi+0x5c>
 75e:	90 95       	com	r25
 760:	80 95       	com	r24
 762:	70 95       	com	r23
 764:	61 95       	neg	r22
 766:	7f 4f       	sbci	r23, 0xFF	; 255
 768:	8f 4f       	sbci	r24, 0xFF	; 255
 76a:	9f 4f       	sbci	r25, 0xFF	; 255
 76c:	08 95       	ret

0000076e <__floatunsisf>:
 76e:	e8 94       	clt
 770:	09 c0       	rjmp	.+18     	; 0x784 <__floatsisf+0x12>

00000772 <__floatsisf>:
 772:	97 fb       	bst	r25, 7
 774:	3e f4       	brtc	.+14     	; 0x784 <__floatsisf+0x12>
 776:	90 95       	com	r25
 778:	80 95       	com	r24
 77a:	70 95       	com	r23
 77c:	61 95       	neg	r22
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	99 23       	and	r25, r25
 786:	a9 f0       	breq	.+42     	; 0x7b2 <__floatsisf+0x40>
 788:	f9 2f       	mov	r31, r25
 78a:	96 e9       	ldi	r25, 0x96	; 150
 78c:	bb 27       	eor	r27, r27
 78e:	93 95       	inc	r25
 790:	f6 95       	lsr	r31
 792:	87 95       	ror	r24
 794:	77 95       	ror	r23
 796:	67 95       	ror	r22
 798:	b7 95       	ror	r27
 79a:	f1 11       	cpse	r31, r1
 79c:	f8 cf       	rjmp	.-16     	; 0x78e <__floatsisf+0x1c>
 79e:	fa f4       	brpl	.+62     	; 0x7de <__floatsisf+0x6c>
 7a0:	bb 0f       	add	r27, r27
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <__floatsisf+0x36>
 7a4:	60 ff       	sbrs	r22, 0
 7a6:	1b c0       	rjmp	.+54     	; 0x7de <__floatsisf+0x6c>
 7a8:	6f 5f       	subi	r22, 0xFF	; 255
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	16 c0       	rjmp	.+44     	; 0x7de <__floatsisf+0x6c>
 7b2:	88 23       	and	r24, r24
 7b4:	11 f0       	breq	.+4      	; 0x7ba <__floatsisf+0x48>
 7b6:	96 e9       	ldi	r25, 0x96	; 150
 7b8:	11 c0       	rjmp	.+34     	; 0x7dc <__floatsisf+0x6a>
 7ba:	77 23       	and	r23, r23
 7bc:	21 f0       	breq	.+8      	; 0x7c6 <__floatsisf+0x54>
 7be:	9e e8       	ldi	r25, 0x8E	; 142
 7c0:	87 2f       	mov	r24, r23
 7c2:	76 2f       	mov	r23, r22
 7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <__floatsisf+0x5e>
 7c6:	66 23       	and	r22, r22
 7c8:	71 f0       	breq	.+28     	; 0x7e6 <__floatsisf+0x74>
 7ca:	96 e8       	ldi	r25, 0x86	; 134
 7cc:	86 2f       	mov	r24, r22
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	2a f0       	brmi	.+10     	; 0x7de <__floatsisf+0x6c>
 7d4:	9a 95       	dec	r25
 7d6:	66 0f       	add	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	da f7       	brpl	.-10     	; 0x7d4 <__floatsisf+0x62>
 7de:	88 0f       	add	r24, r24
 7e0:	96 95       	lsr	r25
 7e2:	87 95       	ror	r24
 7e4:	97 f9       	bld	r25, 7
 7e6:	08 95       	ret

000007e8 <floor>:
 7e8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__fp_trunc>
 7ec:	90 f0       	brcs	.+36     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7ee:	9f 37       	cpi	r25, 0x7F	; 127
 7f0:	48 f4       	brcc	.+18     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f2:	91 11       	cpse	r25, r1
 7f4:	16 f0       	brts	.+4      	; 0x7fa <floor+0x12>
 7f6:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_szero>
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	70 e0       	ldi	r23, 0x00	; 0
 7fe:	80 e8       	ldi	r24, 0x80	; 128
 800:	9f eb       	ldi	r25, 0xBF	; 191
 802:	08 95       	ret
 804:	26 f4       	brtc	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 806:	1b 16       	cp	r1, r27
 808:	61 1d       	adc	r22, r1
 80a:	71 1d       	adc	r23, r1
 80c:	81 1d       	adc	r24, r1
 80e:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_mintl>
 812:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_mpack>

00000816 <__fp_inf>:
 816:	97 f9       	bld	r25, 7
 818:	9f 67       	ori	r25, 0x7F	; 127
 81a:	80 e8       	ldi	r24, 0x80	; 128
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	08 95       	ret

00000822 <__fp_mintl>:
 822:	88 23       	and	r24, r24
 824:	71 f4       	brne	.+28     	; 0x842 <__fp_mintl+0x20>
 826:	77 23       	and	r23, r23
 828:	21 f0       	breq	.+8      	; 0x832 <__fp_mintl+0x10>
 82a:	98 50       	subi	r25, 0x08	; 8
 82c:	87 2b       	or	r24, r23
 82e:	76 2f       	mov	r23, r22
 830:	07 c0       	rjmp	.+14     	; 0x840 <__fp_mintl+0x1e>
 832:	66 23       	and	r22, r22
 834:	11 f4       	brne	.+4      	; 0x83a <__fp_mintl+0x18>
 836:	99 27       	eor	r25, r25
 838:	0d c0       	rjmp	.+26     	; 0x854 <__fp_mintl+0x32>
 83a:	90 51       	subi	r25, 0x10	; 16
 83c:	86 2b       	or	r24, r22
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	2a f0       	brmi	.+10     	; 0x84e <__fp_mintl+0x2c>
 844:	9a 95       	dec	r25
 846:	66 0f       	add	r22, r22
 848:	77 1f       	adc	r23, r23
 84a:	88 1f       	adc	r24, r24
 84c:	da f7       	brpl	.-10     	; 0x844 <__fp_mintl+0x22>
 84e:	88 0f       	add	r24, r24
 850:	96 95       	lsr	r25
 852:	87 95       	ror	r24
 854:	97 f9       	bld	r25, 7
 856:	08 95       	ret

00000858 <__fp_mpack>:
 858:	9f 3f       	cpi	r25, 0xFF	; 255
 85a:	31 f0       	breq	.+12     	; 0x868 <__stack+0x9>

0000085c <__fp_mpack_finite>:
 85c:	91 50       	subi	r25, 0x01	; 1
 85e:	20 f4       	brcc	.+8      	; 0x868 <__stack+0x9>
 860:	87 95       	ror	r24
 862:	77 95       	ror	r23
 864:	67 95       	ror	r22
 866:	b7 95       	ror	r27
 868:	88 0f       	add	r24, r24
 86a:	91 1d       	adc	r25, r1
 86c:	96 95       	lsr	r25
 86e:	87 95       	ror	r24
 870:	97 f9       	bld	r25, 7
 872:	08 95       	ret

00000874 <__fp_nan>:
 874:	9f ef       	ldi	r25, 0xFF	; 255
 876:	80 ec       	ldi	r24, 0xC0	; 192
 878:	08 95       	ret

0000087a <__fp_pscA>:
 87a:	00 24       	eor	r0, r0
 87c:	0a 94       	dec	r0
 87e:	16 16       	cp	r1, r22
 880:	17 06       	cpc	r1, r23
 882:	18 06       	cpc	r1, r24
 884:	09 06       	cpc	r0, r25
 886:	08 95       	ret

00000888 <__fp_pscB>:
 888:	00 24       	eor	r0, r0
 88a:	0a 94       	dec	r0
 88c:	12 16       	cp	r1, r18
 88e:	13 06       	cpc	r1, r19
 890:	14 06       	cpc	r1, r20
 892:	05 06       	cpc	r0, r21
 894:	08 95       	ret

00000896 <__fp_round>:
 896:	09 2e       	mov	r0, r25
 898:	03 94       	inc	r0
 89a:	00 0c       	add	r0, r0
 89c:	11 f4       	brne	.+4      	; 0x8a2 <__fp_round+0xc>
 89e:	88 23       	and	r24, r24
 8a0:	52 f0       	brmi	.+20     	; 0x8b6 <__fp_round+0x20>
 8a2:	bb 0f       	add	r27, r27
 8a4:	40 f4       	brcc	.+16     	; 0x8b6 <__fp_round+0x20>
 8a6:	bf 2b       	or	r27, r31
 8a8:	11 f4       	brne	.+4      	; 0x8ae <__fp_round+0x18>
 8aa:	60 ff       	sbrs	r22, 0
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__fp_round+0x20>
 8ae:	6f 5f       	subi	r22, 0xFF	; 255
 8b0:	7f 4f       	sbci	r23, 0xFF	; 255
 8b2:	8f 4f       	sbci	r24, 0xFF	; 255
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	08 95       	ret

000008b8 <__fp_split3>:
 8b8:	57 fd       	sbrc	r21, 7
 8ba:	90 58       	subi	r25, 0x80	; 128
 8bc:	44 0f       	add	r20, r20
 8be:	55 1f       	adc	r21, r21
 8c0:	59 f0       	breq	.+22     	; 0x8d8 <__fp_splitA+0x10>
 8c2:	5f 3f       	cpi	r21, 0xFF	; 255
 8c4:	71 f0       	breq	.+28     	; 0x8e2 <__fp_splitA+0x1a>
 8c6:	47 95       	ror	r20

000008c8 <__fp_splitA>:
 8c8:	88 0f       	add	r24, r24
 8ca:	97 fb       	bst	r25, 7
 8cc:	99 1f       	adc	r25, r25
 8ce:	61 f0       	breq	.+24     	; 0x8e8 <__fp_splitA+0x20>
 8d0:	9f 3f       	cpi	r25, 0xFF	; 255
 8d2:	79 f0       	breq	.+30     	; 0x8f2 <__fp_splitA+0x2a>
 8d4:	87 95       	ror	r24
 8d6:	08 95       	ret
 8d8:	12 16       	cp	r1, r18
 8da:	13 06       	cpc	r1, r19
 8dc:	14 06       	cpc	r1, r20
 8de:	55 1f       	adc	r21, r21
 8e0:	f2 cf       	rjmp	.-28     	; 0x8c6 <__fp_split3+0xe>
 8e2:	46 95       	lsr	r20
 8e4:	f1 df       	rcall	.-30     	; 0x8c8 <__fp_splitA>
 8e6:	08 c0       	rjmp	.+16     	; 0x8f8 <__fp_splitA+0x30>
 8e8:	16 16       	cp	r1, r22
 8ea:	17 06       	cpc	r1, r23
 8ec:	18 06       	cpc	r1, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	f1 cf       	rjmp	.-30     	; 0x8d4 <__fp_splitA+0xc>
 8f2:	86 95       	lsr	r24
 8f4:	71 05       	cpc	r23, r1
 8f6:	61 05       	cpc	r22, r1
 8f8:	08 94       	sec
 8fa:	08 95       	ret

000008fc <__fp_trunc>:
 8fc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_splitA>
 900:	a0 f0       	brcs	.+40     	; 0x92a <__fp_trunc+0x2e>
 902:	be e7       	ldi	r27, 0x7E	; 126
 904:	b9 17       	cp	r27, r25
 906:	88 f4       	brcc	.+34     	; 0x92a <__fp_trunc+0x2e>
 908:	bb 27       	eor	r27, r27
 90a:	9f 38       	cpi	r25, 0x8F	; 143
 90c:	60 f4       	brcc	.+24     	; 0x926 <__fp_trunc+0x2a>
 90e:	16 16       	cp	r1, r22
 910:	b1 1d       	adc	r27, r1
 912:	67 2f       	mov	r22, r23
 914:	78 2f       	mov	r23, r24
 916:	88 27       	eor	r24, r24
 918:	98 5f       	subi	r25, 0xF8	; 248
 91a:	f7 cf       	rjmp	.-18     	; 0x90a <__fp_trunc+0xe>
 91c:	86 95       	lsr	r24
 91e:	77 95       	ror	r23
 920:	67 95       	ror	r22
 922:	b1 1d       	adc	r27, r1
 924:	93 95       	inc	r25
 926:	96 39       	cpi	r25, 0x96	; 150
 928:	c8 f3       	brcs	.-14     	; 0x91c <__fp_trunc+0x20>
 92a:	08 95       	ret

0000092c <__fp_zero>:
 92c:	e8 94       	clt

0000092e <__fp_szero>:
 92e:	bb 27       	eor	r27, r27
 930:	66 27       	eor	r22, r22
 932:	77 27       	eor	r23, r23
 934:	cb 01       	movw	r24, r22
 936:	97 f9       	bld	r25, 7
 938:	08 95       	ret

0000093a <__udivmodhi4>:
 93a:	aa 1b       	sub	r26, r26
 93c:	bb 1b       	sub	r27, r27
 93e:	51 e1       	ldi	r21, 0x11	; 17
 940:	07 c0       	rjmp	.+14     	; 0x950 <__udivmodhi4_ep>

00000942 <__udivmodhi4_loop>:
 942:	aa 1f       	adc	r26, r26
 944:	bb 1f       	adc	r27, r27
 946:	a6 17       	cp	r26, r22
 948:	b7 07       	cpc	r27, r23
 94a:	10 f0       	brcs	.+4      	; 0x950 <__udivmodhi4_ep>
 94c:	a6 1b       	sub	r26, r22
 94e:	b7 0b       	sbc	r27, r23

00000950 <__udivmodhi4_ep>:
 950:	88 1f       	adc	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	5a 95       	dec	r21
 956:	a9 f7       	brne	.-22     	; 0x942 <__udivmodhi4_loop>
 958:	80 95       	com	r24
 95a:	90 95       	com	r25
 95c:	bc 01       	movw	r22, r24
 95e:	cd 01       	movw	r24, r26
 960:	08 95       	ret

00000962 <__divmodhi4>:
 962:	97 fb       	bst	r25, 7
 964:	07 2e       	mov	r0, r23
 966:	16 f4       	brtc	.+4      	; 0x96c <__divmodhi4+0xa>
 968:	00 94       	com	r0
 96a:	07 d0       	rcall	.+14     	; 0x97a <__divmodhi4_neg1>
 96c:	77 fd       	sbrc	r23, 7
 96e:	09 d0       	rcall	.+18     	; 0x982 <__divmodhi4_neg2>
 970:	0e 94 9d 04 	call	0x93a	; 0x93a <__udivmodhi4>
 974:	07 fc       	sbrc	r0, 7
 976:	05 d0       	rcall	.+10     	; 0x982 <__divmodhi4_neg2>
 978:	3e f4       	brtc	.+14     	; 0x988 <__divmodhi4_exit>

0000097a <__divmodhi4_neg1>:
 97a:	90 95       	com	r25
 97c:	81 95       	neg	r24
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	08 95       	ret

00000982 <__divmodhi4_neg2>:
 982:	70 95       	com	r23
 984:	61 95       	neg	r22
 986:	7f 4f       	sbci	r23, 0xFF	; 255

00000988 <__divmodhi4_exit>:
 988:	08 95       	ret

0000098a <do_rand>:
 98a:	8f 92       	push	r8
 98c:	9f 92       	push	r9
 98e:	af 92       	push	r10
 990:	bf 92       	push	r11
 992:	cf 92       	push	r12
 994:	df 92       	push	r13
 996:	ef 92       	push	r14
 998:	ff 92       	push	r15
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	ec 01       	movw	r28, r24
 9a0:	68 81       	ld	r22, Y
 9a2:	79 81       	ldd	r23, Y+1	; 0x01
 9a4:	8a 81       	ldd	r24, Y+2	; 0x02
 9a6:	9b 81       	ldd	r25, Y+3	; 0x03
 9a8:	61 15       	cp	r22, r1
 9aa:	71 05       	cpc	r23, r1
 9ac:	81 05       	cpc	r24, r1
 9ae:	91 05       	cpc	r25, r1
 9b0:	21 f4       	brne	.+8      	; 0x9ba <do_rand+0x30>
 9b2:	64 e2       	ldi	r22, 0x24	; 36
 9b4:	79 ed       	ldi	r23, 0xD9	; 217
 9b6:	8b e5       	ldi	r24, 0x5B	; 91
 9b8:	97 e0       	ldi	r25, 0x07	; 7
 9ba:	2d e1       	ldi	r18, 0x1D	; 29
 9bc:	33 ef       	ldi	r19, 0xF3	; 243
 9be:	41 e0       	ldi	r20, 0x01	; 1
 9c0:	50 e0       	ldi	r21, 0x00	; 0
 9c2:	0e 94 56 05 	call	0xaac	; 0xaac <__divmodsi4>
 9c6:	49 01       	movw	r8, r18
 9c8:	5a 01       	movw	r10, r20
 9ca:	9b 01       	movw	r18, r22
 9cc:	ac 01       	movw	r20, r24
 9ce:	a7 ea       	ldi	r26, 0xA7	; 167
 9d0:	b1 e4       	ldi	r27, 0x41	; 65
 9d2:	0e 94 75 05 	call	0xaea	; 0xaea <__muluhisi3>
 9d6:	6b 01       	movw	r12, r22
 9d8:	7c 01       	movw	r14, r24
 9da:	ac ee       	ldi	r26, 0xEC	; 236
 9dc:	b4 ef       	ldi	r27, 0xF4	; 244
 9de:	a5 01       	movw	r20, r10
 9e0:	94 01       	movw	r18, r8
 9e2:	0e 94 83 05 	call	0xb06	; 0xb06 <__mulohisi3>
 9e6:	dc 01       	movw	r26, r24
 9e8:	cb 01       	movw	r24, r22
 9ea:	8c 0d       	add	r24, r12
 9ec:	9d 1d       	adc	r25, r13
 9ee:	ae 1d       	adc	r26, r14
 9f0:	bf 1d       	adc	r27, r15
 9f2:	b7 ff       	sbrs	r27, 7
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <do_rand+0x72>
 9f6:	01 97       	sbiw	r24, 0x01	; 1
 9f8:	a1 09       	sbc	r26, r1
 9fa:	b0 48       	sbci	r27, 0x80	; 128
 9fc:	88 83       	st	Y, r24
 9fe:	99 83       	std	Y+1, r25	; 0x01
 a00:	aa 83       	std	Y+2, r26	; 0x02
 a02:	bb 83       	std	Y+3, r27	; 0x03
 a04:	9f 77       	andi	r25, 0x7F	; 127
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	ff 90       	pop	r15
 a0c:	ef 90       	pop	r14
 a0e:	df 90       	pop	r13
 a10:	cf 90       	pop	r12
 a12:	bf 90       	pop	r11
 a14:	af 90       	pop	r10
 a16:	9f 90       	pop	r9
 a18:	8f 90       	pop	r8
 a1a:	08 95       	ret

00000a1c <rand_r>:
 a1c:	0e 94 c5 04 	call	0x98a	; 0x98a <do_rand>
 a20:	08 95       	ret

00000a22 <rand>:
 a22:	80 e6       	ldi	r24, 0x60	; 96
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 c5 04 	call	0x98a	; 0x98a <do_rand>
 a2a:	08 95       	ret

00000a2c <srand>:
 a2c:	a0 e0       	ldi	r26, 0x00	; 0
 a2e:	b0 e0       	ldi	r27, 0x00	; 0
 a30:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 a34:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 a38:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 a3c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 a40:	08 95       	ret

00000a42 <__itoa_ncheck>:
 a42:	bb 27       	eor	r27, r27
 a44:	4a 30       	cpi	r20, 0x0A	; 10
 a46:	31 f4       	brne	.+12     	; 0xa54 <__itoa_ncheck+0x12>
 a48:	99 23       	and	r25, r25
 a4a:	22 f4       	brpl	.+8      	; 0xa54 <__itoa_ncheck+0x12>
 a4c:	bd e2       	ldi	r27, 0x2D	; 45
 a4e:	90 95       	com	r25
 a50:	81 95       	neg	r24
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__utoa_common>

00000a58 <__utoa_ncheck>:
 a58:	bb 27       	eor	r27, r27

00000a5a <__utoa_common>:
 a5a:	fb 01       	movw	r30, r22
 a5c:	55 27       	eor	r21, r21
 a5e:	aa 27       	eor	r26, r26
 a60:	88 0f       	add	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	aa 1f       	adc	r26, r26
 a66:	a4 17       	cp	r26, r20
 a68:	10 f0       	brcs	.+4      	; 0xa6e <__utoa_common+0x14>
 a6a:	a4 1b       	sub	r26, r20
 a6c:	83 95       	inc	r24
 a6e:	50 51       	subi	r21, 0x10	; 16
 a70:	b9 f7       	brne	.-18     	; 0xa60 <__utoa_common+0x6>
 a72:	a0 5d       	subi	r26, 0xD0	; 208
 a74:	aa 33       	cpi	r26, 0x3A	; 58
 a76:	08 f0       	brcs	.+2      	; 0xa7a <__utoa_common+0x20>
 a78:	a9 5d       	subi	r26, 0xD9	; 217
 a7a:	a1 93       	st	Z+, r26
 a7c:	00 97       	sbiw	r24, 0x00	; 0
 a7e:	79 f7       	brne	.-34     	; 0xa5e <__utoa_common+0x4>
 a80:	b1 11       	cpse	r27, r1
 a82:	b1 93       	st	Z+, r27
 a84:	11 92       	st	Z+, r1
 a86:	cb 01       	movw	r24, r22
 a88:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <strrev>

00000a8c <strrev>:
 a8c:	dc 01       	movw	r26, r24
 a8e:	fc 01       	movw	r30, r24
 a90:	67 2f       	mov	r22, r23
 a92:	71 91       	ld	r23, Z+
 a94:	77 23       	and	r23, r23
 a96:	e1 f7       	brne	.-8      	; 0xa90 <strrev+0x4>
 a98:	32 97       	sbiw	r30, 0x02	; 2
 a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <strrev+0x18>
 a9c:	7c 91       	ld	r23, X
 a9e:	6d 93       	st	X+, r22
 aa0:	70 83       	st	Z, r23
 aa2:	62 91       	ld	r22, -Z
 aa4:	ae 17       	cp	r26, r30
 aa6:	bf 07       	cpc	r27, r31
 aa8:	c8 f3       	brcs	.-14     	; 0xa9c <strrev+0x10>
 aaa:	08 95       	ret

00000aac <__divmodsi4>:
 aac:	05 2e       	mov	r0, r21
 aae:	97 fb       	bst	r25, 7
 ab0:	1e f4       	brtc	.+6      	; 0xab8 <__divmodsi4+0xc>
 ab2:	00 94       	com	r0
 ab4:	0e 94 6d 05 	call	0xada	; 0xada <__negsi2>
 ab8:	57 fd       	sbrc	r21, 7
 aba:	07 d0       	rcall	.+14     	; 0xaca <__divmodsi4_neg2>
 abc:	0e 94 88 05 	call	0xb10	; 0xb10 <__udivmodsi4>
 ac0:	07 fc       	sbrc	r0, 7
 ac2:	03 d0       	rcall	.+6      	; 0xaca <__divmodsi4_neg2>
 ac4:	4e f4       	brtc	.+18     	; 0xad8 <__divmodsi4_exit>
 ac6:	0c 94 6d 05 	jmp	0xada	; 0xada <__negsi2>

00000aca <__divmodsi4_neg2>:
 aca:	50 95       	com	r21
 acc:	40 95       	com	r20
 ace:	30 95       	com	r19
 ad0:	21 95       	neg	r18
 ad2:	3f 4f       	sbci	r19, 0xFF	; 255
 ad4:	4f 4f       	sbci	r20, 0xFF	; 255
 ad6:	5f 4f       	sbci	r21, 0xFF	; 255

00000ad8 <__divmodsi4_exit>:
 ad8:	08 95       	ret

00000ada <__negsi2>:
 ada:	90 95       	com	r25
 adc:	80 95       	com	r24
 ade:	70 95       	com	r23
 ae0:	61 95       	neg	r22
 ae2:	7f 4f       	sbci	r23, 0xFF	; 255
 ae4:	8f 4f       	sbci	r24, 0xFF	; 255
 ae6:	9f 4f       	sbci	r25, 0xFF	; 255
 ae8:	08 95       	ret

00000aea <__muluhisi3>:
 aea:	0e 94 aa 05 	call	0xb54	; 0xb54 <__umulhisi3>
 aee:	a5 9f       	mul	r26, r21
 af0:	90 0d       	add	r25, r0
 af2:	b4 9f       	mul	r27, r20
 af4:	90 0d       	add	r25, r0
 af6:	a4 9f       	mul	r26, r20
 af8:	80 0d       	add	r24, r0
 afa:	91 1d       	adc	r25, r1
 afc:	11 24       	eor	r1, r1
 afe:	08 95       	ret

00000b00 <__mulshisi3>:
 b00:	b7 ff       	sbrs	r27, 7
 b02:	0c 94 75 05 	jmp	0xaea	; 0xaea <__muluhisi3>

00000b06 <__mulohisi3>:
 b06:	0e 94 75 05 	call	0xaea	; 0xaea <__muluhisi3>
 b0a:	82 1b       	sub	r24, r18
 b0c:	93 0b       	sbc	r25, r19
 b0e:	08 95       	ret

00000b10 <__udivmodsi4>:
 b10:	a1 e2       	ldi	r26, 0x21	; 33
 b12:	1a 2e       	mov	r1, r26
 b14:	aa 1b       	sub	r26, r26
 b16:	bb 1b       	sub	r27, r27
 b18:	fd 01       	movw	r30, r26
 b1a:	0d c0       	rjmp	.+26     	; 0xb36 <__udivmodsi4_ep>

00000b1c <__udivmodsi4_loop>:
 b1c:	aa 1f       	adc	r26, r26
 b1e:	bb 1f       	adc	r27, r27
 b20:	ee 1f       	adc	r30, r30
 b22:	ff 1f       	adc	r31, r31
 b24:	a2 17       	cp	r26, r18
 b26:	b3 07       	cpc	r27, r19
 b28:	e4 07       	cpc	r30, r20
 b2a:	f5 07       	cpc	r31, r21
 b2c:	20 f0       	brcs	.+8      	; 0xb36 <__udivmodsi4_ep>
 b2e:	a2 1b       	sub	r26, r18
 b30:	b3 0b       	sbc	r27, r19
 b32:	e4 0b       	sbc	r30, r20
 b34:	f5 0b       	sbc	r31, r21

00000b36 <__udivmodsi4_ep>:
 b36:	66 1f       	adc	r22, r22
 b38:	77 1f       	adc	r23, r23
 b3a:	88 1f       	adc	r24, r24
 b3c:	99 1f       	adc	r25, r25
 b3e:	1a 94       	dec	r1
 b40:	69 f7       	brne	.-38     	; 0xb1c <__udivmodsi4_loop>
 b42:	60 95       	com	r22
 b44:	70 95       	com	r23
 b46:	80 95       	com	r24
 b48:	90 95       	com	r25
 b4a:	9b 01       	movw	r18, r22
 b4c:	ac 01       	movw	r20, r24
 b4e:	bd 01       	movw	r22, r26
 b50:	cf 01       	movw	r24, r30
 b52:	08 95       	ret

00000b54 <__umulhisi3>:
 b54:	a2 9f       	mul	r26, r18
 b56:	b0 01       	movw	r22, r0
 b58:	b3 9f       	mul	r27, r19
 b5a:	c0 01       	movw	r24, r0
 b5c:	a3 9f       	mul	r26, r19
 b5e:	70 0d       	add	r23, r0
 b60:	81 1d       	adc	r24, r1
 b62:	11 24       	eor	r1, r1
 b64:	91 1d       	adc	r25, r1
 b66:	b2 9f       	mul	r27, r18
 b68:	70 0d       	add	r23, r0
 b6a:	81 1d       	adc	r24, r1
 b6c:	11 24       	eor	r1, r1
 b6e:	91 1d       	adc	r25, r1
 b70:	08 95       	ret

00000b72 <_exit>:
 b72:	f8 94       	cli

00000b74 <__stop_program>:
 b74:	ff cf       	rjmp	.-2      	; 0xb74 <__stop_program>
