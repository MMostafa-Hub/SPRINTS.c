
Task 8_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  0000057e  000005f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014a8  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aa8  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c0a  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000284  00000000  00000000  0000338c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000605  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000951  00000000  00000000  00003c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004566  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3e       	cpi	r26, 0xE2	; 226
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  7a:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <app_init>:

#include "app.h"
void app_init(void)
{
	/* Initialize the TWI/I2C Driver */
	TWI_init();
  82:	0e 94 39 01 	call	0x272	; 0x272 <TWI_init>
	
	DIO_setupPortDirection(PORTA_ID,PORT_OUTPUT); /* All PORTA pins are o/p pins */
  86:	6f ef       	ldi	r22, 0xFF	; 255
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_setupPortDirection>
	DIO_writePort(PORTA_ID,0x00); /* Turn OFF all LEDS */
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 9e 00 	call	0x13c	; 0x13c <DIO_writePort>
	
	USART_Init(9600);
  96:	60 e8       	ldi	r22, 0x80	; 128
  98:	75 e2       	ldi	r23, 0x25	; 37
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <USART_Init>
  a2:	08 95       	ret

000000a4 <power>:
	
}
uint16 power(uint8 num, uint8 p)
{
	uint16 powerrr = 1;
	for ( int i = 0 ; i < p ; i++)
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	USART_Init(9600);
	
}
uint16 power(uint8 num, uint8 p)
{
	uint16 powerrr = 1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
	for ( int i = 0 ; i < p ; i++)
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <power+0x12>
	{
		powerrr = powerrr * 2;
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
	
}
uint16 power(uint8 num, uint8 p)
{
	uint16 powerrr = 1;
	for ( int i = 0 ; i < p ; i++)
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	46 2f       	mov	r20, r22
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	24 17       	cp	r18, r20
  bc:	35 07       	cpc	r19, r21
  be:	bc f3       	brlt	.-18     	; 0xae <power+0xa>
	{
		powerrr = powerrr * 2;
	}
	return powerrr;
}
  c0:	08 95       	ret

000000c2 <string_to_binary_to_decimal>:
uint16 string_to_binary_to_decimal(uint8 s_eeprom_mem_address[], uint8 size)
{
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	7c 01       	movw	r14, r24
  d2:	16 2f       	mov	r17, r22
	uint16 decimal_value = 0;
	
	for(int i = 0; i < size; i++)
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return powerrr;
}
uint16 string_to_binary_to_decimal(uint8 s_eeprom_mem_address[], uint8 size)
{
	uint16 decimal_value = 0;
  d8:	c1 2c       	mov	r12, r1
  da:	d1 2c       	mov	r13, r1
	
	for(int i = 0; i < size; i++)
  dc:	0f c0       	rjmp	.+30     	; 0xfc <string_to_binary_to_decimal+0x3a>
	{
		if(s_eeprom_mem_address[i] == '1')
  de:	f7 01       	movw	r30, r14
  e0:	ec 0f       	add	r30, r28
  e2:	fd 1f       	adc	r31, r29
  e4:	80 81       	ld	r24, Z
  e6:	81 33       	cpi	r24, 0x31	; 49
  e8:	41 f4       	brne	.+16     	; 0xfa <string_to_binary_to_decimal+0x38>
		{
			decimal_value += power(2, size - 1 - i);
  ea:	61 2f       	mov	r22, r17
  ec:	6c 1b       	sub	r22, r28
  ee:	61 50       	subi	r22, 0x01	; 1
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 52 00 	call	0xa4	; 0xa4 <power>
  f6:	c8 0e       	add	r12, r24
  f8:	d9 1e       	adc	r13, r25
}
uint16 string_to_binary_to_decimal(uint8 s_eeprom_mem_address[], uint8 size)
{
	uint16 decimal_value = 0;
	
	for(int i = 0; i < size; i++)
  fa:	21 96       	adiw	r28, 0x01	; 1
  fc:	81 2f       	mov	r24, r17
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	c8 17       	cp	r28, r24
 102:	d9 07       	cpc	r29, r25
 104:	64 f3       	brlt	.-40     	; 0xde <string_to_binary_to_decimal+0x1c>
		}

	}
	return decimal_value;
	
 106:	c6 01       	movw	r24, r12
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	ff 90       	pop	r15
 110:	ef 90       	pop	r14
 112:	df 90       	pop	r13
 114:	cf 90       	pop	r12
 116:	08 95       	ret

00000118 <DIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 118:	84 30       	cpi	r24, 0x04	; 4
 11a:	78 f4       	brcc	.+30     	; 0x13a <DIO_setupPortDirection+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	41 f0       	breq	.+16     	; 0x130 <DIO_setupPortDirection+0x18>
 120:	28 f0       	brcs	.+10     	; 0x12c <DIO_setupPortDirection+0x14>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	39 f0       	breq	.+14     	; 0x134 <DIO_setupPortDirection+0x1c>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	39 f0       	breq	.+14     	; 0x138 <DIO_setupPortDirection+0x20>
 12a:	08 95       	ret
		{
		case PORTA_ID:
			DDRA = direction;
 12c:	6a bb       	out	0x1a, r22	; 26
			break;
 12e:	08 95       	ret
		case PORTB_ID:
			DDRB = direction;
 130:	67 bb       	out	0x17, r22	; 23
			break;
 132:	08 95       	ret
		case PORTC_ID:
			DDRC = direction;
 134:	64 bb       	out	0x14, r22	; 20
			break;
 136:	08 95       	ret
		case PORTD_ID:
			DDRD = direction;
 138:	61 bb       	out	0x11, r22	; 17
 13a:	08 95       	ret

0000013c <DIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 13c:	84 30       	cpi	r24, 0x04	; 4
 13e:	78 f4       	brcc	.+30     	; 0x15e <DIO_writePort+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	41 f0       	breq	.+16     	; 0x154 <DIO_writePort+0x18>
 144:	28 f0       	brcs	.+10     	; 0x150 <DIO_writePort+0x14>
 146:	82 30       	cpi	r24, 0x02	; 2
 148:	39 f0       	breq	.+14     	; 0x158 <DIO_writePort+0x1c>
 14a:	83 30       	cpi	r24, 0x03	; 3
 14c:	39 f0       	breq	.+14     	; 0x15c <DIO_writePort+0x20>
 14e:	08 95       	ret
		{
		case PORTA_ID:
			PORTA = value;
 150:	6b bb       	out	0x1b, r22	; 27
			break;
 152:	08 95       	ret
		case PORTB_ID:
			PORTB = value;
 154:	68 bb       	out	0x18, r22	; 24
			break;
 156:	08 95       	ret
		case PORTC_ID:
			PORTC = value;
 158:	65 bb       	out	0x15, r22	; 21
			break;
 15a:	08 95       	ret
		case PORTD_ID:
			PORTD = value;
 15c:	62 bb       	out	0x12, r22	; 18
 15e:	08 95       	ret

00000160 <EEPROM_writeByte>:
 *
 *******************************************************************************/
#include "external_eeprom.h"
#include "../TWI/twi.h"
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	ec 01       	movw	r28, r24
 168:	16 2f       	mov	r17, r22
	/* Send the Start Bit */
    TWI_start();
 16a:	0e 94 40 01 	call	0x280	; 0x280 <TWI_start>
    if (TWI_getStatus() != TWI_START)
 16e:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_getStatus>
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	09 f5       	brne	.+66     	; 0x1b8 <EEPROM_writeByte+0x58>
        return ERROR;
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(CHIP_ADDRESS | ((u16addr & 0x0700)>>7)));
 176:	ce 01       	movw	r24, r28
 178:	88 27       	eor	r24, r24
 17a:	97 70       	andi	r25, 0x07	; 7
 17c:	88 0f       	add	r24, r24
 17e:	89 2f       	mov	r24, r25
 180:	88 1f       	adc	r24, r24
 182:	99 0b       	sbc	r25, r25
 184:	91 95       	neg	r25
 186:	80 6a       	ori	r24, 0xA0	; 160
 188:	0e 94 49 01 	call	0x292	; 0x292 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
 18c:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_getStatus>
 190:	88 31       	cpi	r24, 0x18	; 24
 192:	a1 f4       	brne	.+40     	; 0x1bc <EEPROM_writeByte+0x5c>
        return ERROR; 
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
 194:	8c 2f       	mov	r24, r28
 196:	0e 94 49 01 	call	0x292	; 0x292 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
 19a:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_getStatus>
 19e:	88 32       	cpi	r24, 0x28	; 40
 1a0:	79 f4       	brne	.+30     	; 0x1c0 <EEPROM_writeByte+0x60>
        return ERROR;
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
 1a2:	81 2f       	mov	r24, r17
 1a4:	0e 94 49 01 	call	0x292	; 0x292 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
 1a8:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_getStatus>
 1ac:	88 32       	cpi	r24, 0x28	; 40
 1ae:	51 f4       	brne	.+20     	; 0x1c4 <EEPROM_writeByte+0x64>
        return ERROR;

    /* Send the Stop Bit */
    TWI_stop();
 1b0:	0e 94 46 01 	call	0x28c	; 0x28c <TWI_stop>
	
    return SUCCESS;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <EEPROM_writeByte+0x66>
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
	/* Send the Start Bit */
    TWI_start();
    if (TWI_getStatus() != TWI_START)
        return ERROR;
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <EEPROM_writeByte+0x66>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(CHIP_ADDRESS | ((u16addr & 0x0700)>>7)));
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
        return ERROR; 
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <EEPROM_writeByte+0x66>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <EEPROM_writeByte+0x66>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;
 1c4:	80 e0       	ldi	r24, 0x00	; 0

    /* Send the Stop Bit */
    TWI_stop();
	
    return SUCCESS;
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	08 95       	ret

000001ce <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ec 01       	movw	r28, r24
 1dc:	8b 01       	movw	r16, r22
	/* Send the Start Bit */
    TWI_start();
 1de:	0e 94 40 01 	call	0x280	; 0x280 <TWI_start>
    if (TWI_getStatus() != TWI_START)
 1e2:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_getStatus>
 1e6:	88 30       	cpi	r24, 0x08	; 8
 1e8:	91 f5       	brne	.+100    	; 0x24e <EEPROM_readByte+0x80>
        return ERROR;
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((CHIP_ADDRESS) | ((u16addr & 0x0700)>>7)));
 1ea:	7e 01       	movw	r14, r28
 1ec:	ee 24       	eor	r14, r14
 1ee:	87 e0       	ldi	r24, 0x07	; 7
 1f0:	f8 22       	and	r15, r24
 1f2:	ee 0c       	add	r14, r14
 1f4:	ef 2c       	mov	r14, r15
 1f6:	ee 1c       	adc	r14, r14
 1f8:	ff 08       	sbc	r15, r15
 1fa:	f1 94       	neg	r15
 1fc:	8e 2d       	mov	r24, r14
 1fe:	80 6a       	ori	r24, 0xA0	; 160
 200:	0e 94 49 01 	call	0x292	; 0x292 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
 204:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_getStatus>
 208:	88 31       	cpi	r24, 0x18	; 24
 20a:	19 f5       	brne	.+70     	; 0x252 <EEPROM_readByte+0x84>
        return ERROR;
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
 20c:	8c 2f       	mov	r24, r28
 20e:	0e 94 49 01 	call	0x292	; 0x292 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
 212:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_getStatus>
 216:	88 32       	cpi	r24, 0x28	; 40
 218:	f1 f4       	brne	.+60     	; 0x256 <EEPROM_readByte+0x88>
        return ERROR;
		
    /* Send the Repeated Start Bit */
    TWI_start();
 21a:	0e 94 40 01 	call	0x280	; 0x280 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
 21e:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_getStatus>
 222:	80 31       	cpi	r24, 0x10	; 16
 224:	d1 f4       	brne	.+52     	; 0x25a <EEPROM_readByte+0x8c>
        return ERROR;
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((CHIP_ADDRESS) | ((u16addr & 0x0700)>>7) | 1));
 226:	8e 2d       	mov	r24, r14
 228:	81 6a       	ori	r24, 0xA1	; 161
 22a:	0e 94 49 01 	call	0x292	; 0x292 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
 22e:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_getStatus>
 232:	80 34       	cpi	r24, 0x40	; 64
 234:	a1 f4       	brne	.+40     	; 0x25e <EEPROM_readByte+0x90>
        return ERROR;

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
 236:	0e 94 50 01 	call	0x2a0	; 0x2a0 <TWI_readByteWithNACK>
 23a:	f8 01       	movw	r30, r16
 23c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
 23e:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_getStatus>
 242:	88 35       	cpi	r24, 0x58	; 88
 244:	71 f4       	brne	.+28     	; 0x262 <EEPROM_readByte+0x94>
        return ERROR;

    /* Send the Stop Bit */
    TWI_stop();
 246:	0e 94 46 01 	call	0x28c	; 0x28c <TWI_stop>

    return SUCCESS;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0b c0       	rjmp	.+22     	; 0x264 <EEPROM_readByte+0x96>
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
	/* Send the Start Bit */
    TWI_start();
    if (TWI_getStatus() != TWI_START)
        return ERROR;
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	09 c0       	rjmp	.+18     	; 0x264 <EEPROM_readByte+0x96>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((CHIP_ADDRESS) | ((u16addr & 0x0700)>>7)));
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
        return ERROR;
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	07 c0       	rjmp	.+14     	; 0x264 <EEPROM_readByte+0x96>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	05 c0       	rjmp	.+10     	; 0x264 <EEPROM_readByte+0x96>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    if (TWI_getStatus() != TWI_REP_START)
        return ERROR;
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	03 c0       	rjmp	.+6      	; 0x264 <EEPROM_readByte+0x96>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((CHIP_ADDRESS) | ((u16addr & 0x0700)>>7) | 1));
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
        return ERROR;
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	01 c0       	rjmp	.+2      	; 0x264 <EEPROM_readByte+0x96>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
        return ERROR;
 262:	80 e0       	ldi	r24, 0x00	; 0

    /* Send the Stop Bit */
    TWI_stop();

    return SUCCESS;
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	ff 90       	pop	r15
 26e:	ef 90       	pop	r14
 270:	08 95       	ret

00000272 <TWI_init>:
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    /* Read Data */
    return TWDR;
}
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 b9       	out	0x00, r24	; 0
 276:	11 b8       	out	0x01, r1	; 1
 278:	82 b9       	out	0x02, r24	; 2
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	86 bf       	out	0x36, r24	; 54
 27e:	08 95       	ret

00000280 <TWI_start>:
 280:	84 ea       	ldi	r24, 0xA4	; 164
 282:	86 bf       	out	0x36, r24	; 54
 284:	06 b6       	in	r0, 0x36	; 54
 286:	07 fe       	sbrs	r0, 7
 288:	fd cf       	rjmp	.-6      	; 0x284 <TWI_start+0x4>
 28a:	08 95       	ret

0000028c <TWI_stop>:
 28c:	84 e9       	ldi	r24, 0x94	; 148
 28e:	86 bf       	out	0x36, r24	; 54
 290:	08 95       	ret

00000292 <TWI_writeByte>:
 292:	83 b9       	out	0x03, r24	; 3
 294:	84 e8       	ldi	r24, 0x84	; 132
 296:	86 bf       	out	0x36, r24	; 54
 298:	06 b6       	in	r0, 0x36	; 54
 29a:	07 fe       	sbrs	r0, 7
 29c:	fd cf       	rjmp	.-6      	; 0x298 <TWI_writeByte+0x6>
 29e:	08 95       	ret

000002a0 <TWI_readByteWithNACK>:
{
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
 2a0:	84 e8       	ldi	r24, 0x84	; 132
 2a2:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 2a4:	06 b6       	in	r0, 0x36	; 54
 2a6:	07 fe       	sbrs	r0, 7
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <TWI_readByteWithNACK+0x4>
    /* Read Data */
    return TWDR;
 2aa:	83 b1       	in	r24, 0x03	; 3
}
 2ac:	08 95       	ret

000002ae <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
 2ae:	81 b1       	in	r24, 0x01	; 1
    return status;
}
 2b0:	88 7f       	andi	r24, 0xF8	; 248
 2b2:	08 95       	ret

000002b4 <main>:
#define MEM_ADDRESS 0x0311



int main(void)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	2e 97       	sbiw	r28, 0x0e	; 14
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
	app_init();
 2c8:	0e 94 41 00 	call	0x82	; 0x82 <app_init>
	
	uint8 write_data = 0;
	uint8 read_data = 0;
 2cc:	19 82       	std	Y+1, r1	; 0x01
	uint16 eeprom_mem_address;
	
	uint8 s_eeprom_mem_address[MEM_ADDRESS_SIZE];
	
	uint8 command[5];
	memset(command,'\0',5);
 2ce:	fe 01       	movw	r30, r28
 2d0:	3a 96       	adiw	r30, 0x0a	; 10
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	df 01       	movw	r26, r30
 2d6:	1d 92       	st	X+, r1
 2d8:	8a 95       	dec	r24
 2da:	e9 f7       	brne	.-6      	; 0x2d6 <main+0x22>

	
	
	while(1)
	{
		USART_SendString((uint8*)"PLEASE ENTER YOUR COMMAND:\r");
 2dc:	80 e6       	ldi	r24, 0x60	; 96
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 28 02 	call	0x450	; 0x450 <USART_SendString>
		USART_ReceiveString(command);
 2e4:	ce 01       	movw	r24, r28
 2e6:	0a 96       	adiw	r24, 0x0a	; 10
 2e8:	0e 94 35 02 	call	0x46a	; 0x46a <USART_ReceiveString>
		
		if(!strcmp(command,"write"))
 2ec:	6c e7       	ldi	r22, 0x7C	; 124
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	ce 01       	movw	r24, r28
 2f2:	0a 96       	adiw	r24, 0x0a	; 10
 2f4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <strcmp>
 2f8:	89 2b       	or	r24, r25
 2fa:	c9 f5       	brne	.+114    	; 0x36e <main+0xba>
		{
			memset(s_eeprom_mem_address,'0',MEM_ADDRESS_SIZE);
 2fc:	48 e0       	ldi	r20, 0x08	; 8
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	60 e3       	ldi	r22, 0x30	; 48
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	ce 01       	movw	r24, r28
 306:	02 96       	adiw	r24, 0x02	; 2
 308:	0e 94 78 02 	call	0x4f0	; 0x4f0 <memset>
			USART_SendString((uint8*)"PLEASE ENTER THE ADDRESS:\r");
 30c:	82 e8       	ldi	r24, 0x82	; 130
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 28 02 	call	0x450	; 0x450 <USART_SendString>
			
			/* receives the address from terminal */
			USART_ReceiveString(s_eeprom_mem_address);
 314:	ce 01       	movw	r24, r28
 316:	02 96       	adiw	r24, 0x02	; 2
 318:	0e 94 35 02 	call	0x46a	; 0x46a <USART_ReceiveString>
			
			
			/* converting the address from string into integer */
			eeprom_mem_address = string_to_binary_to_decimal(s_eeprom_mem_address,MEM_ADDRESS_SIZE);
 31c:	68 e0       	ldi	r22, 0x08	; 8
 31e:	ce 01       	movw	r24, r28
 320:	02 96       	adiw	r24, 0x02	; 2
 322:	0e 94 61 00 	call	0xc2	; 0xc2 <string_to_binary_to_decimal>
 326:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 328:	4a e0       	ldi	r20, 0x0A	; 10
 32a:	be 01       	movw	r22, r28
 32c:	6e 5f       	subi	r22, 0xFE	; 254
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	0e 94 88 02 	call	0x510	; 0x510 <__itoa_ncheck>
			itoa(eeprom_mem_address ,(char *)s_eeprom_mem_address,10);
			
			
			USART_SendString((uint8*)"OK");
 334:	8d e9       	ldi	r24, 0x9D	; 157
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 28 02 	call	0x450	; 0x450 <USART_SendString>
			USART_SendByte('\r');
 33c:	8d e0       	ldi	r24, 0x0D	; 13
 33e:	0e 94 20 02 	call	0x440	; 0x440 <USART_SendByte>
	
	
 			USART_SendString((uint8*)"PLEASE ENTER THE DATA:\r");
 342:	80 ea       	ldi	r24, 0xA0	; 160
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 28 02 	call	0x450	; 0x450 <USART_SendString>
			
			/* receive data from the user (Terminal) */
			write_data = USART_ReceiveByte();
 34a:	0e 94 24 02 	call	0x448	; 0x448 <USART_ReceiveByte>
 34e:	f8 2e       	mov	r15, r24
			USART_SendByte('\r');
 350:	8d e0       	ldi	r24, 0x0D	; 13
 352:	0e 94 20 02 	call	0x440	; 0x440 <USART_SendByte>
			
			/* Write the input data in the external EEPROM */
			EEPROM_writeByte(eeprom_mem_address, write_data);
 356:	6f 2d       	mov	r22, r15
 358:	c8 01       	movw	r24, r16
 35a:	0e 94 b0 00 	call	0x160	; 0x160 <EEPROM_writeByte>
			
			
			USART_SendString((uint8*)"OK");
 35e:	8d e9       	ldi	r24, 0x9D	; 157
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 28 02 	call	0x450	; 0x450 <USART_SendString>
			USART_SendByte('\r');
 366:	8d e0       	ldi	r24, 0x0D	; 13
 368:	0e 94 20 02 	call	0x440	; 0x440 <USART_SendByte>
 36c:	b7 cf       	rjmp	.-146    	; 0x2dc <main+0x28>
			
		}else if (!strcmp(command,"read"))
 36e:	68 eb       	ldi	r22, 0xB8	; 184
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	ce 01       	movw	r24, r28
 374:	0a 96       	adiw	r24, 0x0a	; 10
 376:	0e 94 7f 02 	call	0x4fe	; 0x4fe <strcmp>
 37a:	89 2b       	or	r24, r25
 37c:	09 f0       	breq	.+2      	; 0x380 <main+0xcc>
 37e:	ae cf       	rjmp	.-164    	; 0x2dc <main+0x28>
		{
			memset(s_eeprom_mem_address,'0',MEM_ADDRESS_SIZE);
 380:	48 e0       	ldi	r20, 0x08	; 8
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	60 e3       	ldi	r22, 0x30	; 48
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	ce 01       	movw	r24, r28
 38a:	02 96       	adiw	r24, 0x02	; 2
 38c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <memset>
			USART_SendString((uint8*)"PLEASE ENTER THE ADDRESS:\r");
 390:	82 e8       	ldi	r24, 0x82	; 130
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 28 02 	call	0x450	; 0x450 <USART_SendString>
			
			/* receives the address from terminal */
			USART_ReceiveString(s_eeprom_mem_address);
 398:	ce 01       	movw	r24, r28
 39a:	02 96       	adiw	r24, 0x02	; 2
 39c:	0e 94 35 02 	call	0x46a	; 0x46a <USART_ReceiveString>
			
			/* converting the address from string into integer */
			eeprom_mem_address = string_to_binary_to_decimal(s_eeprom_mem_address,MEM_ADDRESS_SIZE);
 3a0:	68 e0       	ldi	r22, 0x08	; 8
 3a2:	ce 01       	movw	r24, r28
 3a4:	02 96       	adiw	r24, 0x02	; 2
 3a6:	0e 94 61 00 	call	0xc2	; 0xc2 <string_to_binary_to_decimal>
 3aa:	8c 01       	movw	r16, r24
 3ac:	4a e0       	ldi	r20, 0x0A	; 10
 3ae:	be 01       	movw	r22, r28
 3b0:	6e 5f       	subi	r22, 0xFE	; 254
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	0e 94 88 02 	call	0x510	; 0x510 <__itoa_ncheck>
			itoa(eeprom_mem_address ,(char *)s_eeprom_mem_address,10);
			
			
			USART_SendString((uint8*)"OK");
 3b8:	8d e9       	ldi	r24, 0x9D	; 157
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 28 02 	call	0x450	; 0x450 <USART_SendString>
			USART_SendByte('\r');
 3c0:	8d e0       	ldi	r24, 0x0D	; 13
 3c2:	0e 94 20 02 	call	0x440	; 0x440 <USART_SendByte>
			
			/* Read eeprom_mem_address from the external EEPROM */
			EEPROM_readByte(eeprom_mem_address, &read_data);
 3c6:	be 01       	movw	r22, r28
 3c8:	6f 5f       	subi	r22, 0xFF	; 255
 3ca:	7f 4f       	sbci	r23, 0xFF	; 255
 3cc:	c8 01       	movw	r24, r16
 3ce:	0e 94 e7 00 	call	0x1ce	; 0x1ce <EEPROM_readByte>
			USART_SendString((uint8*)"data from EEPROM......\r");
 3d2:	8d eb       	ldi	r24, 0xBD	; 189
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 28 02 	call	0x450	; 0x450 <USART_SendString>
			
			/* Writing the data in the EEPROM  on the terminal */
			USART_SendString((uint8*)"THE DATA IS:");
 3da:	85 ed       	ldi	r24, 0xD5	; 213
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 28 02 	call	0x450	; 0x450 <USART_SendString>
			USART_SendByte(read_data);
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	0e 94 20 02 	call	0x440	; 0x440 <USART_SendByte>
			USART_SendByte('\r');
 3e8:	8d e0       	ldi	r24, 0x0D	; 13
 3ea:	0e 94 20 02 	call	0x440	; 0x440 <USART_SendByte>
			
			/* out the read value from the external EEPROM on LEDS*/
			DIO_writePort(PORTA_ID,read_data);
 3ee:	69 81       	ldd	r22, Y+1	; 0x01
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 9e 00 	call	0x13c	; 0x13c <DIO_writePort>
 3f6:	72 cf       	rjmp	.-284    	; 0x2dc <main+0x28>

000003f8 <USART_Init>:
#include "usart.h"

void USART_Init(uint32 baud_rate)
{
	/* U2X = 1 for double transmission speed */
	UCSRA |= (1<<U2X);
 3f8:	2b b1       	in	r18, 0x0b	; 11
 3fa:	22 60       	ori	r18, 0x02	; 2
 3fc:	2b b9       	out	0x0b, r18	; 11
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB |= (1<<RXEN) | (1<<TXEN);
 3fe:	2a b1       	in	r18, 0x0a	; 10
 400:	28 61       	ori	r18, 0x18	; 24
 402:	2a b9       	out	0x0a, r18	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
 404:	20 b5       	in	r18, 0x20	; 32
 406:	26 68       	ori	r18, 0x86	; 134
 408:	20 bd       	out	0x20, r18	; 32
	
	/* Calculate the UBRR register value */
	uint16 ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
 40a:	dc 01       	movw	r26, r24
 40c:	cb 01       	movw	r24, r22
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	aa 1f       	adc	r26, r26
 414:	bb 1f       	adc	r27, r27
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	aa 1f       	adc	r26, r26
 41c:	bb 1f       	adc	r27, r27
 41e:	9c 01       	movw	r18, r24
 420:	ad 01       	movw	r20, r26
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	44 1f       	adc	r20, r20
 428:	55 1f       	adc	r21, r21
 42a:	60 e4       	ldi	r22, 0x40	; 64
 42c:	72 e4       	ldi	r23, 0x42	; 66
 42e:	8f e0       	ldi	r24, 0x0F	; 15
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 56 02 	call	0x4ac	; 0x4ac <__udivmodsi4>
 436:	21 50       	subi	r18, 0x01	; 1
 438:	31 09       	sbc	r19, r1
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
 43a:	30 bd       	out	0x20, r19	; 32
	UBRRL = ubrr_value;
 43c:	29 b9       	out	0x09, r18	; 9
 43e:	08 95       	ret

00000440 <USART_SendByte>:
*	Description: sends a character(BYTE) to another USART device
*/
void USART_SendByte(uint8 data)
{
	/* Waits for the data register to be empty */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
 440:	5d 9b       	sbis	0x0b, 5	; 11
 442:	fe cf       	rjmp	.-4      	; 0x440 <USART_SendByte>
	UDR = data;
 444:	8c b9       	out	0x0c, r24	; 12
 446:	08 95       	ret

00000448 <USART_ReceiveByte>:
*	Description: Receives a character (BYTE) from another USART device
*/
uint8 USART_ReceiveByte()
{
	/* Waits until the receive is completed */
	while(BIT_IS_CLEAR(UCSRA,RXC));
 448:	5f 9b       	sbis	0x0b, 7	; 11
 44a:	fe cf       	rjmp	.-4      	; 0x448 <USART_ReceiveByte>
	return UDR;
 44c:	8c b1       	in	r24, 0x0c	; 12
}
 44e:	08 95       	ret

00000450 <USART_SendString>:

/*
*	Description: sends a string to another USART device
*/
void USART_SendString(uint8 *str)
{
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	ec 01       	movw	r28, r24
	while(*str != '\0')
 456:	03 c0       	rjmp	.+6      	; 0x45e <USART_SendString+0xe>
	{
		USART_SendByte(*str);
 458:	0e 94 20 02 	call	0x440	; 0x440 <USART_SendByte>
		str++;
 45c:	21 96       	adiw	r28, 0x01	; 1
/*
*	Description: sends a string to another USART device
*/
void USART_SendString(uint8 *str)
{
	while(*str != '\0')
 45e:	88 81       	ld	r24, Y
 460:	81 11       	cpse	r24, r1
 462:	fa cf       	rjmp	.-12     	; 0x458 <USART_SendString+0x8>
	{
		USART_SendByte(*str);
		str++;
	}
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <USART_ReceiveString>:

/*
*	Description: sends a string to another USART device
*/
void USART_ReceiveString(uint8 *str)
{
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	8c 01       	movw	r16, r24
	uint8 i = 0;
	str[i] = USART_ReceiveByte();
 476:	0e 94 24 02 	call	0x448	; 0x448 <USART_ReceiveByte>
 47a:	f8 01       	movw	r30, r16
 47c:	80 83       	st	Z, r24
/*
*	Description: sends a string to another USART device
*/
void USART_ReceiveString(uint8 *str)
{
	uint8 i = 0;
 47e:	c0 e0       	ldi	r28, 0x00	; 0
	str[i] = USART_ReceiveByte();
	while(str[i] != '\r')
 480:	08 c0       	rjmp	.+16     	; 0x492 <USART_ReceiveString+0x28>
	{
		i++;
 482:	cf 5f       	subi	r28, 0xFF	; 255
		str[i] = USART_ReceiveByte();
 484:	78 01       	movw	r14, r16
 486:	ec 0e       	add	r14, r28
 488:	f1 1c       	adc	r15, r1
 48a:	0e 94 24 02 	call	0x448	; 0x448 <USART_ReceiveByte>
 48e:	f7 01       	movw	r30, r14
 490:	80 83       	st	Z, r24
*/
void USART_ReceiveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = USART_ReceiveByte();
	while(str[i] != '\r')
 492:	f8 01       	movw	r30, r16
 494:	ec 0f       	add	r30, r28
 496:	f1 1d       	adc	r31, r1
 498:	80 81       	ld	r24, Z
 49a:	8d 30       	cpi	r24, 0x0D	; 13
 49c:	91 f7       	brne	.-28     	; 0x482 <USART_ReceiveString+0x18>
	{
		i++;
		str[i] = USART_ReceiveByte();
	}
	str[i] = '\0';
 49e:	10 82       	st	Z, r1
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	08 95       	ret

000004ac <__udivmodsi4>:
 4ac:	a1 e2       	ldi	r26, 0x21	; 33
 4ae:	1a 2e       	mov	r1, r26
 4b0:	aa 1b       	sub	r26, r26
 4b2:	bb 1b       	sub	r27, r27
 4b4:	fd 01       	movw	r30, r26
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__udivmodsi4_ep>

000004b8 <__udivmodsi4_loop>:
 4b8:	aa 1f       	adc	r26, r26
 4ba:	bb 1f       	adc	r27, r27
 4bc:	ee 1f       	adc	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	a2 17       	cp	r26, r18
 4c2:	b3 07       	cpc	r27, r19
 4c4:	e4 07       	cpc	r30, r20
 4c6:	f5 07       	cpc	r31, r21
 4c8:	20 f0       	brcs	.+8      	; 0x4d2 <__udivmodsi4_ep>
 4ca:	a2 1b       	sub	r26, r18
 4cc:	b3 0b       	sbc	r27, r19
 4ce:	e4 0b       	sbc	r30, r20
 4d0:	f5 0b       	sbc	r31, r21

000004d2 <__udivmodsi4_ep>:
 4d2:	66 1f       	adc	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	88 1f       	adc	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	1a 94       	dec	r1
 4dc:	69 f7       	brne	.-38     	; 0x4b8 <__udivmodsi4_loop>
 4de:	60 95       	com	r22
 4e0:	70 95       	com	r23
 4e2:	80 95       	com	r24
 4e4:	90 95       	com	r25
 4e6:	9b 01       	movw	r18, r22
 4e8:	ac 01       	movw	r20, r24
 4ea:	bd 01       	movw	r22, r26
 4ec:	cf 01       	movw	r24, r30
 4ee:	08 95       	ret

000004f0 <memset>:
 4f0:	dc 01       	movw	r26, r24
 4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <memset+0x6>
 4f4:	6d 93       	st	X+, r22
 4f6:	41 50       	subi	r20, 0x01	; 1
 4f8:	50 40       	sbci	r21, 0x00	; 0
 4fa:	e0 f7       	brcc	.-8      	; 0x4f4 <memset+0x4>
 4fc:	08 95       	ret

000004fe <strcmp>:
 4fe:	fb 01       	movw	r30, r22
 500:	dc 01       	movw	r26, r24
 502:	8d 91       	ld	r24, X+
 504:	01 90       	ld	r0, Z+
 506:	80 19       	sub	r24, r0
 508:	01 10       	cpse	r0, r1
 50a:	d9 f3       	breq	.-10     	; 0x502 <strcmp+0x4>
 50c:	99 0b       	sbc	r25, r25
 50e:	08 95       	ret

00000510 <__itoa_ncheck>:
 510:	bb 27       	eor	r27, r27
 512:	4a 30       	cpi	r20, 0x0A	; 10
 514:	31 f4       	brne	.+12     	; 0x522 <__itoa_ncheck+0x12>
 516:	99 23       	and	r25, r25
 518:	22 f4       	brpl	.+8      	; 0x522 <__itoa_ncheck+0x12>
 51a:	bd e2       	ldi	r27, 0x2D	; 45
 51c:	90 95       	com	r25
 51e:	81 95       	neg	r24
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	0c 94 94 02 	jmp	0x528	; 0x528 <__utoa_common>

00000526 <__utoa_ncheck>:
 526:	bb 27       	eor	r27, r27

00000528 <__utoa_common>:
 528:	fb 01       	movw	r30, r22
 52a:	55 27       	eor	r21, r21
 52c:	aa 27       	eor	r26, r26
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	aa 1f       	adc	r26, r26
 534:	a4 17       	cp	r26, r20
 536:	10 f0       	brcs	.+4      	; 0x53c <__utoa_common+0x14>
 538:	a4 1b       	sub	r26, r20
 53a:	83 95       	inc	r24
 53c:	50 51       	subi	r21, 0x10	; 16
 53e:	b9 f7       	brne	.-18     	; 0x52e <__utoa_common+0x6>
 540:	a0 5d       	subi	r26, 0xD0	; 208
 542:	aa 33       	cpi	r26, 0x3A	; 58
 544:	08 f0       	brcs	.+2      	; 0x548 <__utoa_common+0x20>
 546:	a9 5d       	subi	r26, 0xD9	; 217
 548:	a1 93       	st	Z+, r26
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	79 f7       	brne	.-34     	; 0x52c <__utoa_common+0x4>
 54e:	b1 11       	cpse	r27, r1
 550:	b1 93       	st	Z+, r27
 552:	11 92       	st	Z+, r1
 554:	cb 01       	movw	r24, r22
 556:	0c 94 ad 02 	jmp	0x55a	; 0x55a <strrev>

0000055a <strrev>:
 55a:	dc 01       	movw	r26, r24
 55c:	fc 01       	movw	r30, r24
 55e:	67 2f       	mov	r22, r23
 560:	71 91       	ld	r23, Z+
 562:	77 23       	and	r23, r23
 564:	e1 f7       	brne	.-8      	; 0x55e <strrev+0x4>
 566:	32 97       	sbiw	r30, 0x02	; 2
 568:	04 c0       	rjmp	.+8      	; 0x572 <strrev+0x18>
 56a:	7c 91       	ld	r23, X
 56c:	6d 93       	st	X+, r22
 56e:	70 83       	st	Z, r23
 570:	62 91       	ld	r22, -Z
 572:	ae 17       	cp	r26, r30
 574:	bf 07       	cpc	r27, r31
 576:	c8 f3       	brcs	.-14     	; 0x56a <strrev+0x10>
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
