
Task 8_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000780  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000350  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000071  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001773  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_init>:
// 	#elif 	I2C_ACK_BIT == DISABLE
// 	CLR_BIT (TWCR,TWEA);
// 	#endif
//	/* Enable I2c */
//	#if I2C == ENABLE
	SET_BIT (TWCR , TWEN );
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	80 b9       	out	0x00, r24	; 0
  70:	11 b8       	out	0x01, r1	; 1
  72:	82 b9       	out	0x02, r24	; 2
  74:	84 e0       	ldi	r24, 0x04	; 4
  76:	86 bf       	out	0x36, r24	; 54
  78:	08 95       	ret

0000007a <TWI_start>:
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  7a:	84 ea       	ldi	r24, 0xA4	; 164
  7c:	86 bf       	out	0x36, r24	; 54
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
  7e:	06 b6       	in	r0, 0x36	; 54
  80:	07 fe       	sbrs	r0, 7
  82:	fd cf       	rjmp	.-6      	; 0x7e <TWI_start+0x4>
}
  84:	08 95       	ret

00000086 <TWI_stop>:
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  86:	84 e9       	ldi	r24, 0x94	; 148
  88:	86 bf       	out	0x36, r24	; 54
  8a:	08 95       	ret

0000008c <TWI_writeByte>:
}

void TWI_writeByte(uint8 data)
{
    /* Put data On TWI data Register */
    TWDR = data;
  8c:	83 b9       	out	0x03, r24	; 3
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
  8e:	84 e8       	ldi	r24, 0x84	; 132
  90:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
  92:	06 b6       	in	r0, 0x36	; 54
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <TWI_writeByte+0x6>
}
  98:	08 95       	ret

0000009a <main>:
#define MEM_ADDRESS 0x0311

int main(void)
{
	
	TWI_init();
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <TWI_init>
	TWI_start();
  9e:	0e 94 3d 00 	call	0x7a	; 0x7a <TWI_start>
	TWI_writeByte(0x02);
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	0e 94 46 00 	call	0x8c	; 0x8c <TWI_writeByte>
	TWI_writeByte(0x11);
  a8:	81 e1       	ldi	r24, 0x11	; 17
  aa:	0e 94 46 00 	call	0x8c	; 0x8c <TWI_writeByte>
	TWI_stop();
  ae:	0e 94 43 00 	call	0x86	; 0x86 <TWI_stop>
// 		/* out the read value from the external EEPROM on LEDS*/
// 		DIO_writePort(PORTA_ID,read_data);			
//
// 	}
	return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
