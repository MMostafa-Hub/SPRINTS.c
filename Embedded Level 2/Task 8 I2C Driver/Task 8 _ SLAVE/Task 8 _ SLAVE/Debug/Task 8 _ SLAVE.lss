
Task 8 _ SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009de  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000735  00000000  00000000  00000c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000648  00000000  00000000  00001383  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000019cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000475  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003fd  00000000  00000000  00001f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000235a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	78 f4       	brcc	.+30     	; 0x8e <DIO_setupPortDirection+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	41 f0       	breq	.+16     	; 0x84 <DIO_setupPortDirection+0x18>
  74:	28 f0       	brcs	.+10     	; 0x80 <DIO_setupPortDirection+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	39 f0       	breq	.+14     	; 0x88 <DIO_setupPortDirection+0x1c>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	39 f0       	breq	.+14     	; 0x8c <DIO_setupPortDirection+0x20>
  7e:	08 95       	ret
		{
		case PORTA_ID:
			DDRA = direction;
  80:	6a bb       	out	0x1a, r22	; 26
			break;
  82:	08 95       	ret
		case PORTB_ID:
			DDRB = direction;
  84:	67 bb       	out	0x17, r22	; 23
			break;
  86:	08 95       	ret
		case PORTC_ID:
			DDRC = direction;
  88:	64 bb       	out	0x14, r22	; 20
			break;
  8a:	08 95       	ret
		case PORTD_ID:
			DDRD = direction;
  8c:	61 bb       	out	0x11, r22	; 17
  8e:	08 95       	ret

00000090 <DIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
  90:	84 30       	cpi	r24, 0x04	; 4
  92:	78 f4       	brcc	.+30     	; 0xb2 <DIO_writePort+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	41 f0       	breq	.+16     	; 0xa8 <DIO_writePort+0x18>
  98:	28 f0       	brcs	.+10     	; 0xa4 <DIO_writePort+0x14>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	39 f0       	breq	.+14     	; 0xac <DIO_writePort+0x1c>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	39 f0       	breq	.+14     	; 0xb0 <DIO_writePort+0x20>
  a2:	08 95       	ret
		{
		case PORTA_ID:
			PORTA = value;
  a4:	6b bb       	out	0x1b, r22	; 27
			break;
  a6:	08 95       	ret
		case PORTB_ID:
			PORTB = value;
  a8:	68 bb       	out	0x18, r22	; 24
			break;
  aa:	08 95       	ret
		case PORTC_ID:
			PORTC = value;
  ac:	65 bb       	out	0x15, r22	; 21
			break;
  ae:	08 95       	ret
		case PORTD_ID:
			PORTD = value;
  b0:	62 bb       	out	0x12, r22	; 18
  b2:	08 95       	ret

000000b4 <main>:
#include "app.h"

int main(void)
{
    /* Replace with your application code */
	TWI_init();
  b4:	0e 94 68 00 	call	0xd0	; 0xd0 <TWI_init>
	uint8 x = TWI_readByteWithACK();
  b8:	0e 94 72 00 	call	0xe4	; 0xe4 <TWI_readByteWithACK>
  bc:	c8 2f       	mov	r28, r24
	
	
	
	DIO_setupPortDirection(PORTA_ID,PORT_OUTPUT);
  be:	6f ef       	ldi	r22, 0xFF	; 255
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setupPortDirection>
	DIO_writePort(PORTA_ID,x);
  c6:	6c 2f       	mov	r22, r28
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 48 00 	call	0x90	; 0x90 <DIO_writePort>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x1a>

000000d0 <TWI_init>:
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
}
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 b9       	out	0x00, r24	; 0
  d4:	11 b8       	out	0x01, r1	; 1
  d6:	82 b9       	out	0x02, r24	; 2
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	86 bf       	out	0x36, r24	; 54
  dc:	86 b7       	in	r24, 0x36	; 54
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	86 bf       	out	0x36, r24	; 54
  e2:	08 95       	ret

000000e4 <TWI_readByteWithACK>:
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
  e4:	84 ec       	ldi	r24, 0xC4	; 196
  e6:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
  e8:	06 b6       	in	r0, 0x36	; 54
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <TWI_readByteWithACK+0x4>
    /* Read Data */
    return TWDR;
  ee:	83 b1       	in	r24, 0x03	; 3
}
  f0:	08 95       	ret

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
