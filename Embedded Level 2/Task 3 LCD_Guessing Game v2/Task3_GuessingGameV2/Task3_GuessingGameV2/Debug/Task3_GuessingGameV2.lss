
Task3_GuessingGameV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000c2c  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000c4  008000c4  00000d24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000148a  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000788  00000000  00000000  000022e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000923  00000000  00000000  00002a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00003390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000561  00000000  00000000  00003564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a13  00000000  00000000  00003ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000044d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3c       	cpi	r26, 0xC7	; 199
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 02 	call	0x4c0	; 0x4c0 <main>
  8a:	0c 94 14 06 	jmp	0xc28	; 0xc28 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd>:
	
	Timer0_data = extra_TCNT0_initial_value; // setting the initial value of TCVTO to be 256 - 37 = 219
	while(Timer0_overflow_flag == 0);
	Timer0_flags = 0x01;  		// Clear TOV0 flag
	Timer0_control = 0x00; // disable timer0
}
  92:	95 b3       	in	r25, 0x15	; 21
  94:	9e 7f       	andi	r25, 0xFE	; 254
  96:	95 bb       	out	0x15, r25	; 21
  98:	82 bb       	out	0x12, r24	; 18
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	89 ef       	ldi	r24, 0xF9	; 249
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_cmd+0x18>
  aa:	00 00       	nop
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	8b 7f       	andi	r24, 0xFB	; 251
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	89 ef       	ldi	r24, 0xF9	; 249
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcd_cmd+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcd_cmd+0x2a>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <Lcd_Set_Cursor>:
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	39 f4       	brne	.+14     	; 0xd2 <Lcd_Set_Cursor+0x12>
  c4:	86 2f       	mov	r24, r22
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	80 58       	subi	r24, 0x80	; 128
  ca:	9f 4f       	sbci	r25, 0xFF	; 255
  cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
  d0:	08 95       	ret
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	31 f4       	brne	.+12     	; 0xe2 <Lcd_Set_Cursor+0x22>
  d6:	86 2f       	mov	r24, r22
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	80 54       	subi	r24, 0x40	; 64
  dc:	9f 4f       	sbci	r25, 0xFF	; 255
  de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
  e2:	08 95       	ret

000000e4 <lcd_write_char>:
  e4:	95 b3       	in	r25, 0x15	; 21
  e6:	91 60       	ori	r25, 0x01	; 1
  e8:	95 bb       	out	0x15, r25	; 21
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	85 bb       	out	0x15, r24	; 21
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_write_char+0x12>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_write_char+0x18>
  fc:	00 00       	nop
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	85 bb       	out	0x15, r24	; 21
 104:	89 ef       	ldi	r24, 0xF9	; 249
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write_char+0x24>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_write_char+0x2a>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <lcd_write_string>:
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	8c 01       	movw	r16, r24
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	04 c0       	rjmp	.+8      	; 0x12a <lcd_write_string+0x18>
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_write_char>
 128:	21 96       	adiw	r28, 0x01	; 1
 12a:	f8 01       	movw	r30, r16
 12c:	ec 0f       	add	r30, r28
 12e:	fd 1f       	adc	r31, r29
 130:	80 81       	ld	r24, Z
 132:	81 11       	cpse	r24, r1
 134:	f6 cf       	rjmp	.-20     	; 0x122 <lcd_write_string+0x10>
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <lcd_init>:
 140:	80 ef       	ldi	r24, 0xF0	; 240
 142:	81 bb       	out	0x11, r24	; 17
 144:	87 e0       	ldi	r24, 0x07	; 7
 146:	84 bb       	out	0x14, r24	; 20
 148:	85 b3       	in	r24, 0x15	; 21
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	85 bb       	out	0x15, r24	; 21
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	8d 7f       	andi	r24, 0xFD	; 253
 152:	85 bb       	out	0x15, r24	; 21
 154:	85 b3       	in	r24, 0x15	; 21
 156:	8b 7f       	andi	r24, 0xFB	; 251
 158:	85 bb       	out	0x15, r24	; 21
 15a:	88 e3       	ldi	r24, 0x38	; 56
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 17a:	08 95       	ret

0000017c <DIO_init>:
 17c:	41 11       	cpse	r20, r1
 17e:	0d c0       	rjmp	.+26     	; 0x19a <DIO_init+0x1e>
 180:	fb 01       	movw	r30, r22
 182:	30 81       	ld	r19, Z
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_init+0x12>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	2a 95       	dec	r18
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_init+0xe>
 192:	80 95       	com	r24
 194:	83 23       	and	r24, r19
 196:	80 83       	st	Z, r24
 198:	08 95       	ret
 19a:	fb 01       	movw	r30, r22
 19c:	30 81       	ld	r19, Z
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_init+0x2c>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	2a 95       	dec	r18
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_init+0x28>
 1ac:	83 2b       	or	r24, r19
 1ae:	80 83       	st	Z, r24
 1b0:	08 95       	ret

000001b2 <button_init>:
 1b2:	24 2f       	mov	r18, r20
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_init>
 1ba:	08 95       	ret

000001bc <keypad>:
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	8b bb       	out	0x1b, r24	; 27
 1c0:	c8 99       	sbic	0x19, 0	; 25
 1c2:	3e c0       	rjmp	.+124    	; 0x240 <keypad+0x84>
 1c4:	c9 99       	sbic	0x19, 1	; 25
 1c6:	3e c0       	rjmp	.+124    	; 0x244 <keypad+0x88>
 1c8:	ca 99       	sbic	0x19, 2	; 25
 1ca:	3e c0       	rjmp	.+124    	; 0x248 <keypad+0x8c>
 1cc:	cb 99       	sbic	0x19, 3	; 25
 1ce:	3e c0       	rjmp	.+124    	; 0x24c <keypad+0x90>
 1d0:	89 ef       	ldi	r24, 0xF9	; 249
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <keypad+0x18>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <keypad+0x1e>
 1da:	00 00       	nop
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	8b bb       	out	0x1b, r24	; 27
 1e0:	c8 99       	sbic	0x19, 0	; 25
 1e2:	36 c0       	rjmp	.+108    	; 0x250 <keypad+0x94>
 1e4:	c9 99       	sbic	0x19, 1	; 25
 1e6:	36 c0       	rjmp	.+108    	; 0x254 <keypad+0x98>
 1e8:	ca 99       	sbic	0x19, 2	; 25
 1ea:	36 c0       	rjmp	.+108    	; 0x258 <keypad+0x9c>
 1ec:	cb 99       	sbic	0x19, 3	; 25
 1ee:	36 c0       	rjmp	.+108    	; 0x25c <keypad+0xa0>
 1f0:	89 ef       	ldi	r24, 0xF9	; 249
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <keypad+0x38>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <keypad+0x3e>
 1fa:	00 00       	nop
 1fc:	80 e4       	ldi	r24, 0x40	; 64
 1fe:	8b bb       	out	0x1b, r24	; 27
 200:	c8 99       	sbic	0x19, 0	; 25
 202:	2e c0       	rjmp	.+92     	; 0x260 <keypad+0xa4>
 204:	c9 99       	sbic	0x19, 1	; 25
 206:	2e c0       	rjmp	.+92     	; 0x264 <keypad+0xa8>
 208:	ca 99       	sbic	0x19, 2	; 25
 20a:	2e c0       	rjmp	.+92     	; 0x268 <keypad+0xac>
 20c:	cb 99       	sbic	0x19, 3	; 25
 20e:	2e c0       	rjmp	.+92     	; 0x26c <keypad+0xb0>
 210:	89 ef       	ldi	r24, 0xF9	; 249
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <keypad+0x58>
 218:	00 c0       	rjmp	.+0      	; 0x21a <keypad+0x5e>
 21a:	00 00       	nop
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	8b bb       	out	0x1b, r24	; 27
 220:	c8 99       	sbic	0x19, 0	; 25
 222:	26 c0       	rjmp	.+76     	; 0x270 <keypad+0xb4>
 224:	c9 99       	sbic	0x19, 1	; 25
 226:	26 c0       	rjmp	.+76     	; 0x274 <keypad+0xb8>
 228:	ca 99       	sbic	0x19, 2	; 25
 22a:	26 c0       	rjmp	.+76     	; 0x278 <keypad+0xbc>
 22c:	cb 99       	sbic	0x19, 3	; 25
 22e:	26 c0       	rjmp	.+76     	; 0x27c <keypad+0xc0>
 230:	89 ef       	ldi	r24, 0xF9	; 249
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <keypad+0x78>
 238:	00 c0       	rjmp	.+0      	; 0x23a <keypad+0x7e>
 23a:	00 00       	nop
 23c:	8e e6       	ldi	r24, 0x6E	; 110
 23e:	08 95       	ret
 240:	87 e3       	ldi	r24, 0x37	; 55
 242:	08 95       	ret
 244:	88 e3       	ldi	r24, 0x38	; 56
 246:	08 95       	ret
 248:	89 e3       	ldi	r24, 0x39	; 57
 24a:	08 95       	ret
 24c:	89 e6       	ldi	r24, 0x69	; 105
 24e:	08 95       	ret
 250:	84 e3       	ldi	r24, 0x34	; 52
 252:	08 95       	ret
 254:	85 e3       	ldi	r24, 0x35	; 53
 256:	08 95       	ret
 258:	86 e3       	ldi	r24, 0x36	; 54
 25a:	08 95       	ret
 25c:	89 e6       	ldi	r24, 0x69	; 105
 25e:	08 95       	ret
 260:	81 e3       	ldi	r24, 0x31	; 49
 262:	08 95       	ret
 264:	82 e3       	ldi	r24, 0x32	; 50
 266:	08 95       	ret
 268:	83 e3       	ldi	r24, 0x33	; 51
 26a:	08 95       	ret
 26c:	89 e6       	ldi	r24, 0x69	; 105
 26e:	08 95       	ret
 270:	89 e6       	ldi	r24, 0x69	; 105
 272:	08 95       	ret
 274:	80 e3       	ldi	r24, 0x30	; 48
 276:	08 95       	ret
 278:	89 e6       	ldi	r24, 0x69	; 105
 27a:	08 95       	ret
 27c:	89 e6       	ldi	r24, 0x69	; 105
 27e:	08 95       	ret

00000280 <__vector_9>:


int delayTime ; //global
void __vector_9 (void) __attribute__ ((signal,used)) ;
void __vector_9 (void) // Timer1 ISR // executed if TOV1 is set in TIFR
{
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	8f 93       	push	r24
	timeIsOver = 1;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
	cli();
 292:	f8 94       	cli
}
 294:	8f 91       	pop	r24
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <timer_init_interr>:
void timer_init_interr(int time) // Timer 1
{
	delayTime = ceil(CyclesToOverFlowInterr - time/1.024);
 2a0:	bc 01       	movw	r22, r24
 2a2:	99 0f       	add	r25, r25
 2a4:	88 0b       	sbc	r24, r24
 2a6:	99 0b       	sbc	r25, r25
 2a8:	0e 94 05 04 	call	0x80a	; 0x80a <__floatsisf>
 2ac:	2f e6       	ldi	r18, 0x6F	; 111
 2ae:	32 e1       	ldi	r19, 0x12	; 18
 2b0:	43 e8       	ldi	r20, 0x83	; 131
 2b2:	5f e3       	ldi	r21, 0x3F	; 63
 2b4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divsf3>
 2b8:	9b 01       	movw	r18, r22
 2ba:	ac 01       	movw	r20, r24
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	97 e4       	ldi	r25, 0x47	; 71
 2c4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__subsf3>
 2c8:	0e 94 44 03 	call	0x688	; 0x688 <ceil>
 2cc:	0e 94 cd 03 	call	0x79a	; 0x79a <__fixsfsi>
 2d0:	70 93 c6 00 	sts	0x00C6, r23	; 0x8000c6 <delayTime+0x1>
 2d4:	60 93 c5 00 	sts	0x00C5, r22	; 0x8000c5 <delayTime>
	TCNT1 =  delayTime;  // combines TCNT1H and TCNT1L
 2d8:	7d bd       	out	0x2d, r23	; 45
 2da:	6c bd       	out	0x2c, r22	; 44
	
	Timer1_control_regA = 0x00;
 2dc:	1f bc       	out	0x2f, r1	; 47
	Timer1_control_regB = 0b00000101;  // Timer mode with 1024 prescler
 2de:	85 e0       	ldi	r24, 0x05	; 5
 2e0:	8e bd       	out	0x2e, r24	; 46
	Timer1_interr_mask = 0x04 ;   // Enable timer1 overflow interrupt(TOIE1)
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	89 bf       	out	0x39, r24	; 57
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
 2e6:	78 94       	sei
 2e8:	08 95       	ret

000002ea <app_init>:
#include "DIO_Driver/dio.h"
#include "KeyPad_Driver/keypad.h"
#include "Timer_Driver/timer.h"
void app_init(void)
{
	lcd_init();
 2ea:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_init>
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,4);
 2ee:	24 e0       	ldi	r18, 0x04	; 4
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	6a e3       	ldi	r22, 0x3A	; 58
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	8b e3       	ldi	r24, 0x3B	; 59
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_init>
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,5);
 2fe:	25 e0       	ldi	r18, 0x05	; 5
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	6a e3       	ldi	r22, 0x3A	; 58
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	8b e3       	ldi	r24, 0x3B	; 59
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_init>
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,6);
 30e:	26 e0       	ldi	r18, 0x06	; 6
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	6a e3       	ldi	r22, 0x3A	; 58
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	8b e3       	ldi	r24, 0x3B	; 59
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_init>
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,7);
 31e:	27 e0       	ldi	r18, 0x07	; 7
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	6a e3       	ldi	r22, 0x3A	; 58
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	8b e3       	ldi	r24, 0x3B	; 59
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_init>
	
	button_init(&PORTA_Data,&PORTA_Dir,0);
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	6a e3       	ldi	r22, 0x3A	; 58
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	8b e3       	ldi	r24, 0x3B	; 59
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,1);
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	6a e3       	ldi	r22, 0x3A	; 58
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	8b e3       	ldi	r24, 0x3B	; 59
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,2);
 34a:	42 e0       	ldi	r20, 0x02	; 2
 34c:	6a e3       	ldi	r22, 0x3A	; 58
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	8b e3       	ldi	r24, 0x3B	; 59
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,3);
 358:	43 e0       	ldi	r20, 0x03	; 3
 35a:	6a e3       	ldi	r22, 0x3A	; 58
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	8b e3       	ldi	r24, 0x3B	; 59
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <button_init>
 366:	08 95       	ret

00000368 <render_main_screen>:

}

void render_main_screen(void)
{
	Lcd_Set_Cursor(1,0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 60 00 	call	0xc0	; 0xc0 <Lcd_Set_Cursor>
	lcd_write_string("Please Guess");
 370:	84 e6       	ldi	r24, 0x64	; 100
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 60 00 	call	0xc0	; 0xc0 <Lcd_Set_Cursor>
	lcd_write_string("an Integer:");
 380:	81 e7       	ldi	r24, 0x71	; 113
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
 388:	08 95       	ret

0000038a <render_win_screen>:
}
void render_win_screen(char* number)
{
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	Lcd_Set_Cursor(1,4);
 398:	64 e0       	ldi	r22, 0x04	; 4
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 60 00 	call	0xc0	; 0xc0 <Lcd_Set_Cursor>
	lcd_write_string("YOU WON");
 3a0:	8d e7       	ldi	r24, 0x7D	; 125
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	0e 94 60 00 	call	0xc0	; 0xc0 <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 3b0:	85 e8       	ldi	r24, 0x85	; 133
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
	lcd_write_string(number);
 3b8:	ce 01       	movw	r24, r28
 3ba:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3be:	2f e7       	ldi	r18, 0x7F	; 127
 3c0:	8a e1       	ldi	r24, 0x1A	; 26
 3c2:	96 e0       	ldi	r25, 0x06	; 6
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <render_win_screen+0x3a>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <render_win_screen+0x44>
 3ce:	00 00       	nop
	_delay_ms(2000);
	lcd_cmd(0x01);
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <render_loss_screen>:
void render_loss_screen(char* number)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	Lcd_Set_Cursor(1,4);
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 60 00 	call	0xc0	; 0xc0 <Lcd_Set_Cursor>
	lcd_write_string("YOU LOST");
 3f4:	8e e8       	ldi	r24, 0x8E	; 142
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	0e 94 60 00 	call	0xc0	; 0xc0 <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 404:	85 e8       	ldi	r24, 0x85	; 133
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
	lcd_write_string(number);
 40c:	ce 01       	movw	r24, r28
 40e:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
 412:	2f e7       	ldi	r18, 0x7F	; 127
 414:	8a e1       	ldi	r24, 0x1A	; 26
 416:	96 e0       	ldi	r25, 0x06	; 6
 418:	21 50       	subi	r18, 0x01	; 1
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 422:	00 00       	nop
	_delay_ms(2000);
	lcd_cmd(0x01);
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <render_range_invalid_screen>:
void render_range_invalid_screen()
{
	lcd_cmd(0x01);
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	Lcd_Set_Cursor(1,0);
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 60 00 	call	0xc0	; 0xc0 <Lcd_Set_Cursor>
	lcd_write_string("The Valid Range");
 442:	87 e9       	ldi	r24, 0x97	; 151
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	0e 94 60 00 	call	0xc0	; 0xc0 <Lcd_Set_Cursor>
	lcd_write_string("from 1 -> 15:");
 452:	87 ea       	ldi	r24, 0xA7	; 167
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
 45a:	2f e7       	ldi	r18, 0x7F	; 127
 45c:	8a e1       	ldi	r24, 0x1A	; 26
 45e:	96 e0       	ldi	r25, 0x06	; 6
 460:	21 50       	subi	r18, 0x01	; 1
 462:	80 40       	sbci	r24, 0x00	; 0
 464:	90 40       	sbci	r25, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <render_range_invalid_screen+0x2e>
 468:	00 c0       	rjmp	.+0      	; 0x46a <render_range_invalid_screen+0x38>
 46a:	00 00       	nop
	_delay_ms(2000);
	lcd_cmd(0x01);
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 474:	08 95       	ret

00000476 <render_invalid_input_screen>:
}
void render_invalid_input_screen()
{
	lcd_cmd(0x01);
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	Lcd_Set_Cursor(1,0);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 60 00 	call	0xc0	; 0xc0 <Lcd_Set_Cursor>
	lcd_write_string("Invalid Input");
 486:	85 eb       	ldi	r24, 0xB5	; 181
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
 48e:	2f e7       	ldi	r18, 0x7F	; 127
 490:	8a e1       	ldi	r24, 0x1A	; 26
 492:	96 e0       	ldi	r25, 0x06	; 6
 494:	21 50       	subi	r18, 0x01	; 1
 496:	80 40       	sbci	r24, 0x00	; 0
 498:	90 40       	sbci	r25, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <render_invalid_input_screen+0x1e>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <render_invalid_input_screen+0x28>
 49e:	00 00       	nop
	_delay_ms(2000);
	lcd_cmd(0x01);
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 4a8:	08 95       	ret

000004aa <rand_int>:
}
uint8_t rand_int(uint8_t seed)
{
	srand(seed);
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 4b 05 	call	0xa96	; 0xa96 <srand>
	return (rand()%14+1); // random number between 1 and 15 inclusive
 4b0:	0e 94 46 05 	call	0xa8c	; 0xa8c <rand>
 4b4:	6e e0       	ldi	r22, 0x0E	; 14
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__divmodhi4>
}
 4bc:	8f 5f       	subi	r24, 0xFF	; 255
 4be:	08 95       	ret

000004c0 <main>:
#include "app.h"



int main(void)
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	27 97       	sbiw	r28, 0x07	; 7
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
	app_init();
 4d4:	0e 94 75 01 	call	0x2ea	; 0x2ea <app_init>
	uint8_t input = 0;
	uint8_t i = 0;
	uint8_t seed = 0;
	char sinput[5];
	memset(sinput,'\0', 5);
 4d8:	fe 01       	movw	r30, r28
 4da:	31 96       	adiw	r30, 0x01	; 1
 4dc:	85 e0       	ldi	r24, 0x05	; 5
 4de:	df 01       	movw	r26, r30
 4e0:	1d 92       	st	X+, r1
 4e2:	8a 95       	dec	r24
 4e4:	e9 f7       	brne	.-6      	; 0x4e0 <main+0x20>
int main(void)
{
	app_init();
	uint8_t input = 0;
	uint8_t i = 0;
	uint8_t seed = 0;
 4e6:	10 e0       	ldi	r17, 0x00	; 0

int main(void)
{
	app_init();
	uint8_t input = 0;
	uint8_t i = 0;
 4e8:	f1 2c       	mov	r15, r1
	memset(sinput,'\0', 5);
	
	while(1)
	{
		
		if(!timeIsOver)
 4ea:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 4ee:	81 11       	cpse	r24, r1
 4f0:	28 c0       	rjmp	.+80     	; 0x542 <main+0x82>
		{
			int8_t key = keypad();
 4f2:	0e 94 de 00 	call	0x1bc	; 0x1bc <keypad>
 4f6:	08 2f       	mov	r16, r24
			render_main_screen();
 4f8:	0e 94 b4 01 	call	0x368	; 0x368 <render_main_screen>
			if(key == invalid)
 4fc:	09 36       	cpi	r16, 0x69	; 105
 4fe:	19 f4       	brne	.+6      	; 0x506 <main+0x46>
			{
				render_invalid_input_screen();
 500:	0e 94 3b 02 	call	0x476	; 0x476 <render_invalid_input_screen>
 504:	52 c0       	rjmp	.+164    	; 0x5aa <main+0xea>
			}
			else if(key != none)
 506:	be e6       	ldi	r27, 0x6E	; 110
 508:	0b 17       	cp	r16, r27
 50a:	09 f4       	brne	.+2      	; 0x50e <main+0x4e>
 50c:	4e c0       	rjmp	.+156    	; 0x5aa <main+0xea>
			{
				sinput[i] = key;
 50e:	e1 e0       	ldi	r30, 0x01	; 1
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	ec 0f       	add	r30, r28
 514:	fd 1f       	adc	r31, r29
 516:	ef 0d       	add	r30, r15
 518:	f1 1d       	adc	r31, r1
 51a:	00 83       	st	Z, r16
				lcd_write_string(sinput);
 51c:	ce 01       	movw	r24, r28
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	0e 94 89 00 	call	0x112	; 0x112 <lcd_write_string>
 524:	2f e5       	ldi	r18, 0x5F	; 95
 526:	8a ee       	ldi	r24, 0xEA	; 234
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	21 50       	subi	r18, 0x01	; 1
 52c:	80 40       	sbci	r24, 0x00	; 0
 52e:	90 40       	sbci	r25, 0x00	; 0
 530:	e1 f7       	brne	.-8      	; 0x52a <main+0x6a>
 532:	00 c0       	rjmp	.+0      	; 0x534 <main+0x74>
 534:	00 00       	nop
				_delay_ms(300);
				i++;
 536:	f3 94       	inc	r15
				timer_init_interr(1000);
 538:	88 ee       	ldi	r24, 0xE8	; 232
 53a:	93 e0       	ldi	r25, 0x03	; 3
 53c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <timer_init_interr>
 540:	34 c0       	rjmp	.+104    	; 0x5aa <main+0xea>
			
		}
		else
		{
			
			uint8_t randNumber = rand_int(seed);
 542:	81 2f       	mov	r24, r17
 544:	0e 94 55 02 	call	0x4aa	; 0x4aa <rand_int>
 548:	08 2f       	mov	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 54a:	4a e0       	ldi	r20, 0x0A	; 10
 54c:	be 01       	movw	r22, r28
 54e:	6a 5f       	subi	r22, 0xFA	; 250
 550:	7f 4f       	sbci	r23, 0xFF	; 255
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
			char sRandNumber[2] ;
			itoa(randNumber,sRandNumber,10);
			
			input = atoi(sinput);
 558:	ce 01       	movw	r24, r28
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	0e 94 56 05 	call	0xaac	; 0xaac <atoi>
			if(input > 15 || input == 0)
 560:	9f ef       	ldi	r25, 0xFF	; 255
 562:	98 0f       	add	r25, r24
 564:	9f 30       	cpi	r25, 0x0F	; 15
 566:	18 f0       	brcs	.+6      	; 0x56e <main+0xae>
			{
				render_range_invalid_screen();
 568:	0e 94 19 02 	call	0x432	; 0x432 <render_range_invalid_screen>
 56c:	0b c0       	rjmp	.+22     	; 0x584 <main+0xc4>
			}
			else if(input == randNumber)
 56e:	08 13       	cpse	r16, r24
 570:	05 c0       	rjmp	.+10     	; 0x57c <main+0xbc>
			{
				render_win_screen(sRandNumber);
 572:	ce 01       	movw	r24, r28
 574:	06 96       	adiw	r24, 0x06	; 6
 576:	0e 94 c5 01 	call	0x38a	; 0x38a <render_win_screen>
 57a:	04 c0       	rjmp	.+8      	; 0x584 <main+0xc4>
			}
			else
			{
				render_loss_screen(sRandNumber);
 57c:	ce 01       	movw	r24, r28
 57e:	06 96       	adiw	r24, 0x06	; 6
 580:	0e 94 ef 01 	call	0x3de	; 0x3de <render_loss_screen>
 584:	af e9       	ldi	r26, 0x9F	; 159
 586:	b6 e8       	ldi	r27, 0x86	; 134
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	a1 50       	subi	r26, 0x01	; 1
 58c:	b0 40       	sbci	r27, 0x00	; 0
 58e:	20 40       	sbci	r18, 0x00	; 0
 590:	e1 f7       	brne	.-8      	; 0x58a <main+0xca>
 592:	00 c0       	rjmp	.+0      	; 0x594 <main+0xd4>
 594:	00 00       	nop
			}
			_delay_ms(500);
			timeIsOver = 0;
 596:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__data_end>
			memset(sinput,'\0', 5);
 59a:	fe 01       	movw	r30, r28
 59c:	31 96       	adiw	r30, 0x01	; 1
 59e:	85 e0       	ldi	r24, 0x05	; 5
 5a0:	df 01       	movw	r26, r30
 5a2:	1d 92       	st	X+, r1
 5a4:	8a 95       	dec	r24
 5a6:	e9 f7       	brne	.-6      	; 0x5a2 <main+0xe2>
			i = 0; 
 5a8:	f1 2c       	mov	r15, r1

		}
		seed++;
 5aa:	1f 5f       	subi	r17, 0xFF	; 255
	}
 5ac:	9e cf       	rjmp	.-196    	; 0x4ea <main+0x2a>

000005ae <__subsf3>:
 5ae:	50 58       	subi	r21, 0x80	; 128

000005b0 <__addsf3>:
 5b0:	bb 27       	eor	r27, r27
 5b2:	aa 27       	eor	r26, r26
 5b4:	0e 94 ef 02 	call	0x5de	; 0x5de <__addsf3x>
 5b8:	0c 94 80 04 	jmp	0x900	; 0x900 <__fp_round>
 5bc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__fp_pscA>
 5c0:	38 f0       	brcs	.+14     	; 0x5d0 <__addsf3+0x20>
 5c2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_pscB>
 5c6:	20 f0       	brcs	.+8      	; 0x5d0 <__addsf3+0x20>
 5c8:	39 f4       	brne	.+14     	; 0x5d8 <__addsf3+0x28>
 5ca:	9f 3f       	cpi	r25, 0xFF	; 255
 5cc:	19 f4       	brne	.+6      	; 0x5d4 <__addsf3+0x24>
 5ce:	26 f4       	brtc	.+8      	; 0x5d8 <__addsf3+0x28>
 5d0:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__fp_nan>
 5d4:	0e f4       	brtc	.+2      	; 0x5d8 <__addsf3+0x28>
 5d6:	e0 95       	com	r30
 5d8:	e7 fb       	bst	r30, 7
 5da:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>

000005de <__addsf3x>:
 5de:	e9 2f       	mov	r30, r25
 5e0:	0e 94 91 04 	call	0x922	; 0x922 <__fp_split3>
 5e4:	58 f3       	brcs	.-42     	; 0x5bc <__addsf3+0xc>
 5e6:	ba 17       	cp	r27, r26
 5e8:	62 07       	cpc	r22, r18
 5ea:	73 07       	cpc	r23, r19
 5ec:	84 07       	cpc	r24, r20
 5ee:	95 07       	cpc	r25, r21
 5f0:	20 f0       	brcs	.+8      	; 0x5fa <__addsf3x+0x1c>
 5f2:	79 f4       	brne	.+30     	; 0x612 <__addsf3x+0x34>
 5f4:	a6 f5       	brtc	.+104    	; 0x65e <__addsf3x+0x80>
 5f6:	0c 94 cb 04 	jmp	0x996	; 0x996 <__fp_zero>
 5fa:	0e f4       	brtc	.+2      	; 0x5fe <__addsf3x+0x20>
 5fc:	e0 95       	com	r30
 5fe:	0b 2e       	mov	r0, r27
 600:	ba 2f       	mov	r27, r26
 602:	a0 2d       	mov	r26, r0
 604:	0b 01       	movw	r0, r22
 606:	b9 01       	movw	r22, r18
 608:	90 01       	movw	r18, r0
 60a:	0c 01       	movw	r0, r24
 60c:	ca 01       	movw	r24, r20
 60e:	a0 01       	movw	r20, r0
 610:	11 24       	eor	r1, r1
 612:	ff 27       	eor	r31, r31
 614:	59 1b       	sub	r21, r25
 616:	99 f0       	breq	.+38     	; 0x63e <__addsf3x+0x60>
 618:	59 3f       	cpi	r21, 0xF9	; 249
 61a:	50 f4       	brcc	.+20     	; 0x630 <__addsf3x+0x52>
 61c:	50 3e       	cpi	r21, 0xE0	; 224
 61e:	68 f1       	brcs	.+90     	; 0x67a <__addsf3x+0x9c>
 620:	1a 16       	cp	r1, r26
 622:	f0 40       	sbci	r31, 0x00	; 0
 624:	a2 2f       	mov	r26, r18
 626:	23 2f       	mov	r18, r19
 628:	34 2f       	mov	r19, r20
 62a:	44 27       	eor	r20, r20
 62c:	58 5f       	subi	r21, 0xF8	; 248
 62e:	f3 cf       	rjmp	.-26     	; 0x616 <__addsf3x+0x38>
 630:	46 95       	lsr	r20
 632:	37 95       	ror	r19
 634:	27 95       	ror	r18
 636:	a7 95       	ror	r26
 638:	f0 40       	sbci	r31, 0x00	; 0
 63a:	53 95       	inc	r21
 63c:	c9 f7       	brne	.-14     	; 0x630 <__addsf3x+0x52>
 63e:	7e f4       	brtc	.+30     	; 0x65e <__addsf3x+0x80>
 640:	1f 16       	cp	r1, r31
 642:	ba 0b       	sbc	r27, r26
 644:	62 0b       	sbc	r22, r18
 646:	73 0b       	sbc	r23, r19
 648:	84 0b       	sbc	r24, r20
 64a:	ba f0       	brmi	.+46     	; 0x67a <__addsf3x+0x9c>
 64c:	91 50       	subi	r25, 0x01	; 1
 64e:	a1 f0       	breq	.+40     	; 0x678 <__addsf3x+0x9a>
 650:	ff 0f       	add	r31, r31
 652:	bb 1f       	adc	r27, r27
 654:	66 1f       	adc	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	c2 f7       	brpl	.-16     	; 0x64c <__addsf3x+0x6e>
 65c:	0e c0       	rjmp	.+28     	; 0x67a <__addsf3x+0x9c>
 65e:	ba 0f       	add	r27, r26
 660:	62 1f       	adc	r22, r18
 662:	73 1f       	adc	r23, r19
 664:	84 1f       	adc	r24, r20
 666:	48 f4       	brcc	.+18     	; 0x67a <__addsf3x+0x9c>
 668:	87 95       	ror	r24
 66a:	77 95       	ror	r23
 66c:	67 95       	ror	r22
 66e:	b7 95       	ror	r27
 670:	f7 95       	ror	r31
 672:	9e 3f       	cpi	r25, 0xFE	; 254
 674:	08 f0       	brcs	.+2      	; 0x678 <__addsf3x+0x9a>
 676:	b0 cf       	rjmp	.-160    	; 0x5d8 <__addsf3+0x28>
 678:	93 95       	inc	r25
 67a:	88 0f       	add	r24, r24
 67c:	08 f0       	brcs	.+2      	; 0x680 <__addsf3x+0xa2>
 67e:	99 27       	eor	r25, r25
 680:	ee 0f       	add	r30, r30
 682:	97 95       	ror	r25
 684:	87 95       	ror	r24
 686:	08 95       	ret

00000688 <ceil>:
 688:	0e 94 b3 04 	call	0x966	; 0x966 <__fp_trunc>
 68c:	90 f0       	brcs	.+36     	; 0x6b2 <ceil+0x2a>
 68e:	9f 37       	cpi	r25, 0x7F	; 127
 690:	48 f4       	brcc	.+18     	; 0x6a4 <ceil+0x1c>
 692:	91 11       	cpse	r25, r1
 694:	16 f4       	brtc	.+4      	; 0x69a <ceil+0x12>
 696:	0c 94 cc 04 	jmp	0x998	; 0x998 <__fp_szero>
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	80 e8       	ldi	r24, 0x80	; 128
 6a0:	9f e3       	ldi	r25, 0x3F	; 63
 6a2:	08 95       	ret
 6a4:	26 f0       	brts	.+8      	; 0x6ae <ceil+0x26>
 6a6:	1b 16       	cp	r1, r27
 6a8:	61 1d       	adc	r22, r1
 6aa:	71 1d       	adc	r23, r1
 6ac:	81 1d       	adc	r24, r1
 6ae:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_mintl>
 6b2:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_mpack>

000006b6 <__divsf3>:
 6b6:	0e 94 6f 03 	call	0x6de	; 0x6de <__divsf3x>
 6ba:	0c 94 80 04 	jmp	0x900	; 0x900 <__fp_round>
 6be:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_pscB>
 6c2:	58 f0       	brcs	.+22     	; 0x6da <__divsf3+0x24>
 6c4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__fp_pscA>
 6c8:	40 f0       	brcs	.+16     	; 0x6da <__divsf3+0x24>
 6ca:	29 f4       	brne	.+10     	; 0x6d6 <__divsf3+0x20>
 6cc:	5f 3f       	cpi	r21, 0xFF	; 255
 6ce:	29 f0       	breq	.+10     	; 0x6da <__divsf3+0x24>
 6d0:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
 6d4:	51 11       	cpse	r21, r1
 6d6:	0c 94 cc 04 	jmp	0x998	; 0x998 <__fp_szero>
 6da:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__fp_nan>

000006de <__divsf3x>:
 6de:	0e 94 91 04 	call	0x922	; 0x922 <__fp_split3>
 6e2:	68 f3       	brcs	.-38     	; 0x6be <__divsf3+0x8>

000006e4 <__divsf3_pse>:
 6e4:	99 23       	and	r25, r25
 6e6:	b1 f3       	breq	.-20     	; 0x6d4 <__divsf3+0x1e>
 6e8:	55 23       	and	r21, r21
 6ea:	91 f3       	breq	.-28     	; 0x6d0 <__divsf3+0x1a>
 6ec:	95 1b       	sub	r25, r21
 6ee:	55 0b       	sbc	r21, r21
 6f0:	bb 27       	eor	r27, r27
 6f2:	aa 27       	eor	r26, r26
 6f4:	62 17       	cp	r22, r18
 6f6:	73 07       	cpc	r23, r19
 6f8:	84 07       	cpc	r24, r20
 6fa:	38 f0       	brcs	.+14     	; 0x70a <__divsf3_pse+0x26>
 6fc:	9f 5f       	subi	r25, 0xFF	; 255
 6fe:	5f 4f       	sbci	r21, 0xFF	; 255
 700:	22 0f       	add	r18, r18
 702:	33 1f       	adc	r19, r19
 704:	44 1f       	adc	r20, r20
 706:	aa 1f       	adc	r26, r26
 708:	a9 f3       	breq	.-22     	; 0x6f4 <__divsf3_pse+0x10>
 70a:	35 d0       	rcall	.+106    	; 0x776 <__divsf3_pse+0x92>
 70c:	0e 2e       	mov	r0, r30
 70e:	3a f0       	brmi	.+14     	; 0x71e <__divsf3_pse+0x3a>
 710:	e0 e8       	ldi	r30, 0x80	; 128
 712:	32 d0       	rcall	.+100    	; 0x778 <__divsf3_pse+0x94>
 714:	91 50       	subi	r25, 0x01	; 1
 716:	50 40       	sbci	r21, 0x00	; 0
 718:	e6 95       	lsr	r30
 71a:	00 1c       	adc	r0, r0
 71c:	ca f7       	brpl	.-14     	; 0x710 <__divsf3_pse+0x2c>
 71e:	2b d0       	rcall	.+86     	; 0x776 <__divsf3_pse+0x92>
 720:	fe 2f       	mov	r31, r30
 722:	29 d0       	rcall	.+82     	; 0x776 <__divsf3_pse+0x92>
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	bb 1f       	adc	r27, r27
 72c:	26 17       	cp	r18, r22
 72e:	37 07       	cpc	r19, r23
 730:	48 07       	cpc	r20, r24
 732:	ab 07       	cpc	r26, r27
 734:	b0 e8       	ldi	r27, 0x80	; 128
 736:	09 f0       	breq	.+2      	; 0x73a <__divsf3_pse+0x56>
 738:	bb 0b       	sbc	r27, r27
 73a:	80 2d       	mov	r24, r0
 73c:	bf 01       	movw	r22, r30
 73e:	ff 27       	eor	r31, r31
 740:	93 58       	subi	r25, 0x83	; 131
 742:	5f 4f       	sbci	r21, 0xFF	; 255
 744:	3a f0       	brmi	.+14     	; 0x754 <__divsf3_pse+0x70>
 746:	9e 3f       	cpi	r25, 0xFE	; 254
 748:	51 05       	cpc	r21, r1
 74a:	78 f0       	brcs	.+30     	; 0x76a <__divsf3_pse+0x86>
 74c:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
 750:	0c 94 cc 04 	jmp	0x998	; 0x998 <__fp_szero>
 754:	5f 3f       	cpi	r21, 0xFF	; 255
 756:	e4 f3       	brlt	.-8      	; 0x750 <__divsf3_pse+0x6c>
 758:	98 3e       	cpi	r25, 0xE8	; 232
 75a:	d4 f3       	brlt	.-12     	; 0x750 <__divsf3_pse+0x6c>
 75c:	86 95       	lsr	r24
 75e:	77 95       	ror	r23
 760:	67 95       	ror	r22
 762:	b7 95       	ror	r27
 764:	f7 95       	ror	r31
 766:	9f 5f       	subi	r25, 0xFF	; 255
 768:	c9 f7       	brne	.-14     	; 0x75c <__divsf3_pse+0x78>
 76a:	88 0f       	add	r24, r24
 76c:	91 1d       	adc	r25, r1
 76e:	96 95       	lsr	r25
 770:	87 95       	ror	r24
 772:	97 f9       	bld	r25, 7
 774:	08 95       	ret
 776:	e1 e0       	ldi	r30, 0x01	; 1
 778:	66 0f       	add	r22, r22
 77a:	77 1f       	adc	r23, r23
 77c:	88 1f       	adc	r24, r24
 77e:	bb 1f       	adc	r27, r27
 780:	62 17       	cp	r22, r18
 782:	73 07       	cpc	r23, r19
 784:	84 07       	cpc	r24, r20
 786:	ba 07       	cpc	r27, r26
 788:	20 f0       	brcs	.+8      	; 0x792 <__divsf3_pse+0xae>
 78a:	62 1b       	sub	r22, r18
 78c:	73 0b       	sbc	r23, r19
 78e:	84 0b       	sbc	r24, r20
 790:	ba 0b       	sbc	r27, r26
 792:	ee 1f       	adc	r30, r30
 794:	88 f7       	brcc	.-30     	; 0x778 <__divsf3_pse+0x94>
 796:	e0 95       	com	r30
 798:	08 95       	ret

0000079a <__fixsfsi>:
 79a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fixunssfsi>
 79e:	68 94       	set
 7a0:	b1 11       	cpse	r27, r1
 7a2:	0c 94 cc 04 	jmp	0x998	; 0x998 <__fp_szero>
 7a6:	08 95       	ret

000007a8 <__fixunssfsi>:
 7a8:	0e 94 99 04 	call	0x932	; 0x932 <__fp_splitA>
 7ac:	88 f0       	brcs	.+34     	; 0x7d0 <__fixunssfsi+0x28>
 7ae:	9f 57       	subi	r25, 0x7F	; 127
 7b0:	98 f0       	brcs	.+38     	; 0x7d8 <__fixunssfsi+0x30>
 7b2:	b9 2f       	mov	r27, r25
 7b4:	99 27       	eor	r25, r25
 7b6:	b7 51       	subi	r27, 0x17	; 23
 7b8:	b0 f0       	brcs	.+44     	; 0x7e6 <__fixunssfsi+0x3e>
 7ba:	e1 f0       	breq	.+56     	; 0x7f4 <__fixunssfsi+0x4c>
 7bc:	66 0f       	add	r22, r22
 7be:	77 1f       	adc	r23, r23
 7c0:	88 1f       	adc	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	1a f0       	brmi	.+6      	; 0x7cc <__fixunssfsi+0x24>
 7c6:	ba 95       	dec	r27
 7c8:	c9 f7       	brne	.-14     	; 0x7bc <__fixunssfsi+0x14>
 7ca:	14 c0       	rjmp	.+40     	; 0x7f4 <__fixunssfsi+0x4c>
 7cc:	b1 30       	cpi	r27, 0x01	; 1
 7ce:	91 f0       	breq	.+36     	; 0x7f4 <__fixunssfsi+0x4c>
 7d0:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_zero>
 7d4:	b1 e0       	ldi	r27, 0x01	; 1
 7d6:	08 95       	ret
 7d8:	0c 94 cb 04 	jmp	0x996	; 0x996 <__fp_zero>
 7dc:	67 2f       	mov	r22, r23
 7de:	78 2f       	mov	r23, r24
 7e0:	88 27       	eor	r24, r24
 7e2:	b8 5f       	subi	r27, 0xF8	; 248
 7e4:	39 f0       	breq	.+14     	; 0x7f4 <__fixunssfsi+0x4c>
 7e6:	b9 3f       	cpi	r27, 0xF9	; 249
 7e8:	cc f3       	brlt	.-14     	; 0x7dc <__fixunssfsi+0x34>
 7ea:	86 95       	lsr	r24
 7ec:	77 95       	ror	r23
 7ee:	67 95       	ror	r22
 7f0:	b3 95       	inc	r27
 7f2:	d9 f7       	brne	.-10     	; 0x7ea <__fixunssfsi+0x42>
 7f4:	3e f4       	brtc	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f6:	90 95       	com	r25
 7f8:	80 95       	com	r24
 7fa:	70 95       	com	r23
 7fc:	61 95       	neg	r22
 7fe:	7f 4f       	sbci	r23, 0xFF	; 255
 800:	8f 4f       	sbci	r24, 0xFF	; 255
 802:	9f 4f       	sbci	r25, 0xFF	; 255
 804:	08 95       	ret

00000806 <__floatunsisf>:
 806:	e8 94       	clt
 808:	09 c0       	rjmp	.+18     	; 0x81c <__floatsisf+0x12>

0000080a <__floatsisf>:
 80a:	97 fb       	bst	r25, 7
 80c:	3e f4       	brtc	.+14     	; 0x81c <__floatsisf+0x12>
 80e:	90 95       	com	r25
 810:	80 95       	com	r24
 812:	70 95       	com	r23
 814:	61 95       	neg	r22
 816:	7f 4f       	sbci	r23, 0xFF	; 255
 818:	8f 4f       	sbci	r24, 0xFF	; 255
 81a:	9f 4f       	sbci	r25, 0xFF	; 255
 81c:	99 23       	and	r25, r25
 81e:	a9 f0       	breq	.+42     	; 0x84a <__floatsisf+0x40>
 820:	f9 2f       	mov	r31, r25
 822:	96 e9       	ldi	r25, 0x96	; 150
 824:	bb 27       	eor	r27, r27
 826:	93 95       	inc	r25
 828:	f6 95       	lsr	r31
 82a:	87 95       	ror	r24
 82c:	77 95       	ror	r23
 82e:	67 95       	ror	r22
 830:	b7 95       	ror	r27
 832:	f1 11       	cpse	r31, r1
 834:	f8 cf       	rjmp	.-16     	; 0x826 <__floatsisf+0x1c>
 836:	fa f4       	brpl	.+62     	; 0x876 <__stack+0x17>
 838:	bb 0f       	add	r27, r27
 83a:	11 f4       	brne	.+4      	; 0x840 <__floatsisf+0x36>
 83c:	60 ff       	sbrs	r22, 0
 83e:	1b c0       	rjmp	.+54     	; 0x876 <__stack+0x17>
 840:	6f 5f       	subi	r22, 0xFF	; 255
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	8f 4f       	sbci	r24, 0xFF	; 255
 846:	9f 4f       	sbci	r25, 0xFF	; 255
 848:	16 c0       	rjmp	.+44     	; 0x876 <__stack+0x17>
 84a:	88 23       	and	r24, r24
 84c:	11 f0       	breq	.+4      	; 0x852 <__floatsisf+0x48>
 84e:	96 e9       	ldi	r25, 0x96	; 150
 850:	11 c0       	rjmp	.+34     	; 0x874 <__stack+0x15>
 852:	77 23       	and	r23, r23
 854:	21 f0       	breq	.+8      	; 0x85e <__floatsisf+0x54>
 856:	9e e8       	ldi	r25, 0x8E	; 142
 858:	87 2f       	mov	r24, r23
 85a:	76 2f       	mov	r23, r22
 85c:	05 c0       	rjmp	.+10     	; 0x868 <__stack+0x9>
 85e:	66 23       	and	r22, r22
 860:	71 f0       	breq	.+28     	; 0x87e <__stack+0x1f>
 862:	96 e8       	ldi	r25, 0x86	; 134
 864:	86 2f       	mov	r24, r22
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	2a f0       	brmi	.+10     	; 0x876 <__stack+0x17>
 86c:	9a 95       	dec	r25
 86e:	66 0f       	add	r22, r22
 870:	77 1f       	adc	r23, r23
 872:	88 1f       	adc	r24, r24
 874:	da f7       	brpl	.-10     	; 0x86c <__stack+0xd>
 876:	88 0f       	add	r24, r24
 878:	96 95       	lsr	r25
 87a:	87 95       	ror	r24
 87c:	97 f9       	bld	r25, 7
 87e:	08 95       	ret

00000880 <__fp_inf>:
 880:	97 f9       	bld	r25, 7
 882:	9f 67       	ori	r25, 0x7F	; 127
 884:	80 e8       	ldi	r24, 0x80	; 128
 886:	70 e0       	ldi	r23, 0x00	; 0
 888:	60 e0       	ldi	r22, 0x00	; 0
 88a:	08 95       	ret

0000088c <__fp_mintl>:
 88c:	88 23       	and	r24, r24
 88e:	71 f4       	brne	.+28     	; 0x8ac <__fp_mintl+0x20>
 890:	77 23       	and	r23, r23
 892:	21 f0       	breq	.+8      	; 0x89c <__fp_mintl+0x10>
 894:	98 50       	subi	r25, 0x08	; 8
 896:	87 2b       	or	r24, r23
 898:	76 2f       	mov	r23, r22
 89a:	07 c0       	rjmp	.+14     	; 0x8aa <__fp_mintl+0x1e>
 89c:	66 23       	and	r22, r22
 89e:	11 f4       	brne	.+4      	; 0x8a4 <__fp_mintl+0x18>
 8a0:	99 27       	eor	r25, r25
 8a2:	0d c0       	rjmp	.+26     	; 0x8be <__fp_mintl+0x32>
 8a4:	90 51       	subi	r25, 0x10	; 16
 8a6:	86 2b       	or	r24, r22
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	2a f0       	brmi	.+10     	; 0x8b8 <__fp_mintl+0x2c>
 8ae:	9a 95       	dec	r25
 8b0:	66 0f       	add	r22, r22
 8b2:	77 1f       	adc	r23, r23
 8b4:	88 1f       	adc	r24, r24
 8b6:	da f7       	brpl	.-10     	; 0x8ae <__fp_mintl+0x22>
 8b8:	88 0f       	add	r24, r24
 8ba:	96 95       	lsr	r25
 8bc:	87 95       	ror	r24
 8be:	97 f9       	bld	r25, 7
 8c0:	08 95       	ret

000008c2 <__fp_mpack>:
 8c2:	9f 3f       	cpi	r25, 0xFF	; 255
 8c4:	31 f0       	breq	.+12     	; 0x8d2 <__fp_mpack_finite+0xc>

000008c6 <__fp_mpack_finite>:
 8c6:	91 50       	subi	r25, 0x01	; 1
 8c8:	20 f4       	brcc	.+8      	; 0x8d2 <__fp_mpack_finite+0xc>
 8ca:	87 95       	ror	r24
 8cc:	77 95       	ror	r23
 8ce:	67 95       	ror	r22
 8d0:	b7 95       	ror	r27
 8d2:	88 0f       	add	r24, r24
 8d4:	91 1d       	adc	r25, r1
 8d6:	96 95       	lsr	r25
 8d8:	87 95       	ror	r24
 8da:	97 f9       	bld	r25, 7
 8dc:	08 95       	ret

000008de <__fp_nan>:
 8de:	9f ef       	ldi	r25, 0xFF	; 255
 8e0:	80 ec       	ldi	r24, 0xC0	; 192
 8e2:	08 95       	ret

000008e4 <__fp_pscA>:
 8e4:	00 24       	eor	r0, r0
 8e6:	0a 94       	dec	r0
 8e8:	16 16       	cp	r1, r22
 8ea:	17 06       	cpc	r1, r23
 8ec:	18 06       	cpc	r1, r24
 8ee:	09 06       	cpc	r0, r25
 8f0:	08 95       	ret

000008f2 <__fp_pscB>:
 8f2:	00 24       	eor	r0, r0
 8f4:	0a 94       	dec	r0
 8f6:	12 16       	cp	r1, r18
 8f8:	13 06       	cpc	r1, r19
 8fa:	14 06       	cpc	r1, r20
 8fc:	05 06       	cpc	r0, r21
 8fe:	08 95       	ret

00000900 <__fp_round>:
 900:	09 2e       	mov	r0, r25
 902:	03 94       	inc	r0
 904:	00 0c       	add	r0, r0
 906:	11 f4       	brne	.+4      	; 0x90c <__fp_round+0xc>
 908:	88 23       	and	r24, r24
 90a:	52 f0       	brmi	.+20     	; 0x920 <__fp_round+0x20>
 90c:	bb 0f       	add	r27, r27
 90e:	40 f4       	brcc	.+16     	; 0x920 <__fp_round+0x20>
 910:	bf 2b       	or	r27, r31
 912:	11 f4       	brne	.+4      	; 0x918 <__fp_round+0x18>
 914:	60 ff       	sbrs	r22, 0
 916:	04 c0       	rjmp	.+8      	; 0x920 <__fp_round+0x20>
 918:	6f 5f       	subi	r22, 0xFF	; 255
 91a:	7f 4f       	sbci	r23, 0xFF	; 255
 91c:	8f 4f       	sbci	r24, 0xFF	; 255
 91e:	9f 4f       	sbci	r25, 0xFF	; 255
 920:	08 95       	ret

00000922 <__fp_split3>:
 922:	57 fd       	sbrc	r21, 7
 924:	90 58       	subi	r25, 0x80	; 128
 926:	44 0f       	add	r20, r20
 928:	55 1f       	adc	r21, r21
 92a:	59 f0       	breq	.+22     	; 0x942 <__fp_splitA+0x10>
 92c:	5f 3f       	cpi	r21, 0xFF	; 255
 92e:	71 f0       	breq	.+28     	; 0x94c <__fp_splitA+0x1a>
 930:	47 95       	ror	r20

00000932 <__fp_splitA>:
 932:	88 0f       	add	r24, r24
 934:	97 fb       	bst	r25, 7
 936:	99 1f       	adc	r25, r25
 938:	61 f0       	breq	.+24     	; 0x952 <__fp_splitA+0x20>
 93a:	9f 3f       	cpi	r25, 0xFF	; 255
 93c:	79 f0       	breq	.+30     	; 0x95c <__fp_splitA+0x2a>
 93e:	87 95       	ror	r24
 940:	08 95       	ret
 942:	12 16       	cp	r1, r18
 944:	13 06       	cpc	r1, r19
 946:	14 06       	cpc	r1, r20
 948:	55 1f       	adc	r21, r21
 94a:	f2 cf       	rjmp	.-28     	; 0x930 <__fp_split3+0xe>
 94c:	46 95       	lsr	r20
 94e:	f1 df       	rcall	.-30     	; 0x932 <__fp_splitA>
 950:	08 c0       	rjmp	.+16     	; 0x962 <__fp_splitA+0x30>
 952:	16 16       	cp	r1, r22
 954:	17 06       	cpc	r1, r23
 956:	18 06       	cpc	r1, r24
 958:	99 1f       	adc	r25, r25
 95a:	f1 cf       	rjmp	.-30     	; 0x93e <__fp_splitA+0xc>
 95c:	86 95       	lsr	r24
 95e:	71 05       	cpc	r23, r1
 960:	61 05       	cpc	r22, r1
 962:	08 94       	sec
 964:	08 95       	ret

00000966 <__fp_trunc>:
 966:	0e 94 99 04 	call	0x932	; 0x932 <__fp_splitA>
 96a:	a0 f0       	brcs	.+40     	; 0x994 <__fp_trunc+0x2e>
 96c:	be e7       	ldi	r27, 0x7E	; 126
 96e:	b9 17       	cp	r27, r25
 970:	88 f4       	brcc	.+34     	; 0x994 <__fp_trunc+0x2e>
 972:	bb 27       	eor	r27, r27
 974:	9f 38       	cpi	r25, 0x8F	; 143
 976:	60 f4       	brcc	.+24     	; 0x990 <__fp_trunc+0x2a>
 978:	16 16       	cp	r1, r22
 97a:	b1 1d       	adc	r27, r1
 97c:	67 2f       	mov	r22, r23
 97e:	78 2f       	mov	r23, r24
 980:	88 27       	eor	r24, r24
 982:	98 5f       	subi	r25, 0xF8	; 248
 984:	f7 cf       	rjmp	.-18     	; 0x974 <__fp_trunc+0xe>
 986:	86 95       	lsr	r24
 988:	77 95       	ror	r23
 98a:	67 95       	ror	r22
 98c:	b1 1d       	adc	r27, r1
 98e:	93 95       	inc	r25
 990:	96 39       	cpi	r25, 0x96	; 150
 992:	c8 f3       	brcs	.-14     	; 0x986 <__fp_trunc+0x20>
 994:	08 95       	ret

00000996 <__fp_zero>:
 996:	e8 94       	clt

00000998 <__fp_szero>:
 998:	bb 27       	eor	r27, r27
 99a:	66 27       	eor	r22, r22
 99c:	77 27       	eor	r23, r23
 99e:	cb 01       	movw	r24, r22
 9a0:	97 f9       	bld	r25, 7
 9a2:	08 95       	ret

000009a4 <__divmodhi4>:
 9a4:	97 fb       	bst	r25, 7
 9a6:	07 2e       	mov	r0, r23
 9a8:	16 f4       	brtc	.+4      	; 0x9ae <__divmodhi4+0xa>
 9aa:	00 94       	com	r0
 9ac:	07 d0       	rcall	.+14     	; 0x9bc <__divmodhi4_neg1>
 9ae:	77 fd       	sbrc	r23, 7
 9b0:	09 d0       	rcall	.+18     	; 0x9c4 <__divmodhi4_neg2>
 9b2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__udivmodhi4>
 9b6:	07 fc       	sbrc	r0, 7
 9b8:	05 d0       	rcall	.+10     	; 0x9c4 <__divmodhi4_neg2>
 9ba:	3e f4       	brtc	.+14     	; 0x9ca <__divmodhi4_exit>

000009bc <__divmodhi4_neg1>:
 9bc:	90 95       	com	r25
 9be:	81 95       	neg	r24
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	08 95       	ret

000009c4 <__divmodhi4_neg2>:
 9c4:	70 95       	com	r23
 9c6:	61 95       	neg	r22
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255

000009ca <__divmodhi4_exit>:
 9ca:	08 95       	ret

000009cc <__udivmodhi4>:
 9cc:	aa 1b       	sub	r26, r26
 9ce:	bb 1b       	sub	r27, r27
 9d0:	51 e1       	ldi	r21, 0x11	; 17
 9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <__udivmodhi4_ep>

000009d4 <__udivmodhi4_loop>:
 9d4:	aa 1f       	adc	r26, r26
 9d6:	bb 1f       	adc	r27, r27
 9d8:	a6 17       	cp	r26, r22
 9da:	b7 07       	cpc	r27, r23
 9dc:	10 f0       	brcs	.+4      	; 0x9e2 <__udivmodhi4_ep>
 9de:	a6 1b       	sub	r26, r22
 9e0:	b7 0b       	sbc	r27, r23

000009e2 <__udivmodhi4_ep>:
 9e2:	88 1f       	adc	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	5a 95       	dec	r21
 9e8:	a9 f7       	brne	.-22     	; 0x9d4 <__udivmodhi4_loop>
 9ea:	80 95       	com	r24
 9ec:	90 95       	com	r25
 9ee:	bc 01       	movw	r22, r24
 9f0:	cd 01       	movw	r24, r26
 9f2:	08 95       	ret

000009f4 <do_rand>:
 9f4:	8f 92       	push	r8
 9f6:	9f 92       	push	r9
 9f8:	af 92       	push	r10
 9fa:	bf 92       	push	r11
 9fc:	cf 92       	push	r12
 9fe:	df 92       	push	r13
 a00:	ef 92       	push	r14
 a02:	ff 92       	push	r15
 a04:	cf 93       	push	r28
 a06:	df 93       	push	r29
 a08:	ec 01       	movw	r28, r24
 a0a:	68 81       	ld	r22, Y
 a0c:	79 81       	ldd	r23, Y+1	; 0x01
 a0e:	8a 81       	ldd	r24, Y+2	; 0x02
 a10:	9b 81       	ldd	r25, Y+3	; 0x03
 a12:	61 15       	cp	r22, r1
 a14:	71 05       	cpc	r23, r1
 a16:	81 05       	cpc	r24, r1
 a18:	91 05       	cpc	r25, r1
 a1a:	21 f4       	brne	.+8      	; 0xa24 <do_rand+0x30>
 a1c:	64 e2       	ldi	r22, 0x24	; 36
 a1e:	79 ed       	ldi	r23, 0xD9	; 217
 a20:	8b e5       	ldi	r24, 0x5B	; 91
 a22:	97 e0       	ldi	r25, 0x07	; 7
 a24:	2d e1       	ldi	r18, 0x1D	; 29
 a26:	33 ef       	ldi	r19, 0xF3	; 243
 a28:	41 e0       	ldi	r20, 0x01	; 1
 a2a:	50 e0       	ldi	r21, 0x00	; 0
 a2c:	0e 94 b1 05 	call	0xb62	; 0xb62 <__divmodsi4>
 a30:	49 01       	movw	r8, r18
 a32:	5a 01       	movw	r10, r20
 a34:	9b 01       	movw	r18, r22
 a36:	ac 01       	movw	r20, r24
 a38:	a7 ea       	ldi	r26, 0xA7	; 167
 a3a:	b1 e4       	ldi	r27, 0x41	; 65
 a3c:	0e 94 d0 05 	call	0xba0	; 0xba0 <__muluhisi3>
 a40:	6b 01       	movw	r12, r22
 a42:	7c 01       	movw	r14, r24
 a44:	ac ee       	ldi	r26, 0xEC	; 236
 a46:	b4 ef       	ldi	r27, 0xF4	; 244
 a48:	a5 01       	movw	r20, r10
 a4a:	94 01       	movw	r18, r8
 a4c:	0e 94 de 05 	call	0xbbc	; 0xbbc <__mulohisi3>
 a50:	dc 01       	movw	r26, r24
 a52:	cb 01       	movw	r24, r22
 a54:	8c 0d       	add	r24, r12
 a56:	9d 1d       	adc	r25, r13
 a58:	ae 1d       	adc	r26, r14
 a5a:	bf 1d       	adc	r27, r15
 a5c:	b7 ff       	sbrs	r27, 7
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <do_rand+0x72>
 a60:	01 97       	sbiw	r24, 0x01	; 1
 a62:	a1 09       	sbc	r26, r1
 a64:	b0 48       	sbci	r27, 0x80	; 128
 a66:	88 83       	st	Y, r24
 a68:	99 83       	std	Y+1, r25	; 0x01
 a6a:	aa 83       	std	Y+2, r26	; 0x02
 a6c:	bb 83       	std	Y+3, r27	; 0x03
 a6e:	9f 77       	andi	r25, 0x7F	; 127
 a70:	df 91       	pop	r29
 a72:	cf 91       	pop	r28
 a74:	ff 90       	pop	r15
 a76:	ef 90       	pop	r14
 a78:	df 90       	pop	r13
 a7a:	cf 90       	pop	r12
 a7c:	bf 90       	pop	r11
 a7e:	af 90       	pop	r10
 a80:	9f 90       	pop	r9
 a82:	8f 90       	pop	r8
 a84:	08 95       	ret

00000a86 <rand_r>:
 a86:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <do_rand>
 a8a:	08 95       	ret

00000a8c <rand>:
 a8c:	80 e6       	ldi	r24, 0x60	; 96
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <do_rand>
 a94:	08 95       	ret

00000a96 <srand>:
 a96:	a0 e0       	ldi	r26, 0x00	; 0
 a98:	b0 e0       	ldi	r27, 0x00	; 0
 a9a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 a9e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 aa2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 aa6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 aaa:	08 95       	ret

00000aac <atoi>:
 aac:	fc 01       	movw	r30, r24
 aae:	88 27       	eor	r24, r24
 ab0:	99 27       	eor	r25, r25
 ab2:	e8 94       	clt
 ab4:	21 91       	ld	r18, Z+
 ab6:	20 32       	cpi	r18, 0x20	; 32
 ab8:	e9 f3       	breq	.-6      	; 0xab4 <atoi+0x8>
 aba:	29 30       	cpi	r18, 0x09	; 9
 abc:	10 f0       	brcs	.+4      	; 0xac2 <atoi+0x16>
 abe:	2e 30       	cpi	r18, 0x0E	; 14
 ac0:	c8 f3       	brcs	.-14     	; 0xab4 <atoi+0x8>
 ac2:	2b 32       	cpi	r18, 0x2B	; 43
 ac4:	41 f0       	breq	.+16     	; 0xad6 <atoi+0x2a>
 ac6:	2d 32       	cpi	r18, 0x2D	; 45
 ac8:	39 f4       	brne	.+14     	; 0xad8 <atoi+0x2c>
 aca:	68 94       	set
 acc:	04 c0       	rjmp	.+8      	; 0xad6 <atoi+0x2a>
 ace:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulhi_const_10>
 ad2:	82 0f       	add	r24, r18
 ad4:	91 1d       	adc	r25, r1
 ad6:	21 91       	ld	r18, Z+
 ad8:	20 53       	subi	r18, 0x30	; 48
 ada:	2a 30       	cpi	r18, 0x0A	; 10
 adc:	c0 f3       	brcs	.-16     	; 0xace <atoi+0x22>
 ade:	1e f4       	brtc	.+6      	; 0xae6 <atoi+0x3a>
 ae0:	90 95       	com	r25
 ae2:	81 95       	neg	r24
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	08 95       	ret

00000ae8 <__itoa_ncheck>:
 ae8:	bb 27       	eor	r27, r27
 aea:	4a 30       	cpi	r20, 0x0A	; 10
 aec:	31 f4       	brne	.+12     	; 0xafa <__itoa_ncheck+0x12>
 aee:	99 23       	and	r25, r25
 af0:	22 f4       	brpl	.+8      	; 0xafa <__itoa_ncheck+0x12>
 af2:	bd e2       	ldi	r27, 0x2D	; 45
 af4:	90 95       	com	r25
 af6:	81 95       	neg	r24
 af8:	9f 4f       	sbci	r25, 0xFF	; 255
 afa:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__utoa_common>

00000afe <__mulhi_const_10>:
 afe:	7a e0       	ldi	r23, 0x0A	; 10
 b00:	97 9f       	mul	r25, r23
 b02:	90 2d       	mov	r25, r0
 b04:	87 9f       	mul	r24, r23
 b06:	80 2d       	mov	r24, r0
 b08:	91 0d       	add	r25, r1
 b0a:	11 24       	eor	r1, r1
 b0c:	08 95       	ret

00000b0e <__utoa_ncheck>:
 b0e:	bb 27       	eor	r27, r27

00000b10 <__utoa_common>:
 b10:	fb 01       	movw	r30, r22
 b12:	55 27       	eor	r21, r21
 b14:	aa 27       	eor	r26, r26
 b16:	88 0f       	add	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	aa 1f       	adc	r26, r26
 b1c:	a4 17       	cp	r26, r20
 b1e:	10 f0       	brcs	.+4      	; 0xb24 <__utoa_common+0x14>
 b20:	a4 1b       	sub	r26, r20
 b22:	83 95       	inc	r24
 b24:	50 51       	subi	r21, 0x10	; 16
 b26:	b9 f7       	brne	.-18     	; 0xb16 <__utoa_common+0x6>
 b28:	a0 5d       	subi	r26, 0xD0	; 208
 b2a:	aa 33       	cpi	r26, 0x3A	; 58
 b2c:	08 f0       	brcs	.+2      	; 0xb30 <__utoa_common+0x20>
 b2e:	a9 5d       	subi	r26, 0xD9	; 217
 b30:	a1 93       	st	Z+, r26
 b32:	00 97       	sbiw	r24, 0x00	; 0
 b34:	79 f7       	brne	.-34     	; 0xb14 <__utoa_common+0x4>
 b36:	b1 11       	cpse	r27, r1
 b38:	b1 93       	st	Z+, r27
 b3a:	11 92       	st	Z+, r1
 b3c:	cb 01       	movw	r24, r22
 b3e:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <strrev>

00000b42 <strrev>:
 b42:	dc 01       	movw	r26, r24
 b44:	fc 01       	movw	r30, r24
 b46:	67 2f       	mov	r22, r23
 b48:	71 91       	ld	r23, Z+
 b4a:	77 23       	and	r23, r23
 b4c:	e1 f7       	brne	.-8      	; 0xb46 <strrev+0x4>
 b4e:	32 97       	sbiw	r30, 0x02	; 2
 b50:	04 c0       	rjmp	.+8      	; 0xb5a <strrev+0x18>
 b52:	7c 91       	ld	r23, X
 b54:	6d 93       	st	X+, r22
 b56:	70 83       	st	Z, r23
 b58:	62 91       	ld	r22, -Z
 b5a:	ae 17       	cp	r26, r30
 b5c:	bf 07       	cpc	r27, r31
 b5e:	c8 f3       	brcs	.-14     	; 0xb52 <strrev+0x10>
 b60:	08 95       	ret

00000b62 <__divmodsi4>:
 b62:	05 2e       	mov	r0, r21
 b64:	97 fb       	bst	r25, 7
 b66:	1e f4       	brtc	.+6      	; 0xb6e <__divmodsi4+0xc>
 b68:	00 94       	com	r0
 b6a:	0e 94 c8 05 	call	0xb90	; 0xb90 <__negsi2>
 b6e:	57 fd       	sbrc	r21, 7
 b70:	07 d0       	rcall	.+14     	; 0xb80 <__divmodsi4_neg2>
 b72:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__udivmodsi4>
 b76:	07 fc       	sbrc	r0, 7
 b78:	03 d0       	rcall	.+6      	; 0xb80 <__divmodsi4_neg2>
 b7a:	4e f4       	brtc	.+18     	; 0xb8e <__divmodsi4_exit>
 b7c:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__negsi2>

00000b80 <__divmodsi4_neg2>:
 b80:	50 95       	com	r21
 b82:	40 95       	com	r20
 b84:	30 95       	com	r19
 b86:	21 95       	neg	r18
 b88:	3f 4f       	sbci	r19, 0xFF	; 255
 b8a:	4f 4f       	sbci	r20, 0xFF	; 255
 b8c:	5f 4f       	sbci	r21, 0xFF	; 255

00000b8e <__divmodsi4_exit>:
 b8e:	08 95       	ret

00000b90 <__negsi2>:
 b90:	90 95       	com	r25
 b92:	80 95       	com	r24
 b94:	70 95       	com	r23
 b96:	61 95       	neg	r22
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	8f 4f       	sbci	r24, 0xFF	; 255
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255
 b9e:	08 95       	ret

00000ba0 <__muluhisi3>:
 ba0:	0e 94 05 06 	call	0xc0a	; 0xc0a <__umulhisi3>
 ba4:	a5 9f       	mul	r26, r21
 ba6:	90 0d       	add	r25, r0
 ba8:	b4 9f       	mul	r27, r20
 baa:	90 0d       	add	r25, r0
 bac:	a4 9f       	mul	r26, r20
 bae:	80 0d       	add	r24, r0
 bb0:	91 1d       	adc	r25, r1
 bb2:	11 24       	eor	r1, r1
 bb4:	08 95       	ret

00000bb6 <__mulshisi3>:
 bb6:	b7 ff       	sbrs	r27, 7
 bb8:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__muluhisi3>

00000bbc <__mulohisi3>:
 bbc:	0e 94 d0 05 	call	0xba0	; 0xba0 <__muluhisi3>
 bc0:	82 1b       	sub	r24, r18
 bc2:	93 0b       	sbc	r25, r19
 bc4:	08 95       	ret

00000bc6 <__udivmodsi4>:
 bc6:	a1 e2       	ldi	r26, 0x21	; 33
 bc8:	1a 2e       	mov	r1, r26
 bca:	aa 1b       	sub	r26, r26
 bcc:	bb 1b       	sub	r27, r27
 bce:	fd 01       	movw	r30, r26
 bd0:	0d c0       	rjmp	.+26     	; 0xbec <__udivmodsi4_ep>

00000bd2 <__udivmodsi4_loop>:
 bd2:	aa 1f       	adc	r26, r26
 bd4:	bb 1f       	adc	r27, r27
 bd6:	ee 1f       	adc	r30, r30
 bd8:	ff 1f       	adc	r31, r31
 bda:	a2 17       	cp	r26, r18
 bdc:	b3 07       	cpc	r27, r19
 bde:	e4 07       	cpc	r30, r20
 be0:	f5 07       	cpc	r31, r21
 be2:	20 f0       	brcs	.+8      	; 0xbec <__udivmodsi4_ep>
 be4:	a2 1b       	sub	r26, r18
 be6:	b3 0b       	sbc	r27, r19
 be8:	e4 0b       	sbc	r30, r20
 bea:	f5 0b       	sbc	r31, r21

00000bec <__udivmodsi4_ep>:
 bec:	66 1f       	adc	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	99 1f       	adc	r25, r25
 bf4:	1a 94       	dec	r1
 bf6:	69 f7       	brne	.-38     	; 0xbd2 <__udivmodsi4_loop>
 bf8:	60 95       	com	r22
 bfa:	70 95       	com	r23
 bfc:	80 95       	com	r24
 bfe:	90 95       	com	r25
 c00:	9b 01       	movw	r18, r22
 c02:	ac 01       	movw	r20, r24
 c04:	bd 01       	movw	r22, r26
 c06:	cf 01       	movw	r24, r30
 c08:	08 95       	ret

00000c0a <__umulhisi3>:
 c0a:	a2 9f       	mul	r26, r18
 c0c:	b0 01       	movw	r22, r0
 c0e:	b3 9f       	mul	r27, r19
 c10:	c0 01       	movw	r24, r0
 c12:	a3 9f       	mul	r26, r19
 c14:	70 0d       	add	r23, r0
 c16:	81 1d       	adc	r24, r1
 c18:	11 24       	eor	r1, r1
 c1a:	91 1d       	adc	r25, r1
 c1c:	b2 9f       	mul	r27, r18
 c1e:	70 0d       	add	r23, r0
 c20:	81 1d       	adc	r24, r1
 c22:	11 24       	eor	r1, r1
 c24:	91 1d       	adc	r25, r1
 c26:	08 95       	ret

00000c28 <_exit>:
 c28:	f8 94       	cli

00000c2a <__stop_program>:
 c2a:	ff cf       	rjmp	.-2      	; 0xc2a <__stop_program>
