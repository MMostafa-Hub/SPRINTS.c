
Task3_GuessingGameV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000c60  00000cf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000c4  008000c4  00000d58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001270  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000727  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089e  00000000  00000000  00002823  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000030c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000619  00000000  00000000  0000379f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3c       	cpi	r26, 0xC5	; 197
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 84 02 	call	0x508	; 0x508 <main>
  8a:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:
}

uint8_t button_pressed(vuint8_t* PIN_, uint8_t bitNumber)
{
	return DIO_read(PIN_,bitNumber);
}
  92:	41 11       	cpse	r20, r1
  94:	0d c0       	rjmp	.+26     	; 0xb0 <DIO_init+0x1e>
  96:	fb 01       	movw	r30, r22
  98:	30 81       	ld	r19, Z
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_init+0x12>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	2a 95       	dec	r18
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_init+0xe>
  a8:	80 95       	com	r24
  aa:	83 23       	and	r24, r19
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret
  b0:	fb 01       	movw	r30, r22
  b2:	30 81       	ld	r19, Z
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_init+0x2c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	2a 95       	dec	r18
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_init+0x28>
  c2:	83 2b       	or	r24, r19
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <timer_delay>:
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	09 f4       	brne	.+2      	; 0xd6 <timer_delay+0xe>
  d4:	40 c0       	rjmp	.+128    	; 0x156 <timer_delay+0x8e>
  d6:	8c 01       	movw	r16, r24
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	83 bf       	out	0x33, r24	; 51
  dc:	b8 01       	movw	r22, r16
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 06 04 	call	0x80c	; 0x80c <__floatunsisf>
  e6:	2c e5       	ldi	r18, 0x5C	; 92
  e8:	3f e8       	ldi	r19, 0x8F	; 143
  ea:	42 e8       	ldi	r20, 0x82	; 130
  ec:	53 e4       	ldi	r21, 0x43	; 67
  ee:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__divsf3>
  f2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fixsfsi>
  f6:	eb 01       	movw	r28, r22
  f8:	c8 01       	movw	r24, r16
  fa:	65 e0       	ldi	r22, 0x05	; 5
  fc:	71 e0       	ldi	r23, 0x01	; 1
  fe:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__udivmodhi4>
 102:	bc 01       	movw	r22, r24
 104:	99 0f       	add	r25, r25
 106:	88 0b       	sbc	r24, r24
 108:	99 0b       	sbc	r25, r25
 10a:	0e 94 08 04 	call	0x810	; 0x810 <__floatsisf>
 10e:	9b 01       	movw	r18, r22
 110:	ac 01       	movw	r20, r24
 112:	6c e5       	ldi	r22, 0x5C	; 92
 114:	7f e8       	ldi	r23, 0x8F	; 143
 116:	82 e8       	ldi	r24, 0x82	; 130
 118:	93 e4       	ldi	r25, 0x43	; 67
 11a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__subsf3>
 11e:	2f e6       	ldi	r18, 0x6F	; 111
 120:	32 e1       	ldi	r19, 0x12	; 18
 122:	43 e8       	ldi	r20, 0x83	; 131
 124:	5f e3       	ldi	r21, 0x3F	; 63
 126:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__divsf3>
 12a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fixsfsi>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	07 c0       	rjmp	.+14     	; 0x142 <timer_delay+0x7a>
 134:	12 be       	out	0x32, r1	; 50
 136:	08 b6       	in	r0, 0x38	; 56
 138:	00 fe       	sbrs	r0, 0
 13a:	fd cf       	rjmp	.-6      	; 0x136 <timer_delay+0x6e>
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	28 bf       	out	0x38, r18	; 56
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	8c 17       	cp	r24, r28
 144:	9d 07       	cpc	r25, r29
 146:	b4 f3       	brlt	.-20     	; 0x134 <timer_delay+0x6c>
 148:	62 bf       	out	0x32, r22	; 50
 14a:	08 b6       	in	r0, 0x38	; 56
 14c:	00 fe       	sbrs	r0, 0
 14e:	fd cf       	rjmp	.-6      	; 0x14a <timer_delay+0x82>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	88 bf       	out	0x38, r24	; 56
 154:	13 be       	out	0x33, r1	; 51
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <__vector_9>:
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
 172:	f8 94       	cli
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <timer_init_interr>:
 180:	bc 01       	movw	r22, r24
 182:	99 0f       	add	r25, r25
 184:	88 0b       	sbc	r24, r24
 186:	99 0b       	sbc	r25, r25
 188:	0e 94 08 04 	call	0x810	; 0x810 <__floatsisf>
 18c:	2f e6       	ldi	r18, 0x6F	; 111
 18e:	32 e1       	ldi	r19, 0x12	; 18
 190:	43 e8       	ldi	r20, 0x83	; 131
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__divsf3>
 198:	9b 01       	movw	r18, r22
 19a:	ac 01       	movw	r20, r24
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	7f ef       	ldi	r23, 0xFF	; 255
 1a0:	8f e7       	ldi	r24, 0x7F	; 127
 1a2:	97 e4       	ldi	r25, 0x47	; 71
 1a4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__subsf3>
 1a8:	0e 94 43 04 	call	0x886	; 0x886 <floor>
 1ac:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fixunssfsi>
 1b0:	7d bd       	out	0x2d, r23	; 45
 1b2:	6c bd       	out	0x2c, r22	; 44
 1b4:	1f bc       	out	0x2f, r1	; 47
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	8e bd       	out	0x2e, r24	; 46
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	89 bf       	out	0x39, r24	; 57
 1be:	78 94       	sei
 1c0:	08 95       	ret

000001c2 <lcd_cmd>:
 1c2:	95 b3       	in	r25, 0x15	; 21
 1c4:	9e 7f       	andi	r25, 0xFE	; 254
 1c6:	95 bb       	out	0x15, r25	; 21
 1c8:	82 bb       	out	0x12, r24	; 18
 1ca:	85 b3       	in	r24, 0x15	; 21
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	85 bb       	out	0x15, r24	; 21
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
 1d8:	85 b3       	in	r24, 0x15	; 21
 1da:	8b 7f       	andi	r24, 0xFB	; 251
 1dc:	85 bb       	out	0x15, r24	; 21
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
 1e6:	08 95       	ret

000001e8 <Lcd_Set_Cursor>:
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	39 f4       	brne	.+14     	; 0x1fa <Lcd_Set_Cursor+0x12>
 1ec:	86 2f       	mov	r24, r22
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	80 58       	subi	r24, 0x80	; 128
 1f2:	9f 4f       	sbci	r25, 0xFF	; 255
 1f4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
 1f8:	08 95       	ret
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	31 f4       	brne	.+12     	; 0x20a <Lcd_Set_Cursor+0x22>
 1fe:	86 2f       	mov	r24, r22
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	80 54       	subi	r24, 0x40	; 64
 204:	9f 4f       	sbci	r25, 0xFF	; 255
 206:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
 20a:	08 95       	ret

0000020c <lcd_write_char>:
 20c:	95 b3       	in	r25, 0x15	; 21
 20e:	91 60       	ori	r25, 0x01	; 1
 210:	95 bb       	out	0x15, r25	; 21
 212:	82 bb       	out	0x12, r24	; 18
 214:	85 b3       	in	r24, 0x15	; 21
 216:	84 60       	ori	r24, 0x04	; 4
 218:	85 bb       	out	0x15, r24	; 21
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
 222:	85 b3       	in	r24, 0x15	; 21
 224:	8b 7f       	andi	r24, 0xFB	; 251
 226:	85 bb       	out	0x15, r24	; 21
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
 230:	08 95       	ret

00000232 <lcd_write_string>:
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	8c 01       	movw	r16, r24
 23c:	c0 e0       	ldi	r28, 0x00	; 0
 23e:	d0 e0       	ldi	r29, 0x00	; 0
 240:	04 c0       	rjmp	.+8      	; 0x24a <lcd_write_string+0x18>
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_write_char>
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	f8 01       	movw	r30, r16
 24c:	ec 0f       	add	r30, r28
 24e:	fd 1f       	adc	r31, r29
 250:	80 81       	ld	r24, Z
 252:	81 11       	cpse	r24, r1
 254:	f6 cf       	rjmp	.-20     	; 0x242 <lcd_write_string+0x10>
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	08 95       	ret

00000260 <lcd_init>:
 260:	80 ef       	ldi	r24, 0xF0	; 240
 262:	84 bb       	out	0x14, r24	; 20
 264:	87 e0       	ldi	r24, 0x07	; 7
 266:	84 bb       	out	0x14, r24	; 20
 268:	85 b3       	in	r24, 0x15	; 21
 26a:	8e 7f       	andi	r24, 0xFE	; 254
 26c:	85 bb       	out	0x15, r24	; 21
 26e:	85 b3       	in	r24, 0x15	; 21
 270:	8d 7f       	andi	r24, 0xFD	; 253
 272:	85 bb       	out	0x15, r24	; 21
 274:	85 b3       	in	r24, 0x15	; 21
 276:	8b 7f       	andi	r24, 0xFB	; 251
 278:	85 bb       	out	0x15, r24	; 21
 27a:	88 e3       	ldi	r24, 0x38	; 56
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
 29a:	08 95       	ret

0000029c <button_init>:
 29c:	24 2f       	mov	r18, r20
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
 2a4:	08 95       	ret

000002a6 <keypad>:



u8 keypad(void)
{
	PORTA = 0x10;
 2a6:	80 e1       	ldi	r24, 0x10	; 16
 2a8:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PORTA0))) { return '7';}
 2aa:	c8 99       	sbic	0x19, 0	; 25
 2ac:	36 c0       	rjmp	.+108    	; 0x31a <keypad+0x74>
	else if((PINA & (1<<PORTA1))) { return '8';}
 2ae:	c9 99       	sbic	0x19, 1	; 25
 2b0:	36 c0       	rjmp	.+108    	; 0x31e <keypad+0x78>
	else if((PINA & (1<<PORTA2))) { return '9';}
 2b2:	ca 99       	sbic	0x19, 2	; 25
 2b4:	36 c0       	rjmp	.+108    	; 0x322 <keypad+0x7c>
	else if((PINA & (1<<PORTA3))) { return invalid;}
 2b6:	cb 99       	sbic	0x19, 3	; 25
 2b8:	36 c0       	rjmp	.+108    	; 0x326 <keypad+0x80>
	
	timer_delay(1);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
	PORTA = 0x20;
 2c2:	80 e2       	ldi	r24, 0x20	; 32
 2c4:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PORTA0))){ return '4';}
 2c6:	c8 99       	sbic	0x19, 0	; 25
 2c8:	30 c0       	rjmp	.+96     	; 0x32a <keypad+0x84>
	else if((PINA & (1<<PORTA1))) { return '5';}
 2ca:	c9 99       	sbic	0x19, 1	; 25
 2cc:	30 c0       	rjmp	.+96     	; 0x32e <keypad+0x88>
	else if((PINA & (1<<PORTA2))) { return '6';}
 2ce:	ca 99       	sbic	0x19, 2	; 25
 2d0:	30 c0       	rjmp	.+96     	; 0x332 <keypad+0x8c>
	else if((PINA & (1<<PORTA3))) { return invalid;}
 2d2:	cb 99       	sbic	0x19, 3	; 25
 2d4:	30 c0       	rjmp	.+96     	; 0x336 <keypad+0x90>
	
	timer_delay(1);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
	PORTA = 0x40;
 2de:	80 e4       	ldi	r24, 0x40	; 64
 2e0:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PORTA0))) { return '1';}
 2e2:	c8 99       	sbic	0x19, 0	; 25
 2e4:	2a c0       	rjmp	.+84     	; 0x33a <keypad+0x94>
	else if((PINA & (1<<PORTA1))) { return '2';}
 2e6:	c9 99       	sbic	0x19, 1	; 25
 2e8:	2a c0       	rjmp	.+84     	; 0x33e <keypad+0x98>
	else if((PINA & (1<<PORTA2))) { return '3';}
 2ea:	ca 99       	sbic	0x19, 2	; 25
 2ec:	2a c0       	rjmp	.+84     	; 0x342 <keypad+0x9c>
	else if((PINA & (1<<PORTA3))) { return invalid;}
 2ee:	cb 99       	sbic	0x19, 3	; 25
 2f0:	2a c0       	rjmp	.+84     	; 0x346 <keypad+0xa0>
	timer_delay(1);
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>

	PORTA = 0x80;
 2fa:	80 e8       	ldi	r24, 0x80	; 128
 2fc:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PORTA0))) { return invalid;}
 2fe:	c8 99       	sbic	0x19, 0	; 25
 300:	24 c0       	rjmp	.+72     	; 0x34a <keypad+0xa4>
	else if((PINA & (1<<PORTA1))) { return '0';}
 302:	c9 99       	sbic	0x19, 1	; 25
 304:	24 c0       	rjmp	.+72     	; 0x34e <keypad+0xa8>
	else if((PINA & (1<<PORTA2))) { return '=';}
 306:	ca 99       	sbic	0x19, 2	; 25
 308:	24 c0       	rjmp	.+72     	; 0x352 <keypad+0xac>
	else if((PINA & (1<<PORTA3))) { return invalid;}
 30a:	cb 99       	sbic	0x19, 3	; 25
 30c:	24 c0       	rjmp	.+72     	; 0x356 <keypad+0xb0>
	timer_delay(1);
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
	
	return none;
 316:	8e e6       	ldi	r24, 0x6E	; 110
 318:	08 95       	ret


u8 keypad(void)
{
	PORTA = 0x10;
	if((PINA & (1<<PORTA0))) { return '7';}
 31a:	87 e3       	ldi	r24, 0x37	; 55
 31c:	08 95       	ret
	else if((PINA & (1<<PORTA1))) { return '8';}
 31e:	88 e3       	ldi	r24, 0x38	; 56
 320:	08 95       	ret
	else if((PINA & (1<<PORTA2))) { return '9';}
 322:	89 e3       	ldi	r24, 0x39	; 57
 324:	08 95       	ret
	else if((PINA & (1<<PORTA3))) { return invalid;}
 326:	89 e6       	ldi	r24, 0x69	; 105
 328:	08 95       	ret
	
	timer_delay(1);
	PORTA = 0x20;
	if((PINA & (1<<PORTA0))){ return '4';}
 32a:	84 e3       	ldi	r24, 0x34	; 52
 32c:	08 95       	ret
	else if((PINA & (1<<PORTA1))) { return '5';}
 32e:	85 e3       	ldi	r24, 0x35	; 53
 330:	08 95       	ret
	else if((PINA & (1<<PORTA2))) { return '6';}
 332:	86 e3       	ldi	r24, 0x36	; 54
 334:	08 95       	ret
	else if((PINA & (1<<PORTA3))) { return invalid;}
 336:	89 e6       	ldi	r24, 0x69	; 105
 338:	08 95       	ret
	
	timer_delay(1);
	PORTA = 0x40;
	if((PINA & (1<<PORTA0))) { return '1';}
 33a:	81 e3       	ldi	r24, 0x31	; 49
 33c:	08 95       	ret
	else if((PINA & (1<<PORTA1))) { return '2';}
 33e:	82 e3       	ldi	r24, 0x32	; 50
 340:	08 95       	ret
	else if((PINA & (1<<PORTA2))) { return '3';}
 342:	83 e3       	ldi	r24, 0x33	; 51
 344:	08 95       	ret
	else if((PINA & (1<<PORTA3))) { return invalid;}
 346:	89 e6       	ldi	r24, 0x69	; 105
 348:	08 95       	ret
	timer_delay(1);

	PORTA = 0x80;
	if((PINA & (1<<PORTA0))) { return invalid;}
 34a:	89 e6       	ldi	r24, 0x69	; 105
 34c:	08 95       	ret
	else if((PINA & (1<<PORTA1))) { return '0';}
 34e:	80 e3       	ldi	r24, 0x30	; 48
 350:	08 95       	ret
	else if((PINA & (1<<PORTA2))) { return '=';}
 352:	8d e3       	ldi	r24, 0x3D	; 61
 354:	08 95       	ret
	else if((PINA & (1<<PORTA3))) { return invalid;}
 356:	89 e6       	ldi	r24, 0x69	; 105
	timer_delay(1);
	
	return none;
}
 358:	08 95       	ret

0000035a <app_init>:
#include "DIO_Driver/dio.h"
#include "KeyPad_Driver/keypad.h"
#include "Timer_Driver/timer.h"
void app_init(void)
{
	lcd_init();
 35a:	0e 94 30 01 	call	0x260	; 0x260 <lcd_init>
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,4);
 35e:	24 e0       	ldi	r18, 0x04	; 4
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	6a e3       	ldi	r22, 0x3A	; 58
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	8b e3       	ldi	r24, 0x3B	; 59
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,5);
 36e:	25 e0       	ldi	r18, 0x05	; 5
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	6a e3       	ldi	r22, 0x3A	; 58
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	8b e3       	ldi	r24, 0x3B	; 59
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,6);
 37e:	26 e0       	ldi	r18, 0x06	; 6
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	6a e3       	ldi	r22, 0x3A	; 58
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	8b e3       	ldi	r24, 0x3B	; 59
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,7);
 38e:	27 e0       	ldi	r18, 0x07	; 7
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	6a e3       	ldi	r22, 0x3A	; 58
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	8b e3       	ldi	r24, 0x3B	; 59
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
	
	button_init(&PORTA_Data,&PORTA_Dir,0);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	6a e3       	ldi	r22, 0x3A	; 58
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	8b e3       	ldi	r24, 0x3B	; 59
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 4e 01 	call	0x29c	; 0x29c <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,1);
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	6a e3       	ldi	r22, 0x3A	; 58
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	8b e3       	ldi	r24, 0x3B	; 59
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 4e 01 	call	0x29c	; 0x29c <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,2);
 3ba:	42 e0       	ldi	r20, 0x02	; 2
 3bc:	6a e3       	ldi	r22, 0x3A	; 58
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	8b e3       	ldi	r24, 0x3B	; 59
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 4e 01 	call	0x29c	; 0x29c <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,3);
 3c8:	43 e0       	ldi	r20, 0x03	; 3
 3ca:	6a e3       	ldi	r22, 0x3A	; 58
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	8b e3       	ldi	r24, 0x3B	; 59
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 4e 01 	call	0x29c	; 0x29c <button_init>
 3d6:	08 95       	ret

000003d8 <render_main_screen>:

}

void render_main_screen(void)
{
	Lcd_Set_Cursor(1,0);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Lcd_Set_Cursor>
	lcd_write_string("Please Guess");
 3e0:	84 e6       	ldi	r24, 0x64	; 100
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Lcd_Set_Cursor>
	lcd_write_string("an Integer:");
 3f0:	81 e7       	ldi	r24, 0x71	; 113
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
 3f8:	08 95       	ret

000003fa <render_win_screen>:
}
void render_win_screen(char* number)
{
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
	Lcd_Set_Cursor(1,4);
 408:	64 e0       	ldi	r22, 0x04	; 4
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Lcd_Set_Cursor>
	lcd_write_string("YOU WON");
 410:	8d e7       	ldi	r24, 0x7D	; 125
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 420:	85 e8       	ldi	r24, 0x85	; 133
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
	lcd_write_string(number);
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
	timer_delay(2000);
 42e:	80 ed       	ldi	r24, 0xD0	; 208
 430:	97 e0       	ldi	r25, 0x07	; 7
 432:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
	lcd_cmd(0x01);
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <render_loss_screen>:
void render_loss_screen(char* number)
{
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
	Lcd_Set_Cursor(1,4);
 452:	64 e0       	ldi	r22, 0x04	; 4
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Lcd_Set_Cursor>
	lcd_write_string("YOU LOST");
 45a:	8e e8       	ldi	r24, 0x8E	; 142
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 46a:	85 e8       	ldi	r24, 0x85	; 133
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
	lcd_write_string(number);
 472:	ce 01       	movw	r24, r28
 474:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
	timer_delay(2000);
 478:	80 ed       	ldi	r24, 0xD0	; 208
 47a:	97 e0       	ldi	r25, 0x07	; 7
 47c:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
	lcd_cmd(0x01);
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
}
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <render_range_invalid_screen>:
void render_range_invalid_screen(void)
{
	lcd_cmd(0x01);
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
	Lcd_Set_Cursor(1,0);
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Lcd_Set_Cursor>
	lcd_write_string("The Valid Range");
 49e:	87 e9       	ldi	r24, 0x97	; 151
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Lcd_Set_Cursor>
	lcd_write_string("from 1 -> 15:");
 4ae:	87 ea       	ldi	r24, 0xA7	; 167
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
	timer_delay(2000);
 4b6:	80 ed       	ldi	r24, 0xD0	; 208
 4b8:	97 e0       	ldi	r25, 0x07	; 7
 4ba:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
	lcd_cmd(0x01);
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
 4c6:	08 95       	ret

000004c8 <render_invalid_input_screen>:
}
void render_invalid_input_screen(void)
{
	lcd_cmd(0x01);
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
	Lcd_Set_Cursor(1,0);
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Lcd_Set_Cursor>
	lcd_write_string("Invalid Input");
 4d8:	85 eb       	ldi	r24, 0xB5	; 181
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
	timer_delay(2000);
 4e0:	80 ed       	ldi	r24, 0xD0	; 208
 4e2:	97 e0       	ldi	r25, 0x07	; 7
 4e4:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
	lcd_cmd(0x01);
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_cmd>
 4f0:	08 95       	ret

000004f2 <rand_int>:
}
uint8_t rand_int(uint8_t seed)
{
	srand(seed);
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 65 05 	call	0xaca	; 0xaca <srand>
	return (rand()%14+1); // random number between 1 and 15 inclusive
 4f8:	0e 94 60 05 	call	0xac0	; 0xac0 <rand>
 4fc:	6e e0       	ldi	r22, 0x0E	; 14
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
}
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	08 95       	ret

00000508 <main>:
#include "app.h"

uint8_t gu8_timeIsOverFlag = 0; // 1 if the user finished his input 0 other wise

int main(void)
{
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	27 97       	sbiw	r28, 0x07	; 7
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
	app_init();
 51c:	0e 94 ad 01 	call	0x35a	; 0x35a <app_init>
	uint8_t input = 0; // the integer value the user's input
	uint8_t i = 0; // iterator of the sInput
	uint8_t seed = 0; // the seed of the random number generator
	char sinput[5];  // the string value of the user's input
	memset(sinput,'\0', 5);
 520:	fe 01       	movw	r30, r28
 522:	31 96       	adiw	r30, 0x01	; 1
 524:	85 e0       	ldi	r24, 0x05	; 5
 526:	df 01       	movw	r26, r30
 528:	1d 92       	st	X+, r1
 52a:	8a 95       	dec	r24
 52c:	e9 f7       	brne	.-6      	; 0x528 <main+0x20>
int main(void)
{
	app_init();
	uint8_t input = 0; // the integer value the user's input
	uint8_t i = 0; // iterator of the sInput
	uint8_t seed = 0; // the seed of the random number generator
 52e:	10 e0       	ldi	r17, 0x00	; 0

int main(void)
{
	app_init();
	uint8_t input = 0; // the integer value the user's input
	uint8_t i = 0; // iterator of the sInput
 530:	f1 2c       	mov	r15, r1
	memset(sinput,'\0', 5);
	
	while(1)
	{
		
		if(!gu8_timeIsOverFlag) // if the user didn't finish his input
 532:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 536:	81 11       	cpse	r24, r1
 538:	23 c0       	rjmp	.+70     	; 0x580 <main+0x78>
		{
			int8_t key = keypad(); // get the keypad status
 53a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <keypad>
 53e:	08 2f       	mov	r16, r24
			render_main_screen();
 540:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <render_main_screen>
			if(key == invalid) // if the key pressed was invalid
 544:	09 36       	cpi	r16, 0x69	; 105
 546:	19 f4       	brne	.+6      	; 0x54e <main+0x46>
			{
				render_invalid_input_screen();
 548:	0e 94 64 02 	call	0x4c8	; 0x4c8 <render_invalid_input_screen>
 54c:	48 c0       	rjmp	.+144    	; 0x5de <main+0xd6>
			}
			else if(key != none) // if the user did press any key
 54e:	be e6       	ldi	r27, 0x6E	; 110
 550:	0b 17       	cp	r16, r27
 552:	09 f4       	brne	.+2      	; 0x556 <main+0x4e>
 554:	44 c0       	rjmp	.+136    	; 0x5de <main+0xd6>
			{
				sinput[i] = key; // push the key into sinput 
 556:	e1 e0       	ldi	r30, 0x01	; 1
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	ec 0f       	add	r30, r28
 55c:	fd 1f       	adc	r31, r29
 55e:	ef 0d       	add	r30, r15
 560:	f1 1d       	adc	r31, r1
 562:	00 83       	st	Z, r16
				lcd_write_string(sinput); 
 564:	ce 01       	movw	r24, r28
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string>
				timer_delay(200); // delay to prevent long presses
 56c:	88 ec       	ldi	r24, 0xC8	; 200
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
				i++; 
 574:	f3 94       	inc	r15
				
				// start a 1 sec timer if the user didn't press any other key
				// the program will consider the user finished his input
				timer_init_interr(1000); 
 576:	88 ee       	ldi	r24, 0xE8	; 232
 578:	93 e0       	ldi	r25, 0x03	; 3
 57a:	0e 94 c0 00 	call	0x180	; 0x180 <timer_init_interr>
 57e:	2f c0       	rjmp	.+94     	; 0x5de <main+0xd6>
			
		}
		else
		{
			
			uint8_t randNumber = rand_int(seed); // generate a random number from 1 to 15
 580:	81 2f       	mov	r24, r17
 582:	0e 94 79 02 	call	0x4f2	; 0x4f2 <rand_int>
 586:	08 2f       	mov	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 588:	4a e0       	ldi	r20, 0x0A	; 10
 58a:	be 01       	movw	r22, r28
 58c:	6a 5f       	subi	r22, 0xFA	; 250
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__itoa_ncheck>
			char sRandNumber[2] ;
			itoa(randNumber,sRandNumber,10); // converting the number into string
			
			input = atoi(sinput); // converting the input from the user from string into integer
 596:	ce 01       	movw	r24, r28
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	0e 94 70 05 	call	0xae0	; 0xae0 <atoi>
			if(input > 15 || input == 0) // if input us not in the valid range
 59e:	9f ef       	ldi	r25, 0xFF	; 255
 5a0:	98 0f       	add	r25, r24
 5a2:	9f 30       	cpi	r25, 0x0F	; 15
 5a4:	18 f0       	brcs	.+6      	; 0x5ac <main+0xa4>
			{
				render_range_invalid_screen();
 5a6:	0e 94 47 02 	call	0x48e	; 0x48e <render_range_invalid_screen>
 5aa:	0b c0       	rjmp	.+22     	; 0x5c2 <main+0xba>
			}
			else if(input == randNumber) // if the input the same as the random number 
 5ac:	08 13       	cpse	r16, r24
 5ae:	05 c0       	rjmp	.+10     	; 0x5ba <main+0xb2>
			{
				render_win_screen(sRandNumber);
 5b0:	ce 01       	movw	r24, r28
 5b2:	06 96       	adiw	r24, 0x06	; 6
 5b4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <render_win_screen>
 5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <main+0xba>
			}
			else // if the input was NOT equal to the random number
			{
				render_loss_screen(sRandNumber);
 5ba:	ce 01       	movw	r24, r28
 5bc:	06 96       	adiw	r24, 0x06	; 6
 5be:	0e 94 22 02 	call	0x444	; 0x444 <render_loss_screen>
			}
			
			timer_delay(500); 
 5c2:	84 ef       	ldi	r24, 0xF4	; 244
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	0e 94 64 00 	call	0xc8	; 0xc8 <timer_delay>
			// clearing the variables and repeating the game
			gu8_timeIsOverFlag = 0; 
 5ca:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__data_end>
			memset(sinput,'\0', 5);
 5ce:	fe 01       	movw	r30, r28
 5d0:	31 96       	adiw	r30, 0x01	; 1
 5d2:	85 e0       	ldi	r24, 0x05	; 5
 5d4:	df 01       	movw	r26, r30
 5d6:	1d 92       	st	X+, r1
 5d8:	8a 95       	dec	r24
 5da:	e9 f7       	brne	.-6      	; 0x5d6 <main+0xce>
			i = 0; 
 5dc:	f1 2c       	mov	r15, r1

		}
		seed++; 
 5de:	1f 5f       	subi	r17, 0xFF	; 255
	}
 5e0:	a8 cf       	rjmp	.-176    	; 0x532 <main+0x2a>

000005e2 <__subsf3>:
 5e2:	50 58       	subi	r21, 0x80	; 128

000005e4 <__addsf3>:
 5e4:	bb 27       	eor	r27, r27
 5e6:	aa 27       	eor	r26, r26
 5e8:	0e 94 09 03 	call	0x612	; 0x612 <__addsf3x>
 5ec:	0c 94 9a 04 	jmp	0x934	; 0x934 <__fp_round>
 5f0:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_pscA>
 5f4:	38 f0       	brcs	.+14     	; 0x604 <__addsf3+0x20>
 5f6:	0e 94 93 04 	call	0x926	; 0x926 <__fp_pscB>
 5fa:	20 f0       	brcs	.+8      	; 0x604 <__addsf3+0x20>
 5fc:	39 f4       	brne	.+14     	; 0x60c <__addsf3+0x28>
 5fe:	9f 3f       	cpi	r25, 0xFF	; 255
 600:	19 f4       	brne	.+6      	; 0x608 <__addsf3+0x24>
 602:	26 f4       	brtc	.+8      	; 0x60c <__addsf3+0x28>
 604:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_nan>
 608:	0e f4       	brtc	.+2      	; 0x60c <__addsf3+0x28>
 60a:	e0 95       	com	r30
 60c:	e7 fb       	bst	r30, 7
 60e:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_inf>

00000612 <__addsf3x>:
 612:	e9 2f       	mov	r30, r25
 614:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_split3>
 618:	58 f3       	brcs	.-42     	; 0x5f0 <__addsf3+0xc>
 61a:	ba 17       	cp	r27, r26
 61c:	62 07       	cpc	r22, r18
 61e:	73 07       	cpc	r23, r19
 620:	84 07       	cpc	r24, r20
 622:	95 07       	cpc	r25, r21
 624:	20 f0       	brcs	.+8      	; 0x62e <__addsf3x+0x1c>
 626:	79 f4       	brne	.+30     	; 0x646 <__addsf3x+0x34>
 628:	a6 f5       	brtc	.+104    	; 0x692 <__addsf3x+0x80>
 62a:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_zero>
 62e:	0e f4       	brtc	.+2      	; 0x632 <__addsf3x+0x20>
 630:	e0 95       	com	r30
 632:	0b 2e       	mov	r0, r27
 634:	ba 2f       	mov	r27, r26
 636:	a0 2d       	mov	r26, r0
 638:	0b 01       	movw	r0, r22
 63a:	b9 01       	movw	r22, r18
 63c:	90 01       	movw	r18, r0
 63e:	0c 01       	movw	r0, r24
 640:	ca 01       	movw	r24, r20
 642:	a0 01       	movw	r20, r0
 644:	11 24       	eor	r1, r1
 646:	ff 27       	eor	r31, r31
 648:	59 1b       	sub	r21, r25
 64a:	99 f0       	breq	.+38     	; 0x672 <__addsf3x+0x60>
 64c:	59 3f       	cpi	r21, 0xF9	; 249
 64e:	50 f4       	brcc	.+20     	; 0x664 <__addsf3x+0x52>
 650:	50 3e       	cpi	r21, 0xE0	; 224
 652:	68 f1       	brcs	.+90     	; 0x6ae <__addsf3x+0x9c>
 654:	1a 16       	cp	r1, r26
 656:	f0 40       	sbci	r31, 0x00	; 0
 658:	a2 2f       	mov	r26, r18
 65a:	23 2f       	mov	r18, r19
 65c:	34 2f       	mov	r19, r20
 65e:	44 27       	eor	r20, r20
 660:	58 5f       	subi	r21, 0xF8	; 248
 662:	f3 cf       	rjmp	.-26     	; 0x64a <__addsf3x+0x38>
 664:	46 95       	lsr	r20
 666:	37 95       	ror	r19
 668:	27 95       	ror	r18
 66a:	a7 95       	ror	r26
 66c:	f0 40       	sbci	r31, 0x00	; 0
 66e:	53 95       	inc	r21
 670:	c9 f7       	brne	.-14     	; 0x664 <__addsf3x+0x52>
 672:	7e f4       	brtc	.+30     	; 0x692 <__addsf3x+0x80>
 674:	1f 16       	cp	r1, r31
 676:	ba 0b       	sbc	r27, r26
 678:	62 0b       	sbc	r22, r18
 67a:	73 0b       	sbc	r23, r19
 67c:	84 0b       	sbc	r24, r20
 67e:	ba f0       	brmi	.+46     	; 0x6ae <__addsf3x+0x9c>
 680:	91 50       	subi	r25, 0x01	; 1
 682:	a1 f0       	breq	.+40     	; 0x6ac <__addsf3x+0x9a>
 684:	ff 0f       	add	r31, r31
 686:	bb 1f       	adc	r27, r27
 688:	66 1f       	adc	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	c2 f7       	brpl	.-16     	; 0x680 <__addsf3x+0x6e>
 690:	0e c0       	rjmp	.+28     	; 0x6ae <__addsf3x+0x9c>
 692:	ba 0f       	add	r27, r26
 694:	62 1f       	adc	r22, r18
 696:	73 1f       	adc	r23, r19
 698:	84 1f       	adc	r24, r20
 69a:	48 f4       	brcc	.+18     	; 0x6ae <__addsf3x+0x9c>
 69c:	87 95       	ror	r24
 69e:	77 95       	ror	r23
 6a0:	67 95       	ror	r22
 6a2:	b7 95       	ror	r27
 6a4:	f7 95       	ror	r31
 6a6:	9e 3f       	cpi	r25, 0xFE	; 254
 6a8:	08 f0       	brcs	.+2      	; 0x6ac <__addsf3x+0x9a>
 6aa:	b0 cf       	rjmp	.-160    	; 0x60c <__addsf3+0x28>
 6ac:	93 95       	inc	r25
 6ae:	88 0f       	add	r24, r24
 6b0:	08 f0       	brcs	.+2      	; 0x6b4 <__addsf3x+0xa2>
 6b2:	99 27       	eor	r25, r25
 6b4:	ee 0f       	add	r30, r30
 6b6:	97 95       	ror	r25
 6b8:	87 95       	ror	r24
 6ba:	08 95       	ret

000006bc <__divsf3>:
 6bc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__divsf3x>
 6c0:	0c 94 9a 04 	jmp	0x934	; 0x934 <__fp_round>
 6c4:	0e 94 93 04 	call	0x926	; 0x926 <__fp_pscB>
 6c8:	58 f0       	brcs	.+22     	; 0x6e0 <__divsf3+0x24>
 6ca:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_pscA>
 6ce:	40 f0       	brcs	.+16     	; 0x6e0 <__divsf3+0x24>
 6d0:	29 f4       	brne	.+10     	; 0x6dc <__divsf3+0x20>
 6d2:	5f 3f       	cpi	r21, 0xFF	; 255
 6d4:	29 f0       	breq	.+10     	; 0x6e0 <__divsf3+0x24>
 6d6:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_inf>
 6da:	51 11       	cpse	r21, r1
 6dc:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>
 6e0:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_nan>

000006e4 <__divsf3x>:
 6e4:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_split3>
 6e8:	68 f3       	brcs	.-38     	; 0x6c4 <__divsf3+0x8>

000006ea <__divsf3_pse>:
 6ea:	99 23       	and	r25, r25
 6ec:	b1 f3       	breq	.-20     	; 0x6da <__divsf3+0x1e>
 6ee:	55 23       	and	r21, r21
 6f0:	91 f3       	breq	.-28     	; 0x6d6 <__divsf3+0x1a>
 6f2:	95 1b       	sub	r25, r21
 6f4:	55 0b       	sbc	r21, r21
 6f6:	bb 27       	eor	r27, r27
 6f8:	aa 27       	eor	r26, r26
 6fa:	62 17       	cp	r22, r18
 6fc:	73 07       	cpc	r23, r19
 6fe:	84 07       	cpc	r24, r20
 700:	38 f0       	brcs	.+14     	; 0x710 <__divsf3_pse+0x26>
 702:	9f 5f       	subi	r25, 0xFF	; 255
 704:	5f 4f       	sbci	r21, 0xFF	; 255
 706:	22 0f       	add	r18, r18
 708:	33 1f       	adc	r19, r19
 70a:	44 1f       	adc	r20, r20
 70c:	aa 1f       	adc	r26, r26
 70e:	a9 f3       	breq	.-22     	; 0x6fa <__divsf3_pse+0x10>
 710:	35 d0       	rcall	.+106    	; 0x77c <__divsf3_pse+0x92>
 712:	0e 2e       	mov	r0, r30
 714:	3a f0       	brmi	.+14     	; 0x724 <__divsf3_pse+0x3a>
 716:	e0 e8       	ldi	r30, 0x80	; 128
 718:	32 d0       	rcall	.+100    	; 0x77e <__divsf3_pse+0x94>
 71a:	91 50       	subi	r25, 0x01	; 1
 71c:	50 40       	sbci	r21, 0x00	; 0
 71e:	e6 95       	lsr	r30
 720:	00 1c       	adc	r0, r0
 722:	ca f7       	brpl	.-14     	; 0x716 <__divsf3_pse+0x2c>
 724:	2b d0       	rcall	.+86     	; 0x77c <__divsf3_pse+0x92>
 726:	fe 2f       	mov	r31, r30
 728:	29 d0       	rcall	.+82     	; 0x77c <__divsf3_pse+0x92>
 72a:	66 0f       	add	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	88 1f       	adc	r24, r24
 730:	bb 1f       	adc	r27, r27
 732:	26 17       	cp	r18, r22
 734:	37 07       	cpc	r19, r23
 736:	48 07       	cpc	r20, r24
 738:	ab 07       	cpc	r26, r27
 73a:	b0 e8       	ldi	r27, 0x80	; 128
 73c:	09 f0       	breq	.+2      	; 0x740 <__divsf3_pse+0x56>
 73e:	bb 0b       	sbc	r27, r27
 740:	80 2d       	mov	r24, r0
 742:	bf 01       	movw	r22, r30
 744:	ff 27       	eor	r31, r31
 746:	93 58       	subi	r25, 0x83	; 131
 748:	5f 4f       	sbci	r21, 0xFF	; 255
 74a:	3a f0       	brmi	.+14     	; 0x75a <__divsf3_pse+0x70>
 74c:	9e 3f       	cpi	r25, 0xFE	; 254
 74e:	51 05       	cpc	r21, r1
 750:	78 f0       	brcs	.+30     	; 0x770 <__divsf3_pse+0x86>
 752:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_inf>
 756:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>
 75a:	5f 3f       	cpi	r21, 0xFF	; 255
 75c:	e4 f3       	brlt	.-8      	; 0x756 <__divsf3_pse+0x6c>
 75e:	98 3e       	cpi	r25, 0xE8	; 232
 760:	d4 f3       	brlt	.-12     	; 0x756 <__divsf3_pse+0x6c>
 762:	86 95       	lsr	r24
 764:	77 95       	ror	r23
 766:	67 95       	ror	r22
 768:	b7 95       	ror	r27
 76a:	f7 95       	ror	r31
 76c:	9f 5f       	subi	r25, 0xFF	; 255
 76e:	c9 f7       	brne	.-14     	; 0x762 <__divsf3_pse+0x78>
 770:	88 0f       	add	r24, r24
 772:	91 1d       	adc	r25, r1
 774:	96 95       	lsr	r25
 776:	87 95       	ror	r24
 778:	97 f9       	bld	r25, 7
 77a:	08 95       	ret
 77c:	e1 e0       	ldi	r30, 0x01	; 1
 77e:	66 0f       	add	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	bb 1f       	adc	r27, r27
 786:	62 17       	cp	r22, r18
 788:	73 07       	cpc	r23, r19
 78a:	84 07       	cpc	r24, r20
 78c:	ba 07       	cpc	r27, r26
 78e:	20 f0       	brcs	.+8      	; 0x798 <__divsf3_pse+0xae>
 790:	62 1b       	sub	r22, r18
 792:	73 0b       	sbc	r23, r19
 794:	84 0b       	sbc	r24, r20
 796:	ba 0b       	sbc	r27, r26
 798:	ee 1f       	adc	r30, r30
 79a:	88 f7       	brcc	.-30     	; 0x77e <__divsf3_pse+0x94>
 79c:	e0 95       	com	r30
 79e:	08 95       	ret

000007a0 <__fixsfsi>:
 7a0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fixunssfsi>
 7a4:	68 94       	set
 7a6:	b1 11       	cpse	r27, r1
 7a8:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>
 7ac:	08 95       	ret

000007ae <__fixunssfsi>:
 7ae:	0e 94 b3 04 	call	0x966	; 0x966 <__fp_splitA>
 7b2:	88 f0       	brcs	.+34     	; 0x7d6 <__fixunssfsi+0x28>
 7b4:	9f 57       	subi	r25, 0x7F	; 127
 7b6:	98 f0       	brcs	.+38     	; 0x7de <__fixunssfsi+0x30>
 7b8:	b9 2f       	mov	r27, r25
 7ba:	99 27       	eor	r25, r25
 7bc:	b7 51       	subi	r27, 0x17	; 23
 7be:	b0 f0       	brcs	.+44     	; 0x7ec <__fixunssfsi+0x3e>
 7c0:	e1 f0       	breq	.+56     	; 0x7fa <__fixunssfsi+0x4c>
 7c2:	66 0f       	add	r22, r22
 7c4:	77 1f       	adc	r23, r23
 7c6:	88 1f       	adc	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	1a f0       	brmi	.+6      	; 0x7d2 <__fixunssfsi+0x24>
 7cc:	ba 95       	dec	r27
 7ce:	c9 f7       	brne	.-14     	; 0x7c2 <__fixunssfsi+0x14>
 7d0:	14 c0       	rjmp	.+40     	; 0x7fa <__fixunssfsi+0x4c>
 7d2:	b1 30       	cpi	r27, 0x01	; 1
 7d4:	91 f0       	breq	.+36     	; 0x7fa <__fixunssfsi+0x4c>
 7d6:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_zero>
 7da:	b1 e0       	ldi	r27, 0x01	; 1
 7dc:	08 95       	ret
 7de:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_zero>
 7e2:	67 2f       	mov	r22, r23
 7e4:	78 2f       	mov	r23, r24
 7e6:	88 27       	eor	r24, r24
 7e8:	b8 5f       	subi	r27, 0xF8	; 248
 7ea:	39 f0       	breq	.+14     	; 0x7fa <__fixunssfsi+0x4c>
 7ec:	b9 3f       	cpi	r27, 0xF9	; 249
 7ee:	cc f3       	brlt	.-14     	; 0x7e2 <__fixunssfsi+0x34>
 7f0:	86 95       	lsr	r24
 7f2:	77 95       	ror	r23
 7f4:	67 95       	ror	r22
 7f6:	b3 95       	inc	r27
 7f8:	d9 f7       	brne	.-10     	; 0x7f0 <__fixunssfsi+0x42>
 7fa:	3e f4       	brtc	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fc:	90 95       	com	r25
 7fe:	80 95       	com	r24
 800:	70 95       	com	r23
 802:	61 95       	neg	r22
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	08 95       	ret

0000080c <__floatunsisf>:
 80c:	e8 94       	clt
 80e:	09 c0       	rjmp	.+18     	; 0x822 <__floatsisf+0x12>

00000810 <__floatsisf>:
 810:	97 fb       	bst	r25, 7
 812:	3e f4       	brtc	.+14     	; 0x822 <__floatsisf+0x12>
 814:	90 95       	com	r25
 816:	80 95       	com	r24
 818:	70 95       	com	r23
 81a:	61 95       	neg	r22
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	99 23       	and	r25, r25
 824:	a9 f0       	breq	.+42     	; 0x850 <__floatsisf+0x40>
 826:	f9 2f       	mov	r31, r25
 828:	96 e9       	ldi	r25, 0x96	; 150
 82a:	bb 27       	eor	r27, r27
 82c:	93 95       	inc	r25
 82e:	f6 95       	lsr	r31
 830:	87 95       	ror	r24
 832:	77 95       	ror	r23
 834:	67 95       	ror	r22
 836:	b7 95       	ror	r27
 838:	f1 11       	cpse	r31, r1
 83a:	f8 cf       	rjmp	.-16     	; 0x82c <__floatsisf+0x1c>
 83c:	fa f4       	brpl	.+62     	; 0x87c <__stack+0x1d>
 83e:	bb 0f       	add	r27, r27
 840:	11 f4       	brne	.+4      	; 0x846 <__floatsisf+0x36>
 842:	60 ff       	sbrs	r22, 0
 844:	1b c0       	rjmp	.+54     	; 0x87c <__stack+0x1d>
 846:	6f 5f       	subi	r22, 0xFF	; 255
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	16 c0       	rjmp	.+44     	; 0x87c <__stack+0x1d>
 850:	88 23       	and	r24, r24
 852:	11 f0       	breq	.+4      	; 0x858 <__floatsisf+0x48>
 854:	96 e9       	ldi	r25, 0x96	; 150
 856:	11 c0       	rjmp	.+34     	; 0x87a <__stack+0x1b>
 858:	77 23       	and	r23, r23
 85a:	21 f0       	breq	.+8      	; 0x864 <__stack+0x5>
 85c:	9e e8       	ldi	r25, 0x8E	; 142
 85e:	87 2f       	mov	r24, r23
 860:	76 2f       	mov	r23, r22
 862:	05 c0       	rjmp	.+10     	; 0x86e <__stack+0xf>
 864:	66 23       	and	r22, r22
 866:	71 f0       	breq	.+28     	; 0x884 <__stack+0x25>
 868:	96 e8       	ldi	r25, 0x86	; 134
 86a:	86 2f       	mov	r24, r22
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	2a f0       	brmi	.+10     	; 0x87c <__stack+0x1d>
 872:	9a 95       	dec	r25
 874:	66 0f       	add	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	da f7       	brpl	.-10     	; 0x872 <__stack+0x13>
 87c:	88 0f       	add	r24, r24
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret

00000886 <floor>:
 886:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_trunc>
 88a:	90 f0       	brcs	.+36     	; 0x8b0 <floor+0x2a>
 88c:	9f 37       	cpi	r25, 0x7F	; 127
 88e:	48 f4       	brcc	.+18     	; 0x8a2 <floor+0x1c>
 890:	91 11       	cpse	r25, r1
 892:	16 f0       	brts	.+4      	; 0x898 <floor+0x12>
 894:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	80 e8       	ldi	r24, 0x80	; 128
 89e:	9f eb       	ldi	r25, 0xBF	; 191
 8a0:	08 95       	ret
 8a2:	26 f4       	brtc	.+8      	; 0x8ac <floor+0x26>
 8a4:	1b 16       	cp	r1, r27
 8a6:	61 1d       	adc	r22, r1
 8a8:	71 1d       	adc	r23, r1
 8aa:	81 1d       	adc	r24, r1
 8ac:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__fp_mintl>
 8b0:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_mpack>

000008b4 <__fp_inf>:
 8b4:	97 f9       	bld	r25, 7
 8b6:	9f 67       	ori	r25, 0x7F	; 127
 8b8:	80 e8       	ldi	r24, 0x80	; 128
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	60 e0       	ldi	r22, 0x00	; 0
 8be:	08 95       	ret

000008c0 <__fp_mintl>:
 8c0:	88 23       	and	r24, r24
 8c2:	71 f4       	brne	.+28     	; 0x8e0 <__fp_mintl+0x20>
 8c4:	77 23       	and	r23, r23
 8c6:	21 f0       	breq	.+8      	; 0x8d0 <__fp_mintl+0x10>
 8c8:	98 50       	subi	r25, 0x08	; 8
 8ca:	87 2b       	or	r24, r23
 8cc:	76 2f       	mov	r23, r22
 8ce:	07 c0       	rjmp	.+14     	; 0x8de <__fp_mintl+0x1e>
 8d0:	66 23       	and	r22, r22
 8d2:	11 f4       	brne	.+4      	; 0x8d8 <__fp_mintl+0x18>
 8d4:	99 27       	eor	r25, r25
 8d6:	0d c0       	rjmp	.+26     	; 0x8f2 <__fp_mintl+0x32>
 8d8:	90 51       	subi	r25, 0x10	; 16
 8da:	86 2b       	or	r24, r22
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	2a f0       	brmi	.+10     	; 0x8ec <__fp_mintl+0x2c>
 8e2:	9a 95       	dec	r25
 8e4:	66 0f       	add	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	da f7       	brpl	.-10     	; 0x8e2 <__fp_mintl+0x22>
 8ec:	88 0f       	add	r24, r24
 8ee:	96 95       	lsr	r25
 8f0:	87 95       	ror	r24
 8f2:	97 f9       	bld	r25, 7
 8f4:	08 95       	ret

000008f6 <__fp_mpack>:
 8f6:	9f 3f       	cpi	r25, 0xFF	; 255
 8f8:	31 f0       	breq	.+12     	; 0x906 <__fp_mpack_finite+0xc>

000008fa <__fp_mpack_finite>:
 8fa:	91 50       	subi	r25, 0x01	; 1
 8fc:	20 f4       	brcc	.+8      	; 0x906 <__fp_mpack_finite+0xc>
 8fe:	87 95       	ror	r24
 900:	77 95       	ror	r23
 902:	67 95       	ror	r22
 904:	b7 95       	ror	r27
 906:	88 0f       	add	r24, r24
 908:	91 1d       	adc	r25, r1
 90a:	96 95       	lsr	r25
 90c:	87 95       	ror	r24
 90e:	97 f9       	bld	r25, 7
 910:	08 95       	ret

00000912 <__fp_nan>:
 912:	9f ef       	ldi	r25, 0xFF	; 255
 914:	80 ec       	ldi	r24, 0xC0	; 192
 916:	08 95       	ret

00000918 <__fp_pscA>:
 918:	00 24       	eor	r0, r0
 91a:	0a 94       	dec	r0
 91c:	16 16       	cp	r1, r22
 91e:	17 06       	cpc	r1, r23
 920:	18 06       	cpc	r1, r24
 922:	09 06       	cpc	r0, r25
 924:	08 95       	ret

00000926 <__fp_pscB>:
 926:	00 24       	eor	r0, r0
 928:	0a 94       	dec	r0
 92a:	12 16       	cp	r1, r18
 92c:	13 06       	cpc	r1, r19
 92e:	14 06       	cpc	r1, r20
 930:	05 06       	cpc	r0, r21
 932:	08 95       	ret

00000934 <__fp_round>:
 934:	09 2e       	mov	r0, r25
 936:	03 94       	inc	r0
 938:	00 0c       	add	r0, r0
 93a:	11 f4       	brne	.+4      	; 0x940 <__fp_round+0xc>
 93c:	88 23       	and	r24, r24
 93e:	52 f0       	brmi	.+20     	; 0x954 <__fp_round+0x20>
 940:	bb 0f       	add	r27, r27
 942:	40 f4       	brcc	.+16     	; 0x954 <__fp_round+0x20>
 944:	bf 2b       	or	r27, r31
 946:	11 f4       	brne	.+4      	; 0x94c <__fp_round+0x18>
 948:	60 ff       	sbrs	r22, 0
 94a:	04 c0       	rjmp	.+8      	; 0x954 <__fp_round+0x20>
 94c:	6f 5f       	subi	r22, 0xFF	; 255
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	8f 4f       	sbci	r24, 0xFF	; 255
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	08 95       	ret

00000956 <__fp_split3>:
 956:	57 fd       	sbrc	r21, 7
 958:	90 58       	subi	r25, 0x80	; 128
 95a:	44 0f       	add	r20, r20
 95c:	55 1f       	adc	r21, r21
 95e:	59 f0       	breq	.+22     	; 0x976 <__fp_splitA+0x10>
 960:	5f 3f       	cpi	r21, 0xFF	; 255
 962:	71 f0       	breq	.+28     	; 0x980 <__fp_splitA+0x1a>
 964:	47 95       	ror	r20

00000966 <__fp_splitA>:
 966:	88 0f       	add	r24, r24
 968:	97 fb       	bst	r25, 7
 96a:	99 1f       	adc	r25, r25
 96c:	61 f0       	breq	.+24     	; 0x986 <__fp_splitA+0x20>
 96e:	9f 3f       	cpi	r25, 0xFF	; 255
 970:	79 f0       	breq	.+30     	; 0x990 <__fp_splitA+0x2a>
 972:	87 95       	ror	r24
 974:	08 95       	ret
 976:	12 16       	cp	r1, r18
 978:	13 06       	cpc	r1, r19
 97a:	14 06       	cpc	r1, r20
 97c:	55 1f       	adc	r21, r21
 97e:	f2 cf       	rjmp	.-28     	; 0x964 <__fp_split3+0xe>
 980:	46 95       	lsr	r20
 982:	f1 df       	rcall	.-30     	; 0x966 <__fp_splitA>
 984:	08 c0       	rjmp	.+16     	; 0x996 <__fp_splitA+0x30>
 986:	16 16       	cp	r1, r22
 988:	17 06       	cpc	r1, r23
 98a:	18 06       	cpc	r1, r24
 98c:	99 1f       	adc	r25, r25
 98e:	f1 cf       	rjmp	.-30     	; 0x972 <__fp_splitA+0xc>
 990:	86 95       	lsr	r24
 992:	71 05       	cpc	r23, r1
 994:	61 05       	cpc	r22, r1
 996:	08 94       	sec
 998:	08 95       	ret

0000099a <__fp_trunc>:
 99a:	0e 94 b3 04 	call	0x966	; 0x966 <__fp_splitA>
 99e:	a0 f0       	brcs	.+40     	; 0x9c8 <__fp_trunc+0x2e>
 9a0:	be e7       	ldi	r27, 0x7E	; 126
 9a2:	b9 17       	cp	r27, r25
 9a4:	88 f4       	brcc	.+34     	; 0x9c8 <__fp_trunc+0x2e>
 9a6:	bb 27       	eor	r27, r27
 9a8:	9f 38       	cpi	r25, 0x8F	; 143
 9aa:	60 f4       	brcc	.+24     	; 0x9c4 <__fp_trunc+0x2a>
 9ac:	16 16       	cp	r1, r22
 9ae:	b1 1d       	adc	r27, r1
 9b0:	67 2f       	mov	r22, r23
 9b2:	78 2f       	mov	r23, r24
 9b4:	88 27       	eor	r24, r24
 9b6:	98 5f       	subi	r25, 0xF8	; 248
 9b8:	f7 cf       	rjmp	.-18     	; 0x9a8 <__fp_trunc+0xe>
 9ba:	86 95       	lsr	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	b1 1d       	adc	r27, r1
 9c2:	93 95       	inc	r25
 9c4:	96 39       	cpi	r25, 0x96	; 150
 9c6:	c8 f3       	brcs	.-14     	; 0x9ba <__fp_trunc+0x20>
 9c8:	08 95       	ret

000009ca <__fp_zero>:
 9ca:	e8 94       	clt

000009cc <__fp_szero>:
 9cc:	bb 27       	eor	r27, r27
 9ce:	66 27       	eor	r22, r22
 9d0:	77 27       	eor	r23, r23
 9d2:	cb 01       	movw	r24, r22
 9d4:	97 f9       	bld	r25, 7
 9d6:	08 95       	ret

000009d8 <__udivmodhi4>:
 9d8:	aa 1b       	sub	r26, r26
 9da:	bb 1b       	sub	r27, r27
 9dc:	51 e1       	ldi	r21, 0x11	; 17
 9de:	07 c0       	rjmp	.+14     	; 0x9ee <__udivmodhi4_ep>

000009e0 <__udivmodhi4_loop>:
 9e0:	aa 1f       	adc	r26, r26
 9e2:	bb 1f       	adc	r27, r27
 9e4:	a6 17       	cp	r26, r22
 9e6:	b7 07       	cpc	r27, r23
 9e8:	10 f0       	brcs	.+4      	; 0x9ee <__udivmodhi4_ep>
 9ea:	a6 1b       	sub	r26, r22
 9ec:	b7 0b       	sbc	r27, r23

000009ee <__udivmodhi4_ep>:
 9ee:	88 1f       	adc	r24, r24
 9f0:	99 1f       	adc	r25, r25
 9f2:	5a 95       	dec	r21
 9f4:	a9 f7       	brne	.-22     	; 0x9e0 <__udivmodhi4_loop>
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	bc 01       	movw	r22, r24
 9fc:	cd 01       	movw	r24, r26
 9fe:	08 95       	ret

00000a00 <__divmodhi4>:
 a00:	97 fb       	bst	r25, 7
 a02:	07 2e       	mov	r0, r23
 a04:	16 f4       	brtc	.+4      	; 0xa0a <__divmodhi4+0xa>
 a06:	00 94       	com	r0
 a08:	07 d0       	rcall	.+14     	; 0xa18 <__divmodhi4_neg1>
 a0a:	77 fd       	sbrc	r23, 7
 a0c:	09 d0       	rcall	.+18     	; 0xa20 <__divmodhi4_neg2>
 a0e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__udivmodhi4>
 a12:	07 fc       	sbrc	r0, 7
 a14:	05 d0       	rcall	.+10     	; 0xa20 <__divmodhi4_neg2>
 a16:	3e f4       	brtc	.+14     	; 0xa26 <__divmodhi4_exit>

00000a18 <__divmodhi4_neg1>:
 a18:	90 95       	com	r25
 a1a:	81 95       	neg	r24
 a1c:	9f 4f       	sbci	r25, 0xFF	; 255
 a1e:	08 95       	ret

00000a20 <__divmodhi4_neg2>:
 a20:	70 95       	com	r23
 a22:	61 95       	neg	r22
 a24:	7f 4f       	sbci	r23, 0xFF	; 255

00000a26 <__divmodhi4_exit>:
 a26:	08 95       	ret

00000a28 <do_rand>:
 a28:	8f 92       	push	r8
 a2a:	9f 92       	push	r9
 a2c:	af 92       	push	r10
 a2e:	bf 92       	push	r11
 a30:	cf 92       	push	r12
 a32:	df 92       	push	r13
 a34:	ef 92       	push	r14
 a36:	ff 92       	push	r15
 a38:	cf 93       	push	r28
 a3a:	df 93       	push	r29
 a3c:	ec 01       	movw	r28, r24
 a3e:	68 81       	ld	r22, Y
 a40:	79 81       	ldd	r23, Y+1	; 0x01
 a42:	8a 81       	ldd	r24, Y+2	; 0x02
 a44:	9b 81       	ldd	r25, Y+3	; 0x03
 a46:	61 15       	cp	r22, r1
 a48:	71 05       	cpc	r23, r1
 a4a:	81 05       	cpc	r24, r1
 a4c:	91 05       	cpc	r25, r1
 a4e:	21 f4       	brne	.+8      	; 0xa58 <do_rand+0x30>
 a50:	64 e2       	ldi	r22, 0x24	; 36
 a52:	79 ed       	ldi	r23, 0xD9	; 217
 a54:	8b e5       	ldi	r24, 0x5B	; 91
 a56:	97 e0       	ldi	r25, 0x07	; 7
 a58:	2d e1       	ldi	r18, 0x1D	; 29
 a5a:	33 ef       	ldi	r19, 0xF3	; 243
 a5c:	41 e0       	ldi	r20, 0x01	; 1
 a5e:	50 e0       	ldi	r21, 0x00	; 0
 a60:	0e 94 cb 05 	call	0xb96	; 0xb96 <__divmodsi4>
 a64:	49 01       	movw	r8, r18
 a66:	5a 01       	movw	r10, r20
 a68:	9b 01       	movw	r18, r22
 a6a:	ac 01       	movw	r20, r24
 a6c:	a7 ea       	ldi	r26, 0xA7	; 167
 a6e:	b1 e4       	ldi	r27, 0x41	; 65
 a70:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__muluhisi3>
 a74:	6b 01       	movw	r12, r22
 a76:	7c 01       	movw	r14, r24
 a78:	ac ee       	ldi	r26, 0xEC	; 236
 a7a:	b4 ef       	ldi	r27, 0xF4	; 244
 a7c:	a5 01       	movw	r20, r10
 a7e:	94 01       	movw	r18, r8
 a80:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__mulohisi3>
 a84:	dc 01       	movw	r26, r24
 a86:	cb 01       	movw	r24, r22
 a88:	8c 0d       	add	r24, r12
 a8a:	9d 1d       	adc	r25, r13
 a8c:	ae 1d       	adc	r26, r14
 a8e:	bf 1d       	adc	r27, r15
 a90:	b7 ff       	sbrs	r27, 7
 a92:	03 c0       	rjmp	.+6      	; 0xa9a <do_rand+0x72>
 a94:	01 97       	sbiw	r24, 0x01	; 1
 a96:	a1 09       	sbc	r26, r1
 a98:	b0 48       	sbci	r27, 0x80	; 128
 a9a:	88 83       	st	Y, r24
 a9c:	99 83       	std	Y+1, r25	; 0x01
 a9e:	aa 83       	std	Y+2, r26	; 0x02
 aa0:	bb 83       	std	Y+3, r27	; 0x03
 aa2:	9f 77       	andi	r25, 0x7F	; 127
 aa4:	df 91       	pop	r29
 aa6:	cf 91       	pop	r28
 aa8:	ff 90       	pop	r15
 aaa:	ef 90       	pop	r14
 aac:	df 90       	pop	r13
 aae:	cf 90       	pop	r12
 ab0:	bf 90       	pop	r11
 ab2:	af 90       	pop	r10
 ab4:	9f 90       	pop	r9
 ab6:	8f 90       	pop	r8
 ab8:	08 95       	ret

00000aba <rand_r>:
 aba:	0e 94 14 05 	call	0xa28	; 0xa28 <do_rand>
 abe:	08 95       	ret

00000ac0 <rand>:
 ac0:	80 e6       	ldi	r24, 0x60	; 96
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	0e 94 14 05 	call	0xa28	; 0xa28 <do_rand>
 ac8:	08 95       	ret

00000aca <srand>:
 aca:	a0 e0       	ldi	r26, 0x00	; 0
 acc:	b0 e0       	ldi	r27, 0x00	; 0
 ace:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 ad2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 ad6:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 ada:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 ade:	08 95       	ret

00000ae0 <atoi>:
 ae0:	fc 01       	movw	r30, r24
 ae2:	88 27       	eor	r24, r24
 ae4:	99 27       	eor	r25, r25
 ae6:	e8 94       	clt
 ae8:	21 91       	ld	r18, Z+
 aea:	20 32       	cpi	r18, 0x20	; 32
 aec:	e9 f3       	breq	.-6      	; 0xae8 <atoi+0x8>
 aee:	29 30       	cpi	r18, 0x09	; 9
 af0:	10 f0       	brcs	.+4      	; 0xaf6 <atoi+0x16>
 af2:	2e 30       	cpi	r18, 0x0E	; 14
 af4:	c8 f3       	brcs	.-14     	; 0xae8 <atoi+0x8>
 af6:	2b 32       	cpi	r18, 0x2B	; 43
 af8:	41 f0       	breq	.+16     	; 0xb0a <atoi+0x2a>
 afa:	2d 32       	cpi	r18, 0x2D	; 45
 afc:	39 f4       	brne	.+14     	; 0xb0c <atoi+0x2c>
 afe:	68 94       	set
 b00:	04 c0       	rjmp	.+8      	; 0xb0a <atoi+0x2a>
 b02:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulhi_const_10>
 b06:	82 0f       	add	r24, r18
 b08:	91 1d       	adc	r25, r1
 b0a:	21 91       	ld	r18, Z+
 b0c:	20 53       	subi	r18, 0x30	; 48
 b0e:	2a 30       	cpi	r18, 0x0A	; 10
 b10:	c0 f3       	brcs	.-16     	; 0xb02 <atoi+0x22>
 b12:	1e f4       	brtc	.+6      	; 0xb1a <atoi+0x3a>
 b14:	90 95       	com	r25
 b16:	81 95       	neg	r24
 b18:	9f 4f       	sbci	r25, 0xFF	; 255
 b1a:	08 95       	ret

00000b1c <__itoa_ncheck>:
 b1c:	bb 27       	eor	r27, r27
 b1e:	4a 30       	cpi	r20, 0x0A	; 10
 b20:	31 f4       	brne	.+12     	; 0xb2e <__itoa_ncheck+0x12>
 b22:	99 23       	and	r25, r25
 b24:	22 f4       	brpl	.+8      	; 0xb2e <__itoa_ncheck+0x12>
 b26:	bd e2       	ldi	r27, 0x2D	; 45
 b28:	90 95       	com	r25
 b2a:	81 95       	neg	r24
 b2c:	9f 4f       	sbci	r25, 0xFF	; 255
 b2e:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__utoa_common>

00000b32 <__mulhi_const_10>:
 b32:	7a e0       	ldi	r23, 0x0A	; 10
 b34:	97 9f       	mul	r25, r23
 b36:	90 2d       	mov	r25, r0
 b38:	87 9f       	mul	r24, r23
 b3a:	80 2d       	mov	r24, r0
 b3c:	91 0d       	add	r25, r1
 b3e:	11 24       	eor	r1, r1
 b40:	08 95       	ret

00000b42 <__utoa_ncheck>:
 b42:	bb 27       	eor	r27, r27

00000b44 <__utoa_common>:
 b44:	fb 01       	movw	r30, r22
 b46:	55 27       	eor	r21, r21
 b48:	aa 27       	eor	r26, r26
 b4a:	88 0f       	add	r24, r24
 b4c:	99 1f       	adc	r25, r25
 b4e:	aa 1f       	adc	r26, r26
 b50:	a4 17       	cp	r26, r20
 b52:	10 f0       	brcs	.+4      	; 0xb58 <__utoa_common+0x14>
 b54:	a4 1b       	sub	r26, r20
 b56:	83 95       	inc	r24
 b58:	50 51       	subi	r21, 0x10	; 16
 b5a:	b9 f7       	brne	.-18     	; 0xb4a <__utoa_common+0x6>
 b5c:	a0 5d       	subi	r26, 0xD0	; 208
 b5e:	aa 33       	cpi	r26, 0x3A	; 58
 b60:	08 f0       	brcs	.+2      	; 0xb64 <__utoa_common+0x20>
 b62:	a9 5d       	subi	r26, 0xD9	; 217
 b64:	a1 93       	st	Z+, r26
 b66:	00 97       	sbiw	r24, 0x00	; 0
 b68:	79 f7       	brne	.-34     	; 0xb48 <__utoa_common+0x4>
 b6a:	b1 11       	cpse	r27, r1
 b6c:	b1 93       	st	Z+, r27
 b6e:	11 92       	st	Z+, r1
 b70:	cb 01       	movw	r24, r22
 b72:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <strrev>

00000b76 <strrev>:
 b76:	dc 01       	movw	r26, r24
 b78:	fc 01       	movw	r30, r24
 b7a:	67 2f       	mov	r22, r23
 b7c:	71 91       	ld	r23, Z+
 b7e:	77 23       	and	r23, r23
 b80:	e1 f7       	brne	.-8      	; 0xb7a <strrev+0x4>
 b82:	32 97       	sbiw	r30, 0x02	; 2
 b84:	04 c0       	rjmp	.+8      	; 0xb8e <strrev+0x18>
 b86:	7c 91       	ld	r23, X
 b88:	6d 93       	st	X+, r22
 b8a:	70 83       	st	Z, r23
 b8c:	62 91       	ld	r22, -Z
 b8e:	ae 17       	cp	r26, r30
 b90:	bf 07       	cpc	r27, r31
 b92:	c8 f3       	brcs	.-14     	; 0xb86 <strrev+0x10>
 b94:	08 95       	ret

00000b96 <__divmodsi4>:
 b96:	05 2e       	mov	r0, r21
 b98:	97 fb       	bst	r25, 7
 b9a:	1e f4       	brtc	.+6      	; 0xba2 <__divmodsi4+0xc>
 b9c:	00 94       	com	r0
 b9e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__negsi2>
 ba2:	57 fd       	sbrc	r21, 7
 ba4:	07 d0       	rcall	.+14     	; 0xbb4 <__divmodsi4_neg2>
 ba6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__udivmodsi4>
 baa:	07 fc       	sbrc	r0, 7
 bac:	03 d0       	rcall	.+6      	; 0xbb4 <__divmodsi4_neg2>
 bae:	4e f4       	brtc	.+18     	; 0xbc2 <__divmodsi4_exit>
 bb0:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__negsi2>

00000bb4 <__divmodsi4_neg2>:
 bb4:	50 95       	com	r21
 bb6:	40 95       	com	r20
 bb8:	30 95       	com	r19
 bba:	21 95       	neg	r18
 bbc:	3f 4f       	sbci	r19, 0xFF	; 255
 bbe:	4f 4f       	sbci	r20, 0xFF	; 255
 bc0:	5f 4f       	sbci	r21, 0xFF	; 255

00000bc2 <__divmodsi4_exit>:
 bc2:	08 95       	ret

00000bc4 <__negsi2>:
 bc4:	90 95       	com	r25
 bc6:	80 95       	com	r24
 bc8:	70 95       	com	r23
 bca:	61 95       	neg	r22
 bcc:	7f 4f       	sbci	r23, 0xFF	; 255
 bce:	8f 4f       	sbci	r24, 0xFF	; 255
 bd0:	9f 4f       	sbci	r25, 0xFF	; 255
 bd2:	08 95       	ret

00000bd4 <__muluhisi3>:
 bd4:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__umulhisi3>
 bd8:	a5 9f       	mul	r26, r21
 bda:	90 0d       	add	r25, r0
 bdc:	b4 9f       	mul	r27, r20
 bde:	90 0d       	add	r25, r0
 be0:	a4 9f       	mul	r26, r20
 be2:	80 0d       	add	r24, r0
 be4:	91 1d       	adc	r25, r1
 be6:	11 24       	eor	r1, r1
 be8:	08 95       	ret

00000bea <__mulshisi3>:
 bea:	b7 ff       	sbrs	r27, 7
 bec:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__muluhisi3>

00000bf0 <__mulohisi3>:
 bf0:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__muluhisi3>
 bf4:	82 1b       	sub	r24, r18
 bf6:	93 0b       	sbc	r25, r19
 bf8:	08 95       	ret

00000bfa <__udivmodsi4>:
 bfa:	a1 e2       	ldi	r26, 0x21	; 33
 bfc:	1a 2e       	mov	r1, r26
 bfe:	aa 1b       	sub	r26, r26
 c00:	bb 1b       	sub	r27, r27
 c02:	fd 01       	movw	r30, r26
 c04:	0d c0       	rjmp	.+26     	; 0xc20 <__udivmodsi4_ep>

00000c06 <__udivmodsi4_loop>:
 c06:	aa 1f       	adc	r26, r26
 c08:	bb 1f       	adc	r27, r27
 c0a:	ee 1f       	adc	r30, r30
 c0c:	ff 1f       	adc	r31, r31
 c0e:	a2 17       	cp	r26, r18
 c10:	b3 07       	cpc	r27, r19
 c12:	e4 07       	cpc	r30, r20
 c14:	f5 07       	cpc	r31, r21
 c16:	20 f0       	brcs	.+8      	; 0xc20 <__udivmodsi4_ep>
 c18:	a2 1b       	sub	r26, r18
 c1a:	b3 0b       	sbc	r27, r19
 c1c:	e4 0b       	sbc	r30, r20
 c1e:	f5 0b       	sbc	r31, r21

00000c20 <__udivmodsi4_ep>:
 c20:	66 1f       	adc	r22, r22
 c22:	77 1f       	adc	r23, r23
 c24:	88 1f       	adc	r24, r24
 c26:	99 1f       	adc	r25, r25
 c28:	1a 94       	dec	r1
 c2a:	69 f7       	brne	.-38     	; 0xc06 <__udivmodsi4_loop>
 c2c:	60 95       	com	r22
 c2e:	70 95       	com	r23
 c30:	80 95       	com	r24
 c32:	90 95       	com	r25
 c34:	9b 01       	movw	r18, r22
 c36:	ac 01       	movw	r20, r24
 c38:	bd 01       	movw	r22, r26
 c3a:	cf 01       	movw	r24, r30
 c3c:	08 95       	ret

00000c3e <__umulhisi3>:
 c3e:	a2 9f       	mul	r26, r18
 c40:	b0 01       	movw	r22, r0
 c42:	b3 9f       	mul	r27, r19
 c44:	c0 01       	movw	r24, r0
 c46:	a3 9f       	mul	r26, r19
 c48:	70 0d       	add	r23, r0
 c4a:	81 1d       	adc	r24, r1
 c4c:	11 24       	eor	r1, r1
 c4e:	91 1d       	adc	r25, r1
 c50:	b2 9f       	mul	r27, r18
 c52:	70 0d       	add	r23, r0
 c54:	81 1d       	adc	r24, r1
 c56:	11 24       	eor	r1, r1
 c58:	91 1d       	adc	r25, r1
 c5a:	08 95       	ret

00000c5c <_exit>:
 c5c:	f8 94       	cli

00000c5e <__stop_program>:
 c5e:	ff cf       	rjmp	.-2      	; 0xc5e <__stop_program>
