
Task3_GuessingGameV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b3c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000b3c  00000bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c44  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016a0  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b07  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c4a  00000000  00000000  00002f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000234  00000000  00000000  00003bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056e  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000636  00000000  00000000  00004366  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000499c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 04 02 	call	0x408	; 0x408 <main>
  7a:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <app_init>:
#include "KeyPad_Driver/keypad.h"
#include "Timer_Driver/timer.h"

void app_init(void)
{
	lcd_init();
  82:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_init>
	
	// KEYPAD
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,4);
  86:	24 e0       	ldi	r18, 0x04	; 4
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	6a e3       	ldi	r22, 0x3A	; 58
  8c:	70 e0       	ldi	r23, 0x00	; 0
  8e:	8b e3       	ldi	r24, 0x3B	; 59
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 22 01 	call	0x244	; 0x244 <DIO_init>
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,5);
  96:	25 e0       	ldi	r18, 0x05	; 5
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	6a e3       	ldi	r22, 0x3A	; 58
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	8b e3       	ldi	r24, 0x3B	; 59
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 22 01 	call	0x244	; 0x244 <DIO_init>
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,6);
  a6:	26 e0       	ldi	r18, 0x06	; 6
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	6a e3       	ldi	r22, 0x3A	; 58
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	8b e3       	ldi	r24, 0x3B	; 59
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 22 01 	call	0x244	; 0x244 <DIO_init>
	DIO_init(&PORTA_Data,&PORTA_Dir,OUTPUT,7);
  b6:	27 e0       	ldi	r18, 0x07	; 7
  b8:	41 e0       	ldi	r20, 0x01	; 1
  ba:	6a e3       	ldi	r22, 0x3A	; 58
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	8b e3       	ldi	r24, 0x3B	; 59
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 22 01 	call	0x244	; 0x244 <DIO_init>
	
	button_init(&PORTA_Data,&PORTA_Dir,0);
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	6a e3       	ldi	r22, 0x3A	; 58
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	8b e3       	ldi	r24, 0x3B	; 59
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 1d 01 	call	0x23a	; 0x23a <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,1);
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	6a e3       	ldi	r22, 0x3A	; 58
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	8b e3       	ldi	r24, 0x3B	; 59
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 1d 01 	call	0x23a	; 0x23a <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,2);
  e2:	42 e0       	ldi	r20, 0x02	; 2
  e4:	6a e3       	ldi	r22, 0x3A	; 58
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	8b e3       	ldi	r24, 0x3B	; 59
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 1d 01 	call	0x23a	; 0x23a <button_init>
	button_init(&PORTA_Data,&PORTA_Dir,3);
  f0:	43 e0       	ldi	r20, 0x03	; 3
  f2:	6a e3       	ldi	r22, 0x3A	; 58
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	8b e3       	ldi	r24, 0x3B	; 59
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 1d 01 	call	0x23a	; 0x23a <button_init>
  fe:	08 95       	ret

00000100 <render_main_screen>:

}

void render_main_screen(void)
{
	Lcd_Set_Cursor(1,0);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 aa 01 	call	0x354	; 0x354 <Lcd_Set_Cursor>
	lcd_write_string("Please Guess");
 108:	84 e6       	ldi	r24, 0x64	; 100
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	0e 94 aa 01 	call	0x354	; 0x354 <Lcd_Set_Cursor>
	lcd_write_string("an Integer:");
 118:	81 e7       	ldi	r24, 0x71	; 113
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
 120:	08 95       	ret

00000122 <render_win_screen>:
}
void render_win_screen(char* number)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
	Lcd_Set_Cursor(1,4);
 130:	64 e0       	ldi	r22, 0x04	; 4
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 aa 01 	call	0x354	; 0x354 <Lcd_Set_Cursor>
	lcd_write_string("YOU WON");
 138:	8d e7       	ldi	r24, 0x7D	; 125
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 aa 01 	call	0x354	; 0x354 <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 148:	85 e8       	ldi	r24, 0x85	; 133
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
	lcd_write_string(number);
 150:	ce 01       	movw	r24, r28
 152:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
	timer_delay(2000);
 156:	80 ed       	ldi	r24, 0xD0	; 208
 158:	97 e0       	ldi	r25, 0x07	; 7
 15a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
	lcd_cmd(0x01);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <render_loss_screen>:
void render_loss_screen(char* number)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
	lcd_cmd(0x01);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
	Lcd_Set_Cursor(1,4);
 17a:	64 e0       	ldi	r22, 0x04	; 4
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 aa 01 	call	0x354	; 0x354 <Lcd_Set_Cursor>
	lcd_write_string("YOU LOST");
 182:	8e e8       	ldi	r24, 0x8E	; 142
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 aa 01 	call	0x354	; 0x354 <Lcd_Set_Cursor>
	lcd_write_string("it was :");
 192:	85 e8       	ldi	r24, 0x85	; 133
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
	lcd_write_string(number);
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
	timer_delay(2000);
 1a0:	80 ed       	ldi	r24, 0xD0	; 208
 1a2:	97 e0       	ldi	r25, 0x07	; 7
 1a4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
	lcd_cmd(0x01);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <render_range_invalid_screen>:
void render_range_invalid_screen(void)
{
	lcd_cmd(0x01);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
	Lcd_Set_Cursor(1,0);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 aa 01 	call	0x354	; 0x354 <Lcd_Set_Cursor>
	lcd_write_string("The Valid Range");
 1c6:	87 e9       	ldi	r24, 0x97	; 151
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
	Lcd_Set_Cursor(2,0);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 aa 01 	call	0x354	; 0x354 <Lcd_Set_Cursor>
	lcd_write_string("from 1 -> 15:");
 1d6:	87 ea       	ldi	r24, 0xA7	; 167
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
	timer_delay(2000);
 1de:	80 ed       	ldi	r24, 0xD0	; 208
 1e0:	97 e0       	ldi	r25, 0x07	; 7
 1e2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
	lcd_cmd(0x01);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
 1ee:	08 95       	ret

000001f0 <render_invalid_input_screen>:
}
void render_invalid_input_screen(void)
{
	lcd_cmd(0x01);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
	Lcd_Set_Cursor(1,0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 aa 01 	call	0x354	; 0x354 <Lcd_Set_Cursor>
	lcd_write_string("Invalid Input");
 200:	85 eb       	ldi	r24, 0xB5	; 181
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
	timer_delay(2000);
 208:	80 ed       	ldi	r24, 0xD0	; 208
 20a:	97 e0       	ldi	r25, 0x07	; 7
 20c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
	lcd_cmd(0x01);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
 218:	08 95       	ret

0000021a <rand_int>:
}
uint8_t rand_int(uint8_t seed, uint8_t range)
{
 21a:	cf 93       	push	r28
 21c:	c6 2f       	mov	r28, r22
	srand(seed);
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <srand>
	return (rand()%(range-1)+1); // random number between 1 and 15 inclusive
 224:	0e 94 ce 04 	call	0x99c	; 0x99c <rand>
 228:	6c 2f       	mov	r22, r28
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	61 50       	subi	r22, 0x01	; 1
 22e:	71 09       	sbc	r23, r1
 230:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__divmodhi4>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <button_init>:
#include "../macros.h"
#include "../DIO_Driver/dio.h"

void button_init(vuint8_t* PORT_, vuint8_t* DDR_, uint8_t bitNumber)
{
 23a:	24 2f       	mov	r18, r20
	DIO_init(PORT_,DDR_,INPUT,bitNumber);
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	0e 94 22 01 	call	0x244	; 0x244 <DIO_init>
 242:	08 95       	ret

00000244 <DIO_init>:


void DIO_init(vuint8_t* PORT_, vuint8_t* DDR_, uint8_t dircetion, uint8_t bitNumber)
{
	
	if(dircetion == INPUT)
 244:	41 11       	cpse	r20, r1
 246:	0d c0       	rjmp	.+26     	; 0x262 <DIO_init+0x1e>
	{
		*DDR_ &= ~(1 << bitNumber);
 248:	fb 01       	movw	r30, r22
 24a:	30 81       	ld	r19, Z
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_init+0x12>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	2a 95       	dec	r18
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_init+0xe>
 25a:	80 95       	com	r24
 25c:	83 23       	and	r24, r19
 25e:	80 83       	st	Z, r24
 260:	08 95       	ret
	}
	else
	{
		*DDR_ |= (1 << bitNumber);
 262:	fb 01       	movw	r30, r22
 264:	30 81       	ld	r19, Z
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_init+0x2c>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	2a 95       	dec	r18
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_init+0x28>
 274:	83 2b       	or	r24, r19
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <keypad>:
 *  Author: OWNER
 */ 
#include "../macros.h"
uint8_t keypad(void)
{
	PORTA = 0x10; // portA4 is HIGH
 27a:	80 e1       	ldi	r24, 0x10	; 16
 27c:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PORTA0))) { return '7';}
 27e:	c8 99       	sbic	0x19, 0	; 25
 280:	36 c0       	rjmp	.+108    	; 0x2ee <keypad+0x74>
	else if((PINA & (1<<PORTA1))) { return '8';}
 282:	c9 99       	sbic	0x19, 1	; 25
 284:	36 c0       	rjmp	.+108    	; 0x2f2 <keypad+0x78>
	else if((PINA & (1<<PORTA2))) { return '9';}
 286:	ca 99       	sbic	0x19, 2	; 25
 288:	36 c0       	rjmp	.+108    	; 0x2f6 <keypad+0x7c>
	else if((PINA & (1<<PORTA3))) { return invalid;}
 28a:	cb 99       	sbic	0x19, 3	; 25
 28c:	36 c0       	rjmp	.+108    	; 0x2fa <keypad+0x80>
	
	timer_delay(1);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
	PORTA = 0x20; // portA5 is HIGH
 296:	80 e2       	ldi	r24, 0x20	; 32
 298:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PORTA0))){ return '4';}
 29a:	c8 99       	sbic	0x19, 0	; 25
 29c:	30 c0       	rjmp	.+96     	; 0x2fe <keypad+0x84>
	else if((PINA & (1<<PORTA1))) { return '5';}
 29e:	c9 99       	sbic	0x19, 1	; 25
 2a0:	30 c0       	rjmp	.+96     	; 0x302 <keypad+0x88>
	else if((PINA & (1<<PORTA2))) { return '6';}
 2a2:	ca 99       	sbic	0x19, 2	; 25
 2a4:	30 c0       	rjmp	.+96     	; 0x306 <keypad+0x8c>
	else if((PINA & (1<<PORTA3))) { return invalid;}
 2a6:	cb 99       	sbic	0x19, 3	; 25
 2a8:	30 c0       	rjmp	.+96     	; 0x30a <keypad+0x90>
	
	timer_delay(1);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
	PORTA = 0x40; // portA6 is HIGH
 2b2:	80 e4       	ldi	r24, 0x40	; 64
 2b4:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PORTA0))) { return '1';}
 2b6:	c8 99       	sbic	0x19, 0	; 25
 2b8:	2a c0       	rjmp	.+84     	; 0x30e <keypad+0x94>
	else if((PINA & (1<<PORTA1))) { return '2';}
 2ba:	c9 99       	sbic	0x19, 1	; 25
 2bc:	2a c0       	rjmp	.+84     	; 0x312 <keypad+0x98>
	else if((PINA & (1<<PORTA2))) { return '3';}
 2be:	ca 99       	sbic	0x19, 2	; 25
 2c0:	2a c0       	rjmp	.+84     	; 0x316 <keypad+0x9c>
	else if((PINA & (1<<PORTA3))) { return invalid;}
 2c2:	cb 99       	sbic	0x19, 3	; 25
 2c4:	2a c0       	rjmp	.+84     	; 0x31a <keypad+0xa0>
	timer_delay(1);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>

	PORTA = 0x80; // portA7 is HIGH
 2ce:	80 e8       	ldi	r24, 0x80	; 128
 2d0:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PORTA0))) { return invalid;}
 2d2:	c8 99       	sbic	0x19, 0	; 25
 2d4:	24 c0       	rjmp	.+72     	; 0x31e <keypad+0xa4>
	else if((PINA & (1<<PORTA1))) { return '0';}
 2d6:	c9 99       	sbic	0x19, 1	; 25
 2d8:	24 c0       	rjmp	.+72     	; 0x322 <keypad+0xa8>
	else if((PINA & (1<<PORTA2))) { return ENTER;}
 2da:	ca 99       	sbic	0x19, 2	; 25
 2dc:	24 c0       	rjmp	.+72     	; 0x326 <keypad+0xac>
	else if((PINA & (1<<PORTA3))) { return invalid;}
 2de:	cb 99       	sbic	0x19, 3	; 25
 2e0:	24 c0       	rjmp	.+72     	; 0x32a <keypad+0xb0>
	timer_delay(1);
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
	
	return none;
 2ea:	8e e6       	ldi	r24, 0x6E	; 110
 2ec:	08 95       	ret
 */ 
#include "../macros.h"
uint8_t keypad(void)
{
	PORTA = 0x10; // portA4 is HIGH
	if((PINA & (1<<PORTA0))) { return '7';}
 2ee:	87 e3       	ldi	r24, 0x37	; 55
 2f0:	08 95       	ret
	else if((PINA & (1<<PORTA1))) { return '8';}
 2f2:	88 e3       	ldi	r24, 0x38	; 56
 2f4:	08 95       	ret
	else if((PINA & (1<<PORTA2))) { return '9';}
 2f6:	89 e3       	ldi	r24, 0x39	; 57
 2f8:	08 95       	ret
	else if((PINA & (1<<PORTA3))) { return invalid;}
 2fa:	89 e6       	ldi	r24, 0x69	; 105
 2fc:	08 95       	ret
	
	timer_delay(1);
	PORTA = 0x20; // portA5 is HIGH
	if((PINA & (1<<PORTA0))){ return '4';}
 2fe:	84 e3       	ldi	r24, 0x34	; 52
 300:	08 95       	ret
	else if((PINA & (1<<PORTA1))) { return '5';}
 302:	85 e3       	ldi	r24, 0x35	; 53
 304:	08 95       	ret
	else if((PINA & (1<<PORTA2))) { return '6';}
 306:	86 e3       	ldi	r24, 0x36	; 54
 308:	08 95       	ret
	else if((PINA & (1<<PORTA3))) { return invalid;}
 30a:	89 e6       	ldi	r24, 0x69	; 105
 30c:	08 95       	ret
	
	timer_delay(1);
	PORTA = 0x40; // portA6 is HIGH
	if((PINA & (1<<PORTA0))) { return '1';}
 30e:	81 e3       	ldi	r24, 0x31	; 49
 310:	08 95       	ret
	else if((PINA & (1<<PORTA1))) { return '2';}
 312:	82 e3       	ldi	r24, 0x32	; 50
 314:	08 95       	ret
	else if((PINA & (1<<PORTA2))) { return '3';}
 316:	83 e3       	ldi	r24, 0x33	; 51
 318:	08 95       	ret
	else if((PINA & (1<<PORTA3))) { return invalid;}
 31a:	89 e6       	ldi	r24, 0x69	; 105
 31c:	08 95       	ret
	timer_delay(1);

	PORTA = 0x80; // portA7 is HIGH
	if((PINA & (1<<PORTA0))) { return invalid;}
 31e:	89 e6       	ldi	r24, 0x69	; 105
 320:	08 95       	ret
	else if((PINA & (1<<PORTA1))) { return '0';}
 322:	80 e3       	ldi	r24, 0x30	; 48
 324:	08 95       	ret
	else if((PINA & (1<<PORTA2))) { return ENTER;}
 326:	8d e3       	ldi	r24, 0x3D	; 61
 328:	08 95       	ret
	else if((PINA & (1<<PORTA3))) { return invalid;}
 32a:	89 e6       	ldi	r24, 0x69	; 105
	timer_delay(1);
	
	return none;
 32c:	08 95       	ret

0000032e <lcd_cmd>:
#include "../Timer_Driver/timer.h"
#include "../macros.h"
void lcd_cmd(int data)
{
	
	lcd_control	&= ~(1 << RS);
 32e:	95 b3       	in	r25, 0x15	; 21
 330:	9e 7f       	andi	r25, 0xFE	; 254
 332:	95 bb       	out	0x15, r25	; 21
	lcd_data = data;
 334:	82 bb       	out	0x12, r24	; 18
	lcd_control |= (1 << EN);
 336:	85 b3       	in	r24, 0x15	; 21
 338:	84 60       	ori	r24, 0x04	; 4
 33a:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
	lcd_control &= ~(1 << EN);
 344:	85 b3       	in	r24, 0x15	; 21
 346:	8b 7f       	andi	r24, 0xFB	; 251
 348:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
 352:	08 95       	ret

00000354 <Lcd_Set_Cursor>:
}


void Lcd_Set_Cursor(uint8_t a, uint8_t b)
{
	if(a == 1)
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	39 f4       	brne	.+14     	; 0x366 <Lcd_Set_Cursor+0x12>
	lcd_cmd(0x80 + b); // puts the cursor on the first row and adds up to the specific pixel
 358:	86 2f       	mov	r24, r22
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	80 58       	subi	r24, 0x80	; 128
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
 364:	08 95       	ret
	else if(a == 2)
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	31 f4       	brne	.+12     	; 0x376 <Lcd_Set_Cursor+0x22>
	lcd_cmd(0xC0 + b); // puts the cursor on the second row and adds up to the specific pixel
 36a:	86 2f       	mov	r24, r22
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	80 54       	subi	r24, 0x40	; 64
 370:	9f 4f       	sbci	r25, 0xFF	; 255
 372:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
 376:	08 95       	ret

00000378 <lcd_write_char>:
}

void lcd_write_char(int data)
{
	lcd_control	|= (1 << RS);
 378:	95 b3       	in	r25, 0x15	; 21
 37a:	91 60       	ori	r25, 0x01	; 1
 37c:	95 bb       	out	0x15, r25	; 21
	lcd_data = data;
 37e:	82 bb       	out	0x12, r24	; 18
	lcd_control |= (1 << EN);
 380:	85 b3       	in	r24, 0x15	; 21
 382:	84 60       	ori	r24, 0x04	; 4
 384:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
	lcd_control &= ~(1 << EN);
 38e:	85 b3       	in	r24, 0x15	; 21
 390:	8b 7f       	andi	r24, 0xFB	; 251
 392:	85 bb       	out	0x15, r24	; 21
	timer_delay(1);
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
 39c:	08 95       	ret

0000039e <lcd_write_string>:
}


void lcd_write_string(char* str)
{
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	8c 01       	movw	r16, r24
	for(int i = 0 ; str[i] != '\0' ; i++)
 3a8:	c0 e0       	ldi	r28, 0x00	; 0
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <lcd_write_string+0x18>
	{
		lcd_write_char(str[i]);
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 bc 01 	call	0x378	; 0x378 <lcd_write_char>
}


void lcd_write_string(char* str)
{
	for(int i = 0 ; str[i] != '\0' ; i++)
 3b4:	21 96       	adiw	r28, 0x01	; 1
 3b6:	f8 01       	movw	r30, r16
 3b8:	ec 0f       	add	r30, r28
 3ba:	fd 1f       	adc	r31, r29
 3bc:	80 81       	ld	r24, Z
 3be:	81 11       	cpse	r24, r1
 3c0:	f6 cf       	rjmp	.-20     	; 0x3ae <lcd_write_string+0x10>
	{
		lcd_write_char(str[i]);
	}
	
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	08 95       	ret

000003cc <lcd_init>:

void lcd_init(void)
{
	PORTD_Dir = 0xf0;
 3cc:	80 ef       	ldi	r24, 0xF0	; 240
 3ce:	84 bb       	out	0x14, r24	; 20
	PORTC_DIR = 0x07;
 3d0:	87 e0       	ldi	r24, 0x07	; 7
 3d2:	84 bb       	out	0x14, r24	; 20

	lcd_control	&= ~(1 << RS);
 3d4:	85 b3       	in	r24, 0x15	; 21
 3d6:	8e 7f       	andi	r24, 0xFE	; 254
 3d8:	85 bb       	out	0x15, r24	; 21
	lcd_control &= ~(1 << RW);
 3da:	85 b3       	in	r24, 0x15	; 21
 3dc:	8d 7f       	andi	r24, 0xFD	; 253
 3de:	85 bb       	out	0x15, r24	; 21
	lcd_control &= ~(1 << EN);
 3e0:	85 b3       	in	r24, 0x15	; 21
 3e2:	8b 7f       	andi	r24, 0xFB	; 251
 3e4:	85 bb       	out	0x15, r24	; 21



	lcd_cmd(0x38);    //function set 8-bit, 2-line display , 5x8 dots
 3e6:	88 e3       	ldi	r24, 0x38	; 56
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
	lcd_cmd(0x0c);    //display on,cursor off,blink off
 3ee:	8c e0       	ldi	r24, 0x0C	; 12
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
	lcd_cmd(0x01);    //clear display
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
	lcd_cmd(0x06);    //entry mode, set increment
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_cmd>
 406:	08 95       	ret

00000408 <main>:
*/

#include "app.h"

int main(void)
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
 410:	27 97       	sbiw	r28, 0x07	; 7
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	de bf       	out	0x3e, r29	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	cd bf       	out	0x3d, r28	; 61
	app_init();
 41c:	0e 94 41 00 	call	0x82	; 0x82 <app_init>
	uint8_t input = 0; // the integer value the user's input
	uint8_t i = 0; // iterator of the sInput
	uint8_t seed = 0; // the seed of the random number generator
	
	char sinput[5];  // the string value of the user's input
	memset(sinput,'\0', 5); // sets all the values of sinput to '\0'
 420:	fe 01       	movw	r30, r28
 422:	31 96       	adiw	r30, 0x01	; 1
 424:	85 e0       	ldi	r24, 0x05	; 5
 426:	df 01       	movw	r26, r30
 428:	1d 92       	st	X+, r1
 42a:	8a 95       	dec	r24
 42c:	e9 f7       	brne	.-6      	; 0x428 <main+0x20>
{
	app_init();
	
	uint8_t input = 0; // the integer value the user's input
	uint8_t i = 0; // iterator of the sInput
	uint8_t seed = 0; // the seed of the random number generator
 42e:	f1 2c       	mov	r15, r1
int main(void)
{
	app_init();
	
	uint8_t input = 0; // the integer value the user's input
	uint8_t i = 0; // iterator of the sInput
 430:	e1 2c       	mov	r14, r1
	memset(sinput,'\0', 5); // sets all the values of sinput to '\0'
	
	while(1)
	{
		
		int8_t key = keypad(); // get the keypad status
 432:	0e 94 3d 01 	call	0x27a	; 0x27a <keypad>
 436:	18 2f       	mov	r17, r24
		render_main_screen();
 438:	0e 94 80 00 	call	0x100	; 0x100 <render_main_screen>
		if(key == invalid) // if the key pressed was invalid
 43c:	19 36       	cpi	r17, 0x69	; 105
 43e:	19 f4       	brne	.+6      	; 0x446 <main+0x3e>
		{
			render_invalid_input_screen();
 440:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <render_invalid_input_screen>
 444:	46 c0       	rjmp	.+140    	; 0x4d2 <main+0xca>
		}
		else if (key == ENTER)
 446:	1d 33       	cpi	r17, 0x3D	; 61
 448:	91 f5       	brne	.+100    	; 0x4ae <main+0xa6>
		{
			if(sinput[0] == '\0') // Ignore ENTER if the user didn't input any data
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	88 23       	and	r24, r24
 44e:	89 f3       	breq	.-30     	; 0x432 <main+0x2a>
				continue;				
			
			uint8_t randNumber = rand_int(seed,15); // generate a random number from 1 to 15
 450:	6f e0       	ldi	r22, 0x0F	; 15
 452:	8f 2d       	mov	r24, r15
 454:	0e 94 0d 01 	call	0x21a	; 0x21a <rand_int>
 458:	18 2f       	mov	r17, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 45a:	4a e0       	ldi	r20, 0x0A	; 10
 45c:	be 01       	movw	r22, r28
 45e:	6a 5f       	subi	r22, 0xFA	; 250
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__itoa_ncheck>
			char sRandNumber[2] ;
			itoa(randNumber,sRandNumber,10); // converting the number INTEGER into string
					
			input = atoi(sinput); // converting the input from the user from string into integer
 468:	ce 01       	movw	r24, r28
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	0e 94 de 04 	call	0x9bc	; 0x9bc <atoi>
			if(input > 15 || input == 0) // if input us not in the valid range
 470:	9f ef       	ldi	r25, 0xFF	; 255
 472:	98 0f       	add	r25, r24
 474:	9f 30       	cpi	r25, 0x0F	; 15
 476:	18 f0       	brcs	.+6      	; 0x47e <main+0x76>
			{
				render_range_invalid_screen();
 478:	0e 94 db 00 	call	0x1b6	; 0x1b6 <render_range_invalid_screen>
 47c:	0b c0       	rjmp	.+22     	; 0x494 <main+0x8c>
			}
			else if(input == randNumber) // if the input the same as the random number
 47e:	18 13       	cpse	r17, r24
 480:	05 c0       	rjmp	.+10     	; 0x48c <main+0x84>
			{
				render_win_screen(sRandNumber);
 482:	ce 01       	movw	r24, r28
 484:	06 96       	adiw	r24, 0x06	; 6
 486:	0e 94 91 00 	call	0x122	; 0x122 <render_win_screen>
 48a:	04 c0       	rjmp	.+8      	; 0x494 <main+0x8c>
			}
			else // if the input was NOT equal to the random number
			{
				render_loss_screen(sRandNumber);
 48c:	ce 01       	movw	r24, r28
 48e:	06 96       	adiw	r24, 0x06	; 6
 490:	0e 94 b6 00 	call	0x16c	; 0x16c <render_loss_screen>
			}
					
			timer_delay(500);
 494:	84 ef       	ldi	r24, 0xF4	; 244
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
			// clearing the variables and repeating the game
			memset(sinput,'\0', 5);
 49c:	fe 01       	movw	r30, r28
 49e:	31 96       	adiw	r30, 0x01	; 1
 4a0:	85 e0       	ldi	r24, 0x05	; 5
 4a2:	df 01       	movw	r26, r30
 4a4:	1d 92       	st	X+, r1
 4a6:	8a 95       	dec	r24
 4a8:	e9 f7       	brne	.-6      	; 0x4a4 <main+0x9c>
			i = 0;
 4aa:	e1 2c       	mov	r14, r1
 4ac:	12 c0       	rjmp	.+36     	; 0x4d2 <main+0xca>

		}
		else if(key != none) // if the user did press a number
 4ae:	1e 36       	cpi	r17, 0x6E	; 110
 4b0:	81 f0       	breq	.+32     	; 0x4d2 <main+0xca>
		{
			sinput[i] = key; // push the key into sinput 
 4b2:	e1 e0       	ldi	r30, 0x01	; 1
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	ec 0f       	add	r30, r28
 4b8:	fd 1f       	adc	r31, r29
 4ba:	ee 0d       	add	r30, r14
 4bc:	f1 1d       	adc	r31, r1
 4be:	10 83       	st	Z, r17
			lcd_write_string(sinput); 
 4c0:	ce 01       	movw	r24, r28
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_write_string>
			timer_delay(200); // delay to prevent long presses
 4c8:	88 ec       	ldi	r24, 0xC8	; 200
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timer_delay>
			i++; 
 4d0:	e3 94       	inc	r14
		}
		seed++; 
 4d2:	f3 94       	inc	r15
 4d4:	ae cf       	rjmp	.-164    	; 0x432 <main+0x2a>

000004d6 <timer_delay>:
#define preScaler 1.024
#define timeToOverflowOneByte 261.12
#define timeToOverflowTwoByte 67108.864

void timer_delay(uint16_t time)
{
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
	if(time > 0)
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <timer_delay+0xe>
 4e2:	40 c0       	rjmp	.+128    	; 0x564 <timer_delay+0x8e>
 4e4:	8c 01       	movw	r16, r24
	{
		Timer0_control = 0b00000101;	// Timer0, normal mode, /1024 pre-scalar
 4e6:	85 e0       	ldi	r24, 0x05	; 5
 4e8:	83 bf       	out	0x33, r24	; 51
		int nIterations = (int)(time / timeToOverflowOneByte); // 1
 4ea:	b8 01       	movw	r22, r16
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 cc 03 	call	0x798	; 0x798 <__floatunsisf>
 4f4:	2c e5       	ldi	r18, 0x5C	; 92
 4f6:	3f e8       	ldi	r19, 0x8F	; 143
 4f8:	42 e8       	ldi	r20, 0x82	; 130
 4fa:	53 e4       	ldi	r21, 0x43	; 67
 4fc:	0e 94 24 03 	call	0x648	; 0x648 <__divsf3>
 500:	0e 94 96 03 	call	0x72c	; 0x72c <__fixsfsi>
 504:	eb 01       	movw	r28, r22
		int extra = time % (int)((timeToOverflowOneByte)); // 37
 506:	c8 01       	movw	r24, r16
 508:	65 e0       	ldi	r22, 0x05	; 5
 50a:	71 e0       	ldi	r23, 0x01	; 1
 50c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__udivmodhi4>
		int extra_TCNT0_initial_value = (int)((timeToOverflowOneByte - extra)/preScaler); // 262.144 - 37 = 225.144
 510:	bc 01       	movw	r22, r24
 512:	99 0f       	add	r25, r25
 514:	88 0b       	sbc	r24, r24
 516:	99 0b       	sbc	r25, r25
 518:	0e 94 ce 03 	call	0x79c	; 0x79c <__floatsisf>
 51c:	9b 01       	movw	r18, r22
 51e:	ac 01       	movw	r20, r24
 520:	6c e5       	ldi	r22, 0x5C	; 92
 522:	7f e8       	ldi	r23, 0x8F	; 143
 524:	82 e8       	ldi	r24, 0x82	; 130
 526:	93 e4       	ldi	r25, 0x43	; 67
 528:	0e 94 b7 02 	call	0x56e	; 0x56e <__subsf3>
 52c:	2f e6       	ldi	r18, 0x6F	; 111
 52e:	32 e1       	ldi	r19, 0x12	; 18
 530:	43 e8       	ldi	r20, 0x83	; 131
 532:	5f e3       	ldi	r21, 0x3F	; 63
 534:	0e 94 24 03 	call	0x648	; 0x648 <__divsf3>
 538:	0e 94 96 03 	call	0x72c	; 0x72c <__fixsfsi>
		
		
		for(int iterator = 0 ; iterator < nIterations ;++iterator)
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	07 c0       	rjmp	.+14     	; 0x550 <timer_delay+0x7a>
		{
			Timer0_data = 0x00;
 542:	12 be       	out	0x32, r1	; 50
			while(Timer0_overflow_flag == 0);  // Wait for TOV0 to roll overs
 544:	08 b6       	in	r0, 0x38	; 56
 546:	00 fe       	sbrs	r0, 0
 548:	fd cf       	rjmp	.-6      	; 0x544 <timer_delay+0x6e>
			Timer_flags = 0x01;	// Clear TOV0 flag
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	28 bf       	out	0x38, r18	; 56
		int nIterations = (int)(time / timeToOverflowOneByte); // 1
		int extra = time % (int)((timeToOverflowOneByte)); // 37
		int extra_TCNT0_initial_value = (int)((timeToOverflowOneByte - extra)/preScaler); // 262.144 - 37 = 225.144
		
		
		for(int iterator = 0 ; iterator < nIterations ;++iterator)
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	8c 17       	cp	r24, r28
 552:	9d 07       	cpc	r25, r29
 554:	b4 f3       	brlt	.-20     	; 0x542 <timer_delay+0x6c>
			Timer0_data = 0x00;
			while(Timer0_overflow_flag == 0);  // Wait for TOV0 to roll overs
			Timer_flags = 0x01;	// Clear TOV0 flag
		}
		
		Timer0_data = extra_TCNT0_initial_value; // setting the initial value of TCVTO to be 256 - 37 = 219
 556:	62 bf       	out	0x32, r22	; 50
		while(Timer0_overflow_flag == 0);
 558:	08 b6       	in	r0, 0x38	; 56
 55a:	00 fe       	sbrs	r0, 0
 55c:	fd cf       	rjmp	.-6      	; 0x558 <timer_delay+0x82>
		Timer_flags = 0x01;  		// Clear TOV0 flag
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	88 bf       	out	0x38, r24	; 56
		Timer0_control = 0x00; // disable timer0
 562:	13 be       	out	0x33, r1	; 51
		
	}
}
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	08 95       	ret

0000056e <__subsf3>:
 56e:	50 58       	subi	r21, 0x80	; 128

00000570 <__addsf3>:
 570:	bb 27       	eor	r27, r27
 572:	aa 27       	eor	r26, r26
 574:	0e 94 cf 02 	call	0x59e	; 0x59e <__addsf3x>
 578:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_round>
 57c:	0e 94 12 04 	call	0x824	; 0x824 <__fp_pscA>
 580:	38 f0       	brcs	.+14     	; 0x590 <__addsf3+0x20>
 582:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscB>
 586:	20 f0       	brcs	.+8      	; 0x590 <__addsf3+0x20>
 588:	39 f4       	brne	.+14     	; 0x598 <__addsf3+0x28>
 58a:	9f 3f       	cpi	r25, 0xFF	; 255
 58c:	19 f4       	brne	.+6      	; 0x594 <__addsf3+0x24>
 58e:	26 f4       	brtc	.+8      	; 0x598 <__addsf3+0x28>
 590:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_nan>
 594:	0e f4       	brtc	.+2      	; 0x598 <__addsf3+0x28>
 596:	e0 95       	com	r30
 598:	e7 fb       	bst	r30, 7
 59a:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_inf>

0000059e <__addsf3x>:
 59e:	e9 2f       	mov	r30, r25
 5a0:	0e 94 31 04 	call	0x862	; 0x862 <__fp_split3>
 5a4:	58 f3       	brcs	.-42     	; 0x57c <__addsf3+0xc>
 5a6:	ba 17       	cp	r27, r26
 5a8:	62 07       	cpc	r22, r18
 5aa:	73 07       	cpc	r23, r19
 5ac:	84 07       	cpc	r24, r20
 5ae:	95 07       	cpc	r25, r21
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <__addsf3x+0x1c>
 5b2:	79 f4       	brne	.+30     	; 0x5d2 <__addsf3x+0x34>
 5b4:	a6 f5       	brtc	.+104    	; 0x61e <__addsf3x+0x80>
 5b6:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_zero>
 5ba:	0e f4       	brtc	.+2      	; 0x5be <__addsf3x+0x20>
 5bc:	e0 95       	com	r30
 5be:	0b 2e       	mov	r0, r27
 5c0:	ba 2f       	mov	r27, r26
 5c2:	a0 2d       	mov	r26, r0
 5c4:	0b 01       	movw	r0, r22
 5c6:	b9 01       	movw	r22, r18
 5c8:	90 01       	movw	r18, r0
 5ca:	0c 01       	movw	r0, r24
 5cc:	ca 01       	movw	r24, r20
 5ce:	a0 01       	movw	r20, r0
 5d0:	11 24       	eor	r1, r1
 5d2:	ff 27       	eor	r31, r31
 5d4:	59 1b       	sub	r21, r25
 5d6:	99 f0       	breq	.+38     	; 0x5fe <__addsf3x+0x60>
 5d8:	59 3f       	cpi	r21, 0xF9	; 249
 5da:	50 f4       	brcc	.+20     	; 0x5f0 <__addsf3x+0x52>
 5dc:	50 3e       	cpi	r21, 0xE0	; 224
 5de:	68 f1       	brcs	.+90     	; 0x63a <__addsf3x+0x9c>
 5e0:	1a 16       	cp	r1, r26
 5e2:	f0 40       	sbci	r31, 0x00	; 0
 5e4:	a2 2f       	mov	r26, r18
 5e6:	23 2f       	mov	r18, r19
 5e8:	34 2f       	mov	r19, r20
 5ea:	44 27       	eor	r20, r20
 5ec:	58 5f       	subi	r21, 0xF8	; 248
 5ee:	f3 cf       	rjmp	.-26     	; 0x5d6 <__addsf3x+0x38>
 5f0:	46 95       	lsr	r20
 5f2:	37 95       	ror	r19
 5f4:	27 95       	ror	r18
 5f6:	a7 95       	ror	r26
 5f8:	f0 40       	sbci	r31, 0x00	; 0
 5fa:	53 95       	inc	r21
 5fc:	c9 f7       	brne	.-14     	; 0x5f0 <__addsf3x+0x52>
 5fe:	7e f4       	brtc	.+30     	; 0x61e <__addsf3x+0x80>
 600:	1f 16       	cp	r1, r31
 602:	ba 0b       	sbc	r27, r26
 604:	62 0b       	sbc	r22, r18
 606:	73 0b       	sbc	r23, r19
 608:	84 0b       	sbc	r24, r20
 60a:	ba f0       	brmi	.+46     	; 0x63a <__addsf3x+0x9c>
 60c:	91 50       	subi	r25, 0x01	; 1
 60e:	a1 f0       	breq	.+40     	; 0x638 <__addsf3x+0x9a>
 610:	ff 0f       	add	r31, r31
 612:	bb 1f       	adc	r27, r27
 614:	66 1f       	adc	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	88 1f       	adc	r24, r24
 61a:	c2 f7       	brpl	.-16     	; 0x60c <__addsf3x+0x6e>
 61c:	0e c0       	rjmp	.+28     	; 0x63a <__addsf3x+0x9c>
 61e:	ba 0f       	add	r27, r26
 620:	62 1f       	adc	r22, r18
 622:	73 1f       	adc	r23, r19
 624:	84 1f       	adc	r24, r20
 626:	48 f4       	brcc	.+18     	; 0x63a <__addsf3x+0x9c>
 628:	87 95       	ror	r24
 62a:	77 95       	ror	r23
 62c:	67 95       	ror	r22
 62e:	b7 95       	ror	r27
 630:	f7 95       	ror	r31
 632:	9e 3f       	cpi	r25, 0xFE	; 254
 634:	08 f0       	brcs	.+2      	; 0x638 <__addsf3x+0x9a>
 636:	b0 cf       	rjmp	.-160    	; 0x598 <__addsf3+0x28>
 638:	93 95       	inc	r25
 63a:	88 0f       	add	r24, r24
 63c:	08 f0       	brcs	.+2      	; 0x640 <__addsf3x+0xa2>
 63e:	99 27       	eor	r25, r25
 640:	ee 0f       	add	r30, r30
 642:	97 95       	ror	r25
 644:	87 95       	ror	r24
 646:	08 95       	ret

00000648 <__divsf3>:
 648:	0e 94 38 03 	call	0x670	; 0x670 <__divsf3x>
 64c:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_round>
 650:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscB>
 654:	58 f0       	brcs	.+22     	; 0x66c <__divsf3+0x24>
 656:	0e 94 12 04 	call	0x824	; 0x824 <__fp_pscA>
 65a:	40 f0       	brcs	.+16     	; 0x66c <__divsf3+0x24>
 65c:	29 f4       	brne	.+10     	; 0x668 <__divsf3+0x20>
 65e:	5f 3f       	cpi	r21, 0xFF	; 255
 660:	29 f0       	breq	.+10     	; 0x66c <__divsf3+0x24>
 662:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_inf>
 666:	51 11       	cpse	r21, r1
 668:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_szero>
 66c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_nan>

00000670 <__divsf3x>:
 670:	0e 94 31 04 	call	0x862	; 0x862 <__fp_split3>
 674:	68 f3       	brcs	.-38     	; 0x650 <__divsf3+0x8>

00000676 <__divsf3_pse>:
 676:	99 23       	and	r25, r25
 678:	b1 f3       	breq	.-20     	; 0x666 <__divsf3+0x1e>
 67a:	55 23       	and	r21, r21
 67c:	91 f3       	breq	.-28     	; 0x662 <__divsf3+0x1a>
 67e:	95 1b       	sub	r25, r21
 680:	55 0b       	sbc	r21, r21
 682:	bb 27       	eor	r27, r27
 684:	aa 27       	eor	r26, r26
 686:	62 17       	cp	r22, r18
 688:	73 07       	cpc	r23, r19
 68a:	84 07       	cpc	r24, r20
 68c:	38 f0       	brcs	.+14     	; 0x69c <__divsf3_pse+0x26>
 68e:	9f 5f       	subi	r25, 0xFF	; 255
 690:	5f 4f       	sbci	r21, 0xFF	; 255
 692:	22 0f       	add	r18, r18
 694:	33 1f       	adc	r19, r19
 696:	44 1f       	adc	r20, r20
 698:	aa 1f       	adc	r26, r26
 69a:	a9 f3       	breq	.-22     	; 0x686 <__divsf3_pse+0x10>
 69c:	35 d0       	rcall	.+106    	; 0x708 <__divsf3_pse+0x92>
 69e:	0e 2e       	mov	r0, r30
 6a0:	3a f0       	brmi	.+14     	; 0x6b0 <__divsf3_pse+0x3a>
 6a2:	e0 e8       	ldi	r30, 0x80	; 128
 6a4:	32 d0       	rcall	.+100    	; 0x70a <__divsf3_pse+0x94>
 6a6:	91 50       	subi	r25, 0x01	; 1
 6a8:	50 40       	sbci	r21, 0x00	; 0
 6aa:	e6 95       	lsr	r30
 6ac:	00 1c       	adc	r0, r0
 6ae:	ca f7       	brpl	.-14     	; 0x6a2 <__divsf3_pse+0x2c>
 6b0:	2b d0       	rcall	.+86     	; 0x708 <__divsf3_pse+0x92>
 6b2:	fe 2f       	mov	r31, r30
 6b4:	29 d0       	rcall	.+82     	; 0x708 <__divsf3_pse+0x92>
 6b6:	66 0f       	add	r22, r22
 6b8:	77 1f       	adc	r23, r23
 6ba:	88 1f       	adc	r24, r24
 6bc:	bb 1f       	adc	r27, r27
 6be:	26 17       	cp	r18, r22
 6c0:	37 07       	cpc	r19, r23
 6c2:	48 07       	cpc	r20, r24
 6c4:	ab 07       	cpc	r26, r27
 6c6:	b0 e8       	ldi	r27, 0x80	; 128
 6c8:	09 f0       	breq	.+2      	; 0x6cc <__divsf3_pse+0x56>
 6ca:	bb 0b       	sbc	r27, r27
 6cc:	80 2d       	mov	r24, r0
 6ce:	bf 01       	movw	r22, r30
 6d0:	ff 27       	eor	r31, r31
 6d2:	93 58       	subi	r25, 0x83	; 131
 6d4:	5f 4f       	sbci	r21, 0xFF	; 255
 6d6:	3a f0       	brmi	.+14     	; 0x6e6 <__divsf3_pse+0x70>
 6d8:	9e 3f       	cpi	r25, 0xFE	; 254
 6da:	51 05       	cpc	r21, r1
 6dc:	78 f0       	brcs	.+30     	; 0x6fc <__divsf3_pse+0x86>
 6de:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_inf>
 6e2:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_szero>
 6e6:	5f 3f       	cpi	r21, 0xFF	; 255
 6e8:	e4 f3       	brlt	.-8      	; 0x6e2 <__divsf3_pse+0x6c>
 6ea:	98 3e       	cpi	r25, 0xE8	; 232
 6ec:	d4 f3       	brlt	.-12     	; 0x6e2 <__divsf3_pse+0x6c>
 6ee:	86 95       	lsr	r24
 6f0:	77 95       	ror	r23
 6f2:	67 95       	ror	r22
 6f4:	b7 95       	ror	r27
 6f6:	f7 95       	ror	r31
 6f8:	9f 5f       	subi	r25, 0xFF	; 255
 6fa:	c9 f7       	brne	.-14     	; 0x6ee <__divsf3_pse+0x78>
 6fc:	88 0f       	add	r24, r24
 6fe:	91 1d       	adc	r25, r1
 700:	96 95       	lsr	r25
 702:	87 95       	ror	r24
 704:	97 f9       	bld	r25, 7
 706:	08 95       	ret
 708:	e1 e0       	ldi	r30, 0x01	; 1
 70a:	66 0f       	add	r22, r22
 70c:	77 1f       	adc	r23, r23
 70e:	88 1f       	adc	r24, r24
 710:	bb 1f       	adc	r27, r27
 712:	62 17       	cp	r22, r18
 714:	73 07       	cpc	r23, r19
 716:	84 07       	cpc	r24, r20
 718:	ba 07       	cpc	r27, r26
 71a:	20 f0       	brcs	.+8      	; 0x724 <__divsf3_pse+0xae>
 71c:	62 1b       	sub	r22, r18
 71e:	73 0b       	sbc	r23, r19
 720:	84 0b       	sbc	r24, r20
 722:	ba 0b       	sbc	r27, r26
 724:	ee 1f       	adc	r30, r30
 726:	88 f7       	brcc	.-30     	; 0x70a <__divsf3_pse+0x94>
 728:	e0 95       	com	r30
 72a:	08 95       	ret

0000072c <__fixsfsi>:
 72c:	0e 94 9d 03 	call	0x73a	; 0x73a <__fixunssfsi>
 730:	68 94       	set
 732:	b1 11       	cpse	r27, r1
 734:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_szero>
 738:	08 95       	ret

0000073a <__fixunssfsi>:
 73a:	0e 94 39 04 	call	0x872	; 0x872 <__fp_splitA>
 73e:	88 f0       	brcs	.+34     	; 0x762 <__fixunssfsi+0x28>
 740:	9f 57       	subi	r25, 0x7F	; 127
 742:	98 f0       	brcs	.+38     	; 0x76a <__fixunssfsi+0x30>
 744:	b9 2f       	mov	r27, r25
 746:	99 27       	eor	r25, r25
 748:	b7 51       	subi	r27, 0x17	; 23
 74a:	b0 f0       	brcs	.+44     	; 0x778 <__fixunssfsi+0x3e>
 74c:	e1 f0       	breq	.+56     	; 0x786 <__fixunssfsi+0x4c>
 74e:	66 0f       	add	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	1a f0       	brmi	.+6      	; 0x75e <__fixunssfsi+0x24>
 758:	ba 95       	dec	r27
 75a:	c9 f7       	brne	.-14     	; 0x74e <__fixunssfsi+0x14>
 75c:	14 c0       	rjmp	.+40     	; 0x786 <__fixunssfsi+0x4c>
 75e:	b1 30       	cpi	r27, 0x01	; 1
 760:	91 f0       	breq	.+36     	; 0x786 <__fixunssfsi+0x4c>
 762:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_zero>
 766:	b1 e0       	ldi	r27, 0x01	; 1
 768:	08 95       	ret
 76a:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_zero>
 76e:	67 2f       	mov	r22, r23
 770:	78 2f       	mov	r23, r24
 772:	88 27       	eor	r24, r24
 774:	b8 5f       	subi	r27, 0xF8	; 248
 776:	39 f0       	breq	.+14     	; 0x786 <__fixunssfsi+0x4c>
 778:	b9 3f       	cpi	r27, 0xF9	; 249
 77a:	cc f3       	brlt	.-14     	; 0x76e <__fixunssfsi+0x34>
 77c:	86 95       	lsr	r24
 77e:	77 95       	ror	r23
 780:	67 95       	ror	r22
 782:	b3 95       	inc	r27
 784:	d9 f7       	brne	.-10     	; 0x77c <__fixunssfsi+0x42>
 786:	3e f4       	brtc	.+14     	; 0x796 <__fixunssfsi+0x5c>
 788:	90 95       	com	r25
 78a:	80 95       	com	r24
 78c:	70 95       	com	r23
 78e:	61 95       	neg	r22
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	8f 4f       	sbci	r24, 0xFF	; 255
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	08 95       	ret

00000798 <__floatunsisf>:
 798:	e8 94       	clt
 79a:	09 c0       	rjmp	.+18     	; 0x7ae <__floatsisf+0x12>

0000079c <__floatsisf>:
 79c:	97 fb       	bst	r25, 7
 79e:	3e f4       	brtc	.+14     	; 0x7ae <__floatsisf+0x12>
 7a0:	90 95       	com	r25
 7a2:	80 95       	com	r24
 7a4:	70 95       	com	r23
 7a6:	61 95       	neg	r22
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	8f 4f       	sbci	r24, 0xFF	; 255
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	99 23       	and	r25, r25
 7b0:	a9 f0       	breq	.+42     	; 0x7dc <__floatsisf+0x40>
 7b2:	f9 2f       	mov	r31, r25
 7b4:	96 e9       	ldi	r25, 0x96	; 150
 7b6:	bb 27       	eor	r27, r27
 7b8:	93 95       	inc	r25
 7ba:	f6 95       	lsr	r31
 7bc:	87 95       	ror	r24
 7be:	77 95       	ror	r23
 7c0:	67 95       	ror	r22
 7c2:	b7 95       	ror	r27
 7c4:	f1 11       	cpse	r31, r1
 7c6:	f8 cf       	rjmp	.-16     	; 0x7b8 <__floatsisf+0x1c>
 7c8:	fa f4       	brpl	.+62     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7ca:	bb 0f       	add	r27, r27
 7cc:	11 f4       	brne	.+4      	; 0x7d2 <__floatsisf+0x36>
 7ce:	60 ff       	sbrs	r22, 0
 7d0:	1b c0       	rjmp	.+54     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7d2:	6f 5f       	subi	r22, 0xFF	; 255
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255
 7d6:	8f 4f       	sbci	r24, 0xFF	; 255
 7d8:	9f 4f       	sbci	r25, 0xFF	; 255
 7da:	16 c0       	rjmp	.+44     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7dc:	88 23       	and	r24, r24
 7de:	11 f0       	breq	.+4      	; 0x7e4 <__floatsisf+0x48>
 7e0:	96 e9       	ldi	r25, 0x96	; 150
 7e2:	11 c0       	rjmp	.+34     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7e4:	77 23       	and	r23, r23
 7e6:	21 f0       	breq	.+8      	; 0x7f0 <__floatsisf+0x54>
 7e8:	9e e8       	ldi	r25, 0x8E	; 142
 7ea:	87 2f       	mov	r24, r23
 7ec:	76 2f       	mov	r23, r22
 7ee:	05 c0       	rjmp	.+10     	; 0x7fa <__floatsisf+0x5e>
 7f0:	66 23       	and	r22, r22
 7f2:	71 f0       	breq	.+28     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7f4:	96 e8       	ldi	r25, 0x86	; 134
 7f6:	86 2f       	mov	r24, r22
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	2a f0       	brmi	.+10     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fe:	9a 95       	dec	r25
 800:	66 0f       	add	r22, r22
 802:	77 1f       	adc	r23, r23
 804:	88 1f       	adc	r24, r24
 806:	da f7       	brpl	.-10     	; 0x7fe <__floatsisf+0x62>
 808:	88 0f       	add	r24, r24
 80a:	96 95       	lsr	r25
 80c:	87 95       	ror	r24
 80e:	97 f9       	bld	r25, 7
 810:	08 95       	ret

00000812 <__fp_inf>:
 812:	97 f9       	bld	r25, 7
 814:	9f 67       	ori	r25, 0x7F	; 127
 816:	80 e8       	ldi	r24, 0x80	; 128
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	08 95       	ret

0000081e <__fp_nan>:
 81e:	9f ef       	ldi	r25, 0xFF	; 255
 820:	80 ec       	ldi	r24, 0xC0	; 192
 822:	08 95       	ret

00000824 <__fp_pscA>:
 824:	00 24       	eor	r0, r0
 826:	0a 94       	dec	r0
 828:	16 16       	cp	r1, r22
 82a:	17 06       	cpc	r1, r23
 82c:	18 06       	cpc	r1, r24
 82e:	09 06       	cpc	r0, r25
 830:	08 95       	ret

00000832 <__fp_pscB>:
 832:	00 24       	eor	r0, r0
 834:	0a 94       	dec	r0
 836:	12 16       	cp	r1, r18
 838:	13 06       	cpc	r1, r19
 83a:	14 06       	cpc	r1, r20
 83c:	05 06       	cpc	r0, r21
 83e:	08 95       	ret

00000840 <__fp_round>:
 840:	09 2e       	mov	r0, r25
 842:	03 94       	inc	r0
 844:	00 0c       	add	r0, r0
 846:	11 f4       	brne	.+4      	; 0x84c <__fp_round+0xc>
 848:	88 23       	and	r24, r24
 84a:	52 f0       	brmi	.+20     	; 0x860 <__stack+0x1>
 84c:	bb 0f       	add	r27, r27
 84e:	40 f4       	brcc	.+16     	; 0x860 <__stack+0x1>
 850:	bf 2b       	or	r27, r31
 852:	11 f4       	brne	.+4      	; 0x858 <__fp_round+0x18>
 854:	60 ff       	sbrs	r22, 0
 856:	04 c0       	rjmp	.+8      	; 0x860 <__stack+0x1>
 858:	6f 5f       	subi	r22, 0xFF	; 255
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	8f 4f       	sbci	r24, 0xFF	; 255
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	08 95       	ret

00000862 <__fp_split3>:
 862:	57 fd       	sbrc	r21, 7
 864:	90 58       	subi	r25, 0x80	; 128
 866:	44 0f       	add	r20, r20
 868:	55 1f       	adc	r21, r21
 86a:	59 f0       	breq	.+22     	; 0x882 <__fp_splitA+0x10>
 86c:	5f 3f       	cpi	r21, 0xFF	; 255
 86e:	71 f0       	breq	.+28     	; 0x88c <__fp_splitA+0x1a>
 870:	47 95       	ror	r20

00000872 <__fp_splitA>:
 872:	88 0f       	add	r24, r24
 874:	97 fb       	bst	r25, 7
 876:	99 1f       	adc	r25, r25
 878:	61 f0       	breq	.+24     	; 0x892 <__fp_splitA+0x20>
 87a:	9f 3f       	cpi	r25, 0xFF	; 255
 87c:	79 f0       	breq	.+30     	; 0x89c <__fp_splitA+0x2a>
 87e:	87 95       	ror	r24
 880:	08 95       	ret
 882:	12 16       	cp	r1, r18
 884:	13 06       	cpc	r1, r19
 886:	14 06       	cpc	r1, r20
 888:	55 1f       	adc	r21, r21
 88a:	f2 cf       	rjmp	.-28     	; 0x870 <__fp_split3+0xe>
 88c:	46 95       	lsr	r20
 88e:	f1 df       	rcall	.-30     	; 0x872 <__fp_splitA>
 890:	08 c0       	rjmp	.+16     	; 0x8a2 <__fp_splitA+0x30>
 892:	16 16       	cp	r1, r22
 894:	17 06       	cpc	r1, r23
 896:	18 06       	cpc	r1, r24
 898:	99 1f       	adc	r25, r25
 89a:	f1 cf       	rjmp	.-30     	; 0x87e <__fp_splitA+0xc>
 89c:	86 95       	lsr	r24
 89e:	71 05       	cpc	r23, r1
 8a0:	61 05       	cpc	r22, r1
 8a2:	08 94       	sec
 8a4:	08 95       	ret

000008a6 <__fp_zero>:
 8a6:	e8 94       	clt

000008a8 <__fp_szero>:
 8a8:	bb 27       	eor	r27, r27
 8aa:	66 27       	eor	r22, r22
 8ac:	77 27       	eor	r23, r23
 8ae:	cb 01       	movw	r24, r22
 8b0:	97 f9       	bld	r25, 7
 8b2:	08 95       	ret

000008b4 <__udivmodhi4>:
 8b4:	aa 1b       	sub	r26, r26
 8b6:	bb 1b       	sub	r27, r27
 8b8:	51 e1       	ldi	r21, 0x11	; 17
 8ba:	07 c0       	rjmp	.+14     	; 0x8ca <__udivmodhi4_ep>

000008bc <__udivmodhi4_loop>:
 8bc:	aa 1f       	adc	r26, r26
 8be:	bb 1f       	adc	r27, r27
 8c0:	a6 17       	cp	r26, r22
 8c2:	b7 07       	cpc	r27, r23
 8c4:	10 f0       	brcs	.+4      	; 0x8ca <__udivmodhi4_ep>
 8c6:	a6 1b       	sub	r26, r22
 8c8:	b7 0b       	sbc	r27, r23

000008ca <__udivmodhi4_ep>:
 8ca:	88 1f       	adc	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	5a 95       	dec	r21
 8d0:	a9 f7       	brne	.-22     	; 0x8bc <__udivmodhi4_loop>
 8d2:	80 95       	com	r24
 8d4:	90 95       	com	r25
 8d6:	bc 01       	movw	r22, r24
 8d8:	cd 01       	movw	r24, r26
 8da:	08 95       	ret

000008dc <__divmodhi4>:
 8dc:	97 fb       	bst	r25, 7
 8de:	07 2e       	mov	r0, r23
 8e0:	16 f4       	brtc	.+4      	; 0x8e6 <__divmodhi4+0xa>
 8e2:	00 94       	com	r0
 8e4:	07 d0       	rcall	.+14     	; 0x8f4 <__divmodhi4_neg1>
 8e6:	77 fd       	sbrc	r23, 7
 8e8:	09 d0       	rcall	.+18     	; 0x8fc <__divmodhi4_neg2>
 8ea:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__udivmodhi4>
 8ee:	07 fc       	sbrc	r0, 7
 8f0:	05 d0       	rcall	.+10     	; 0x8fc <__divmodhi4_neg2>
 8f2:	3e f4       	brtc	.+14     	; 0x902 <__divmodhi4_exit>

000008f4 <__divmodhi4_neg1>:
 8f4:	90 95       	com	r25
 8f6:	81 95       	neg	r24
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	08 95       	ret

000008fc <__divmodhi4_neg2>:
 8fc:	70 95       	com	r23
 8fe:	61 95       	neg	r22
 900:	7f 4f       	sbci	r23, 0xFF	; 255

00000902 <__divmodhi4_exit>:
 902:	08 95       	ret

00000904 <do_rand>:
 904:	8f 92       	push	r8
 906:	9f 92       	push	r9
 908:	af 92       	push	r10
 90a:	bf 92       	push	r11
 90c:	cf 92       	push	r12
 90e:	df 92       	push	r13
 910:	ef 92       	push	r14
 912:	ff 92       	push	r15
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	ec 01       	movw	r28, r24
 91a:	68 81       	ld	r22, Y
 91c:	79 81       	ldd	r23, Y+1	; 0x01
 91e:	8a 81       	ldd	r24, Y+2	; 0x02
 920:	9b 81       	ldd	r25, Y+3	; 0x03
 922:	61 15       	cp	r22, r1
 924:	71 05       	cpc	r23, r1
 926:	81 05       	cpc	r24, r1
 928:	91 05       	cpc	r25, r1
 92a:	21 f4       	brne	.+8      	; 0x934 <do_rand+0x30>
 92c:	64 e2       	ldi	r22, 0x24	; 36
 92e:	79 ed       	ldi	r23, 0xD9	; 217
 930:	8b e5       	ldi	r24, 0x5B	; 91
 932:	97 e0       	ldi	r25, 0x07	; 7
 934:	2d e1       	ldi	r18, 0x1D	; 29
 936:	33 ef       	ldi	r19, 0xF3	; 243
 938:	41 e0       	ldi	r20, 0x01	; 1
 93a:	50 e0       	ldi	r21, 0x00	; 0
 93c:	0e 94 39 05 	call	0xa72	; 0xa72 <__divmodsi4>
 940:	49 01       	movw	r8, r18
 942:	5a 01       	movw	r10, r20
 944:	9b 01       	movw	r18, r22
 946:	ac 01       	movw	r20, r24
 948:	a7 ea       	ldi	r26, 0xA7	; 167
 94a:	b1 e4       	ldi	r27, 0x41	; 65
 94c:	0e 94 58 05 	call	0xab0	; 0xab0 <__muluhisi3>
 950:	6b 01       	movw	r12, r22
 952:	7c 01       	movw	r14, r24
 954:	ac ee       	ldi	r26, 0xEC	; 236
 956:	b4 ef       	ldi	r27, 0xF4	; 244
 958:	a5 01       	movw	r20, r10
 95a:	94 01       	movw	r18, r8
 95c:	0e 94 66 05 	call	0xacc	; 0xacc <__mulohisi3>
 960:	dc 01       	movw	r26, r24
 962:	cb 01       	movw	r24, r22
 964:	8c 0d       	add	r24, r12
 966:	9d 1d       	adc	r25, r13
 968:	ae 1d       	adc	r26, r14
 96a:	bf 1d       	adc	r27, r15
 96c:	b7 ff       	sbrs	r27, 7
 96e:	03 c0       	rjmp	.+6      	; 0x976 <do_rand+0x72>
 970:	01 97       	sbiw	r24, 0x01	; 1
 972:	a1 09       	sbc	r26, r1
 974:	b0 48       	sbci	r27, 0x80	; 128
 976:	88 83       	st	Y, r24
 978:	99 83       	std	Y+1, r25	; 0x01
 97a:	aa 83       	std	Y+2, r26	; 0x02
 97c:	bb 83       	std	Y+3, r27	; 0x03
 97e:	9f 77       	andi	r25, 0x7F	; 127
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	ff 90       	pop	r15
 986:	ef 90       	pop	r14
 988:	df 90       	pop	r13
 98a:	cf 90       	pop	r12
 98c:	bf 90       	pop	r11
 98e:	af 90       	pop	r10
 990:	9f 90       	pop	r9
 992:	8f 90       	pop	r8
 994:	08 95       	ret

00000996 <rand_r>:
 996:	0e 94 82 04 	call	0x904	; 0x904 <do_rand>
 99a:	08 95       	ret

0000099c <rand>:
 99c:	80 e6       	ldi	r24, 0x60	; 96
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 82 04 	call	0x904	; 0x904 <do_rand>
 9a4:	08 95       	ret

000009a6 <srand>:
 9a6:	a0 e0       	ldi	r26, 0x00	; 0
 9a8:	b0 e0       	ldi	r27, 0x00	; 0
 9aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 9ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 9b2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 9b6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 9ba:	08 95       	ret

000009bc <atoi>:
 9bc:	fc 01       	movw	r30, r24
 9be:	88 27       	eor	r24, r24
 9c0:	99 27       	eor	r25, r25
 9c2:	e8 94       	clt
 9c4:	21 91       	ld	r18, Z+
 9c6:	20 32       	cpi	r18, 0x20	; 32
 9c8:	e9 f3       	breq	.-6      	; 0x9c4 <atoi+0x8>
 9ca:	29 30       	cpi	r18, 0x09	; 9
 9cc:	10 f0       	brcs	.+4      	; 0x9d2 <atoi+0x16>
 9ce:	2e 30       	cpi	r18, 0x0E	; 14
 9d0:	c8 f3       	brcs	.-14     	; 0x9c4 <atoi+0x8>
 9d2:	2b 32       	cpi	r18, 0x2B	; 43
 9d4:	41 f0       	breq	.+16     	; 0x9e6 <atoi+0x2a>
 9d6:	2d 32       	cpi	r18, 0x2D	; 45
 9d8:	39 f4       	brne	.+14     	; 0x9e8 <atoi+0x2c>
 9da:	68 94       	set
 9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <atoi+0x2a>
 9de:	0e 94 07 05 	call	0xa0e	; 0xa0e <__mulhi_const_10>
 9e2:	82 0f       	add	r24, r18
 9e4:	91 1d       	adc	r25, r1
 9e6:	21 91       	ld	r18, Z+
 9e8:	20 53       	subi	r18, 0x30	; 48
 9ea:	2a 30       	cpi	r18, 0x0A	; 10
 9ec:	c0 f3       	brcs	.-16     	; 0x9de <atoi+0x22>
 9ee:	1e f4       	brtc	.+6      	; 0x9f6 <atoi+0x3a>
 9f0:	90 95       	com	r25
 9f2:	81 95       	neg	r24
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	08 95       	ret

000009f8 <__itoa_ncheck>:
 9f8:	bb 27       	eor	r27, r27
 9fa:	4a 30       	cpi	r20, 0x0A	; 10
 9fc:	31 f4       	brne	.+12     	; 0xa0a <__itoa_ncheck+0x12>
 9fe:	99 23       	and	r25, r25
 a00:	22 f4       	brpl	.+8      	; 0xa0a <__itoa_ncheck+0x12>
 a02:	bd e2       	ldi	r27, 0x2D	; 45
 a04:	90 95       	com	r25
 a06:	81 95       	neg	r24
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__utoa_common>

00000a0e <__mulhi_const_10>:
 a0e:	7a e0       	ldi	r23, 0x0A	; 10
 a10:	97 9f       	mul	r25, r23
 a12:	90 2d       	mov	r25, r0
 a14:	87 9f       	mul	r24, r23
 a16:	80 2d       	mov	r24, r0
 a18:	91 0d       	add	r25, r1
 a1a:	11 24       	eor	r1, r1
 a1c:	08 95       	ret

00000a1e <__utoa_ncheck>:
 a1e:	bb 27       	eor	r27, r27

00000a20 <__utoa_common>:
 a20:	fb 01       	movw	r30, r22
 a22:	55 27       	eor	r21, r21
 a24:	aa 27       	eor	r26, r26
 a26:	88 0f       	add	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	aa 1f       	adc	r26, r26
 a2c:	a4 17       	cp	r26, r20
 a2e:	10 f0       	brcs	.+4      	; 0xa34 <__utoa_common+0x14>
 a30:	a4 1b       	sub	r26, r20
 a32:	83 95       	inc	r24
 a34:	50 51       	subi	r21, 0x10	; 16
 a36:	b9 f7       	brne	.-18     	; 0xa26 <__utoa_common+0x6>
 a38:	a0 5d       	subi	r26, 0xD0	; 208
 a3a:	aa 33       	cpi	r26, 0x3A	; 58
 a3c:	08 f0       	brcs	.+2      	; 0xa40 <__utoa_common+0x20>
 a3e:	a9 5d       	subi	r26, 0xD9	; 217
 a40:	a1 93       	st	Z+, r26
 a42:	00 97       	sbiw	r24, 0x00	; 0
 a44:	79 f7       	brne	.-34     	; 0xa24 <__utoa_common+0x4>
 a46:	b1 11       	cpse	r27, r1
 a48:	b1 93       	st	Z+, r27
 a4a:	11 92       	st	Z+, r1
 a4c:	cb 01       	movw	r24, r22
 a4e:	0c 94 29 05 	jmp	0xa52	; 0xa52 <strrev>

00000a52 <strrev>:
 a52:	dc 01       	movw	r26, r24
 a54:	fc 01       	movw	r30, r24
 a56:	67 2f       	mov	r22, r23
 a58:	71 91       	ld	r23, Z+
 a5a:	77 23       	and	r23, r23
 a5c:	e1 f7       	brne	.-8      	; 0xa56 <strrev+0x4>
 a5e:	32 97       	sbiw	r30, 0x02	; 2
 a60:	04 c0       	rjmp	.+8      	; 0xa6a <strrev+0x18>
 a62:	7c 91       	ld	r23, X
 a64:	6d 93       	st	X+, r22
 a66:	70 83       	st	Z, r23
 a68:	62 91       	ld	r22, -Z
 a6a:	ae 17       	cp	r26, r30
 a6c:	bf 07       	cpc	r27, r31
 a6e:	c8 f3       	brcs	.-14     	; 0xa62 <strrev+0x10>
 a70:	08 95       	ret

00000a72 <__divmodsi4>:
 a72:	05 2e       	mov	r0, r21
 a74:	97 fb       	bst	r25, 7
 a76:	1e f4       	brtc	.+6      	; 0xa7e <__divmodsi4+0xc>
 a78:	00 94       	com	r0
 a7a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__negsi2>
 a7e:	57 fd       	sbrc	r21, 7
 a80:	07 d0       	rcall	.+14     	; 0xa90 <__divmodsi4_neg2>
 a82:	0e 94 6b 05 	call	0xad6	; 0xad6 <__udivmodsi4>
 a86:	07 fc       	sbrc	r0, 7
 a88:	03 d0       	rcall	.+6      	; 0xa90 <__divmodsi4_neg2>
 a8a:	4e f4       	brtc	.+18     	; 0xa9e <__divmodsi4_exit>
 a8c:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__negsi2>

00000a90 <__divmodsi4_neg2>:
 a90:	50 95       	com	r21
 a92:	40 95       	com	r20
 a94:	30 95       	com	r19
 a96:	21 95       	neg	r18
 a98:	3f 4f       	sbci	r19, 0xFF	; 255
 a9a:	4f 4f       	sbci	r20, 0xFF	; 255
 a9c:	5f 4f       	sbci	r21, 0xFF	; 255

00000a9e <__divmodsi4_exit>:
 a9e:	08 95       	ret

00000aa0 <__negsi2>:
 aa0:	90 95       	com	r25
 aa2:	80 95       	com	r24
 aa4:	70 95       	com	r23
 aa6:	61 95       	neg	r22
 aa8:	7f 4f       	sbci	r23, 0xFF	; 255
 aaa:	8f 4f       	sbci	r24, 0xFF	; 255
 aac:	9f 4f       	sbci	r25, 0xFF	; 255
 aae:	08 95       	ret

00000ab0 <__muluhisi3>:
 ab0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__umulhisi3>
 ab4:	a5 9f       	mul	r26, r21
 ab6:	90 0d       	add	r25, r0
 ab8:	b4 9f       	mul	r27, r20
 aba:	90 0d       	add	r25, r0
 abc:	a4 9f       	mul	r26, r20
 abe:	80 0d       	add	r24, r0
 ac0:	91 1d       	adc	r25, r1
 ac2:	11 24       	eor	r1, r1
 ac4:	08 95       	ret

00000ac6 <__mulshisi3>:
 ac6:	b7 ff       	sbrs	r27, 7
 ac8:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__muluhisi3>

00000acc <__mulohisi3>:
 acc:	0e 94 58 05 	call	0xab0	; 0xab0 <__muluhisi3>
 ad0:	82 1b       	sub	r24, r18
 ad2:	93 0b       	sbc	r25, r19
 ad4:	08 95       	ret

00000ad6 <__udivmodsi4>:
 ad6:	a1 e2       	ldi	r26, 0x21	; 33
 ad8:	1a 2e       	mov	r1, r26
 ada:	aa 1b       	sub	r26, r26
 adc:	bb 1b       	sub	r27, r27
 ade:	fd 01       	movw	r30, r26
 ae0:	0d c0       	rjmp	.+26     	; 0xafc <__udivmodsi4_ep>

00000ae2 <__udivmodsi4_loop>:
 ae2:	aa 1f       	adc	r26, r26
 ae4:	bb 1f       	adc	r27, r27
 ae6:	ee 1f       	adc	r30, r30
 ae8:	ff 1f       	adc	r31, r31
 aea:	a2 17       	cp	r26, r18
 aec:	b3 07       	cpc	r27, r19
 aee:	e4 07       	cpc	r30, r20
 af0:	f5 07       	cpc	r31, r21
 af2:	20 f0       	brcs	.+8      	; 0xafc <__udivmodsi4_ep>
 af4:	a2 1b       	sub	r26, r18
 af6:	b3 0b       	sbc	r27, r19
 af8:	e4 0b       	sbc	r30, r20
 afa:	f5 0b       	sbc	r31, r21

00000afc <__udivmodsi4_ep>:
 afc:	66 1f       	adc	r22, r22
 afe:	77 1f       	adc	r23, r23
 b00:	88 1f       	adc	r24, r24
 b02:	99 1f       	adc	r25, r25
 b04:	1a 94       	dec	r1
 b06:	69 f7       	brne	.-38     	; 0xae2 <__udivmodsi4_loop>
 b08:	60 95       	com	r22
 b0a:	70 95       	com	r23
 b0c:	80 95       	com	r24
 b0e:	90 95       	com	r25
 b10:	9b 01       	movw	r18, r22
 b12:	ac 01       	movw	r20, r24
 b14:	bd 01       	movw	r22, r26
 b16:	cf 01       	movw	r24, r30
 b18:	08 95       	ret

00000b1a <__umulhisi3>:
 b1a:	a2 9f       	mul	r26, r18
 b1c:	b0 01       	movw	r22, r0
 b1e:	b3 9f       	mul	r27, r19
 b20:	c0 01       	movw	r24, r0
 b22:	a3 9f       	mul	r26, r19
 b24:	70 0d       	add	r23, r0
 b26:	81 1d       	adc	r24, r1
 b28:	11 24       	eor	r1, r1
 b2a:	91 1d       	adc	r25, r1
 b2c:	b2 9f       	mul	r27, r18
 b2e:	70 0d       	add	r23, r0
 b30:	81 1d       	adc	r24, r1
 b32:	11 24       	eor	r1, r1
 b34:	91 1d       	adc	r25, r1
 b36:	08 95       	ret

00000b38 <_exit>:
 b38:	f8 94       	cli

00000b3a <__stop_program>:
 b3a:	ff cf       	rjmp	.-2      	; 0xb3a <__stop_program>
